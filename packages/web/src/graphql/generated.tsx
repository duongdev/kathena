/* THIS IS AN AUTO-GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

import { DocumentNode } from 'graphql'
import * as Apollo from '@apollo/client'
import * as ApolloReactHoc from '@apollo/client/react/hoc'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any
  /** The `Upload` scalar type represents a file upload. */
  Upload: any
}

export type AcademicSubject = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  code: Scalars['String']
  description: Scalars['String']
  publication: Publication
  imageFileId: Scalars['String']
}

export type AcademicSubjectsFilterInput = {
  orgId: Scalars['ID']
  searchText?: Maybe<Scalars['String']>
}

export type AcademicSubjectsPayload = {
  academicSubjects: Array<AcademicSubject>
  count: Scalars['Int']
}

export type Account = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  status: AccountStatus
  roles: Array<Scalars['String']>
  availability: AccountAvailability
}

export enum AccountAvailability {
  Online = 'Online',
  Offline = 'Offline',
  Away = 'Away',
}

/** Status of an account. */
export enum AccountStatus {
  Pending = 'Pending',
  Active = 'Active',
  Deactivated = 'Deactivated',
}

export type AccountsFilterInput = {
  orgId: Scalars['ID']
  roles?: Maybe<Array<Scalars['String']>>
  searchText?: Maybe<Scalars['String']>
}

export type AddAttachmentsToClassworkInput = {
  attachments: Array<Scalars['Upload']>
}

export type AuthenticatePayload = {
  account: Account
  org: Org
  permissions: Array<Permission>
}

export type BaseModel = {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
}

export type ClassworkAssignment = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['String']
  courseId: Scalars['ID']
  title: Scalars['String']
  type: Scalars['String']
  description?: Maybe<Scalars['String']>
  attachments: Array<Scalars['String']>
  publicationState: Scalars['String']
  resolveType: Array<Scalars['String']>
  comments: Array<Comment>
  dueDate: Scalars['DateTime']
  maxScores: Scalars['Float']
}

export type ClassworkAssignmentPayload = {
  classworkAssignments: Array<ClassworkAssignment>
  count: Scalars['Int']
}

export type ClassworkMaterial = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['String']
  courseId: Scalars['ID']
  title: Scalars['String']
  type: Scalars['String']
  description?: Maybe<Scalars['String']>
  attachments: Array<Scalars['String']>
  publicationState: Scalars['String']
  resolveType: Array<Scalars['String']>
  comments: Array<Comment>
}

export type ClassworkMaterialPayload = {
  classworkMaterials: Array<ClassworkMaterial>
  count: Scalars['Int']
}

export type Comment = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['String']
  targetId: Scalars['ID']
  content: Scalars['String']
}

export type Course = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  academicSubjectId: Scalars['ID']
  orgOfficeId: Scalars['ID']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['DateTime']
  tuitionFee: Scalars['Float']
  publicationState: Publication
  publishedAt: Scalars['DateTime']
  lecturerIds: Array<Scalars['String']>
  studentIds: Array<Scalars['String']>
  createdByAccountId: Scalars['ID']
}

export type CoursesFilterInput = {
  orgId: Scalars['ID']
  searchText?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
  studentIds?: Maybe<Array<Scalars['ID']>>
}

export type CoursesPayload = {
  courses: Array<Course>
  count: Scalars['Int']
}

export type CreateAcademicSubjectInput = {
  name: Scalars['String']
  code: Scalars['String']
  description?: Maybe<Scalars['String']>
  image: Scalars['Upload']
}

export type CreateAccountInput = {
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  roles: Array<Scalars['String']>
}

export type CreateClassworkAssignmentInput = {
  title: Scalars['String']
  description: Scalars['String']
  attachments?: Maybe<Array<Scalars['Upload']>>
  dueDate: Scalars['String']
  publicationState?: Maybe<Publication>
}

export type CreateClassworkMaterialInput = {
  title: Scalars['String']
  description?: Maybe<Scalars['String']>
  publicationState?: Maybe<Publication>
  attachments?: Maybe<Array<Scalars['Upload']>>
}

export type CreateCourseInput = {
  academicSubjectId: Scalars['String']
  orgOfficeId: Scalars['String']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['String']
  tuitionFee: Scalars['Float']
  lecturerIds?: Maybe<Array<Scalars['String']>>
}

export type CreateOrgOfficeInput = {
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type File = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  size: Scalars['Int']
  mimeType: Scalars['String']
  storageProvider: FileLocation
  storageProviderIdentifier: Scalars['String']
  signedUrl?: Maybe<Scalars['String']>
}

export enum FileLocation {
  LocalStorage = 'LocalStorage',
}

export type Mutation = {
  createOrgAccount: Account
  updateAccount: Account
  updateAccountStatus: Account
  signIn: SignInPayload
  createAcademicSubject: AcademicSubject
  updateAcademicSubjectPublication: AcademicSubject
  updateAcademicSubject: AcademicSubject
  createCourse: Course
  updateCourse: Course
  addLecturesToCourse: Course
  addStudentsToCourse: Course
  removeStudentsFromCourse: Course
  removeLecturersFromCourse: Course
  createOrgOffice: OrgOffice
  updateOrgOffice: OrgOffice
  findOrgOffices: Array<OrgOffice>
  updateFile: File
  createClassworkMaterial: ClassworkMaterial
  updateClassworkMaterial: ClassworkMaterial
  updateClassworkMaterialPublication: ClassworkMaterial
  addAttachmentsToClassworkMaterial: ClassworkMaterial
  removeAttachmentsFromClassworkMaterial: ClassworkMaterial
  createClassworkAssignment: ClassworkAssignment
  updateClassworkAssignment: ClassworkAssignment
  updateClassworkAssignmentPublication: ClassworkAssignment
  addAttachmentsToClassworkAssignment: ClassworkAssignment
  removeAttachmentsFromClassworkAssignments: ClassworkAssignment
}

export type MutationCreateOrgAccountArgs = {
  input: CreateAccountInput
}

export type MutationUpdateAccountArgs = {
  updateInput: UpdateAccountInput
  id: Scalars['ID']
}

export type MutationUpdateAccountStatusArgs = {
  status: Scalars['String']
  id: Scalars['ID']
}

export type MutationSignInArgs = {
  password: Scalars['String']
  identity: Scalars['String']
  orgNamespace: Scalars['String']
}

export type MutationCreateAcademicSubjectArgs = {
  input: CreateAcademicSubjectInput
}

export type MutationUpdateAcademicSubjectPublicationArgs = {
  publication: Scalars['String']
  id: Scalars['ID']
}

export type MutationUpdateAcademicSubjectArgs = {
  updateInput: UpdateAcademicSubjectInput
  id: Scalars['ID']
}

export type MutationCreateCourseArgs = {
  input: CreateCourseInput
}

export type MutationUpdateCourseArgs = {
  updateInput: UpdateCourseInput
  id: Scalars['ID']
}

export type MutationAddLecturesToCourseArgs = {
  lecturerIds: Array<Scalars['ID']>
  courseId: Scalars['ID']
}

export type MutationAddStudentsToCourseArgs = {
  studentIds: Array<Scalars['ID']>
  courseId: Scalars['ID']
}

export type MutationRemoveStudentsFromCourseArgs = {
  studentIds: Array<Scalars['ID']>
  id: Scalars['ID']
}

export type MutationRemoveLecturersFromCourseArgs = {
  lecturerIds: Array<Scalars['ID']>
  id: Scalars['ID']
}

export type MutationCreateOrgOfficeArgs = {
  input: CreateOrgOfficeInput
}

export type MutationUpdateOrgOfficeArgs = {
  input: UpdateOrgOfficeInput
  id: Scalars['ID']
}

export type MutationFindOrgOfficesArgs = {
  searchText?: Maybe<Scalars['String']>
  orgId?: Maybe<Scalars['ID']>
}

export type MutationUpdateFileArgs = {
  newFile: Scalars['Upload']
  id: Scalars['ID']
}

export type MutationCreateClassworkMaterialArgs = {
  CreateClassworkMaterialInput: CreateClassworkMaterialInput
  courseId: Scalars['ID']
}

export type MutationUpdateClassworkMaterialArgs = {
  updateClassworkMaterialInput: UpdateClassworkMaterialInput
  classworkMaterialId: Scalars['ID']
}

export type MutationUpdateClassworkMaterialPublicationArgs = {
  publicationState: Publication
  classworkMaterialId: Scalars['ID']
}

export type MutationAddAttachmentsToClassworkMaterialArgs = {
  attachmentsInput: AddAttachmentsToClassworkInput
  classworkMaterialId: Scalars['ID']
}

export type MutationRemoveAttachmentsFromClassworkMaterialArgs = {
  attachments: Array<Scalars['String']>
  classworkMaterialId: Scalars['ID']
}

export type MutationCreateClassworkAssignmentArgs = {
  courseId: Scalars['ID']
  input: CreateClassworkAssignmentInput
}

export type MutationUpdateClassworkAssignmentArgs = {
  updateInput: UpdateClassworkAssignmentInput
  id: Scalars['ID']
}

export type MutationUpdateClassworkAssignmentPublicationArgs = {
  publication: Scalars['String']
  id: Scalars['ID']
}

export type MutationAddAttachmentsToClassworkAssignmentArgs = {
  attachmentsInput: AddAttachmentsToClassworkInput
  classworkAssignmentId: Scalars['ID']
}

export type MutationRemoveAttachmentsFromClassworkAssignmentsArgs = {
  attachments: Array<Scalars['String']>
  classworkAssignmentId: Scalars['ID']
}

export type Org = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  namespace: Scalars['String']
  name: Scalars['String']
}

export type OrgAccountsPayload = {
  accounts: Array<Account>
  count: Scalars['Int']
}

export type OrgOffice = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type PageOptionsInput = {
  skip: Scalars['Int']
  limit: Scalars['Int']
}

export enum Permission {
  Hr_Access = 'Hr_Access',
  Hr_CreateOrgAccount = 'Hr_CreateOrgAccount',
  Hr_ListOrgAccounts = 'Hr_ListOrgAccounts',
  Hr_UpdateOrgAccount = 'Hr_UpdateOrgAccount',
  Hr_UpdateOrgAccountStatus = 'Hr_UpdateOrgAccountStatus',
  Academic_AcademicSubject_Access = 'Academic_AcademicSubject_Access',
  Academic_CreateAcademicSubject = 'Academic_CreateAcademicSubject',
  Academic_ListAcademicSubjects = 'Academic_ListAcademicSubjects',
  Academic_SetAcademicSubjectPublication = 'Academic_SetAcademicSubjectPublication',
  Academic_UpdateAcademicSubject = 'Academic_UpdateAcademicSubject',
  OrgOffice_Access = 'OrgOffice_Access',
  OrgOffice_CreateOrgOffice = 'OrgOffice_CreateOrgOffice',
  OrgOffice_ListOrgOffices = 'OrgOffice_ListOrgOffices',
  OrgOffice_UpdateOrgOffice = 'OrgOffice_UpdateOrgOffice',
  Classwork_ListClassworkAssignment = 'Classwork_ListClassworkAssignment',
  Classwork_ListClassworkMaterial = 'Classwork_ListClassworkMaterial',
  Academic_Course_Access = 'Academic_Course_Access',
  Academic_CreateCourse = 'Academic_CreateCourse',
  Academic_UpdateCourse = 'Academic_UpdateCourse',
  Academic_ListCourses = 'Academic_ListCourses',
  Academic_AddStudentsToCourse = 'Academic_AddStudentsToCourse',
  Academic_AddLecturersToCourse = 'Academic_AddLecturersToCourse',
  Academic_RemoveStudentsFromCourse = 'Academic_RemoveStudentsFromCourse',
  Academic_RemoveLecturersFromCourse = 'Academic_RemoveLecturersFromCourse',
  Teaching_Course_Access = 'Teaching_Course_Access',
  Studying_Course_Access = 'Studying_Course_Access',
  Classwork_CreateClassworkAssignment = 'Classwork_CreateClassworkAssignment',
  Classwork_UpdateClassworkAssignment = 'Classwork_UpdateClassworkAssignment',
  Classwork_SetClassworkAssignmentPublication = 'Classwork_SetClassworkAssignmentPublication',
  Classwork_AddAttachmentsToClassworkAssignment = 'Classwork_AddAttachmentsToClassworkAssignment',
  Classwork_RemoveAttachmentsFromClassworkAssignment = 'Classwork_RemoveAttachmentsFromClassworkAssignment',
  Classwork_UpdateClassworkMaterial = 'Classwork_UpdateClassworkMaterial',
  Classwork_CreateClassworkMaterial = 'Classwork_CreateClassworkMaterial',
  Classwork_SetClassworkMaterialPublication = 'Classwork_SetClassworkMaterialPublication',
  Classwork_AddAttachmentsToClassworkMaterial = 'Classwork_AddAttachmentsToClassworkMaterial',
  Classwork_RemoveAttachmentsFromClassworkMaterial = 'Classwork_RemoveAttachmentsFromClassworkMaterial',
  NoPermission = 'NoPermission',
}

export enum Publication {
  Draft = 'Draft',
  Published = 'Published',
}

export type Query = {
  account?: Maybe<Account>
  accountByUserName?: Maybe<Account>
  orgAccounts: OrgAccountsPayload
  authenticate: AuthenticatePayload
  canAccountManageRoles: Scalars['Boolean']
  academicSubjects: AcademicSubjectsPayload
  academicSubject: AcademicSubject
  findCourseById: Course
  courses: CoursesPayload
  orgOffices: Array<OrgOffice>
  orgOffice: OrgOffice
  file?: Maybe<File>
  classworkMaterials: ClassworkMaterialPayload
  classworkMaterial: ClassworkMaterial
  classworkAssignment: ClassworkAssignment
  classworkAssignments: ClassworkAssignmentPayload
}

export type QueryAccountArgs = {
  id: Scalars['ID']
}

export type QueryAccountByUserNameArgs = {
  username: Scalars['String']
}

export type QueryOrgAccountsArgs = {
  filter: AccountsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryCanAccountManageRolesArgs = {
  roles: Array<Scalars['String']>
}

export type QueryAcademicSubjectsArgs = {
  filter: AcademicSubjectsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryAcademicSubjectArgs = {
  id: Scalars['ID']
}

export type QueryFindCourseByIdArgs = {
  id: Scalars['ID']
}

export type QueryCoursesArgs = {
  filter: CoursesFilterInput
  pageOptions: PageOptionsInput
}

export type QueryOrgOfficeArgs = {
  id: Scalars['ID']
}

export type QueryFileArgs = {
  id: Scalars['ID']
}

export type QueryClassworkMaterialsArgs = {
  searchText?: Maybe<Scalars['String']>
  courseId: Scalars['String']
  pageOptions: PageOptionsInput
}

export type QueryClassworkMaterialArgs = {
  Id: Scalars['ID']
}

export type QueryClassworkAssignmentArgs = {
  id: Scalars['ID']
}

export type QueryClassworkAssignmentsArgs = {
  searchText?: Maybe<Scalars['String']>
  courseId: Scalars['ID']
  pageOptions: PageOptionsInput
}

export type SignInPayload = {
  token: Scalars['String']
  account: Account
  org: Org
  permissions: Array<Permission>
}

export type UpdateAcademicSubjectInput = {
  name?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
}

export type UpdateAccountInput = {
  username?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  displayName?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']>>
  password?: Maybe<Scalars['String']>
}

export type UpdateClassworkAssignmentInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  dueDate?: Maybe<Scalars['String']>
}

export type UpdateClassworkMaterialInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
}

export type UpdateCourseInput = {
  name?: Maybe<Scalars['String']>
  tuitionFee?: Maybe<Scalars['Float']>
  startDate?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
}

export type UpdateOrgOfficeInput = {
  name?: Maybe<Scalars['String']>
  address?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type AuthAccountFragment = Pick<
  Account,
  'id' | 'orgId' | 'status' | 'email' | 'username' | 'displayName'
>

export type AuthOrgFragment = Pick<Org, 'id' | 'name' | 'namespace'>

export type SignInMutationVariables = Exact<{
  orgNamespace: Scalars['String']
  identity: Scalars['String']
  password: Scalars['String']
}>

export type SignInMutation = {
  signIn: Pick<SignInPayload, 'token'> & {
    account: AuthAccountFragment
    org: AuthOrgFragment
  }
}

export type AuthenticateQueryVariables = Exact<{ [key: string]: never }>

export type AuthenticateQuery = {
  authenticate: Pick<AuthenticatePayload, 'permissions'> & {
    account: AuthAccountFragment
    org: AuthOrgFragment
  }
}

export type CanAccountManageRolesQueryVariables = Exact<{
  roles: Array<Scalars['String']> | Scalars['String']
}>

export type CanAccountManageRolesQuery = Pick<Query, 'canAccountManageRoles'>

export type AccountAvatarQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountAvatarQuery = {
  account?: Maybe<
    Pick<Account, 'id' | 'email' | 'username' | 'displayName' | 'availability'>
  >
}

export type AccountDisplayNameQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountDisplayNameQuery = {
  account?: Maybe<Pick<Account, 'id' | 'username' | 'displayName'>>
}

export type FileQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FileQuery = {
  file?: Maybe<
    Pick<File, 'id' | 'orgId' | 'mimeType' | 'name' | 'size' | 'signedUrl'>
  >
}

export type ImageFileQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ImageFileQuery = {
  file?: Maybe<
    Pick<File, 'id' | 'orgId' | 'mimeType' | 'name' | 'size' | 'signedUrl'>
  >
}

export type AcademicSubjectDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AcademicSubjectDetailQuery = {
  academicSubject: Pick<
    AcademicSubject,
    'id' | 'code' | 'name' | 'description' | 'imageFileId' | 'publication'
  >
}

export type UpdateFileMutationVariables = Exact<{
  id: Scalars['ID']
  newFile: Scalars['Upload']
}>

export type UpdateFileMutation = { updateFile: Pick<File, 'id' | 'name'> }

export type AcademicSubjectListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
}>

export type AcademicSubjectListQuery = {
  academicSubjects: Pick<AcademicSubjectsPayload, 'count'> & {
    academicSubjects: Array<
      Pick<
        AcademicSubject,
        | 'id'
        | 'orgId'
        | 'name'
        | 'code'
        | 'description'
        | 'publication'
        | 'imageFileId'
      >
    >
  }
}

export type AccountProfileQueryVariables = Exact<{
  username: Scalars['String']
}>

export type AccountProfileQuery = {
  accountByUserName?: Maybe<
    Pick<
      Account,
      | 'id'
      | 'email'
      | 'username'
      | 'displayName'
      | 'roles'
      | 'status'
      | 'availability'
    >
  >
}

export type UpdateAccountStatusMutationVariables = Exact<{
  id: Scalars['ID']
  status: Scalars['String']
}>

export type UpdateAccountStatusMutation = {
  updateAccountStatus: Pick<
    Account,
    'id' | 'email' | 'username' | 'displayName' | 'roles' | 'status'
  >
}

export type UpdateAccountMutationVariables = Exact<{
  accountId: Scalars['ID']
  update: UpdateAccountInput
}>

export type UpdateAccountMutation = {
  updateAccount: Pick<Account, 'id' | 'displayName' | 'email' | 'roles'>
}

export type UpdateSelfAccountMutationVariables = Exact<{
  accountId: Scalars['ID']
  update: UpdateAccountInput
}>

export type UpdateSelfAccountMutation = {
  updateAccount: Pick<Account, 'id' | 'displayName' | 'email' | 'roles'>
}

export type ClassworkAssignmentDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ClassworkAssignmentDetailQuery = {
  classworkAssignment: Pick<
    ClassworkAssignment,
    | 'id'
    | 'orgId'
    | 'courseId'
    | 'title'
    | 'type'
    | 'description'
    | 'publicationState'
    | 'attachments'
    | 'dueDate'
  >
}

export type CoursesQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
}>

export type CoursesQuery = {
  courses: Pick<CoursesPayload, 'count'> & {
    courses: Array<
      Pick<
        Course,
        | 'id'
        | 'createdAt'
        | 'name'
        | 'code'
        | 'orgId'
        | 'academicSubjectId'
        | 'startDate'
        | 'tuitionFee'
        | 'lecturerIds'
        | 'orgOfficeId'
      >
    >
  }
}

export type CreateClassworkAssignmentMutationVariables = Exact<{
  courseId: Scalars['ID']
  input: CreateClassworkAssignmentInput
}>

export type CreateClassworkAssignmentMutation = {
  createClassworkAssignment: Pick<
    ClassworkAssignment,
    'id' | 'title' | 'description'
  >
}

export type CreateCourseMutationVariables = Exact<{
  input: CreateCourseInput
}>

export type CreateCourseMutation = {
  createCourse: Pick<Course, 'id' | 'code' | 'name'>
}

export type CreateAcademicSubjectMutationVariables = Exact<{
  input: CreateAcademicSubjectInput
}>

export type CreateAcademicSubjectMutation = {
  createAcademicSubject: Pick<AcademicSubject, 'id' | 'code' | 'name'>
}

export type FindAcademicSubjectByIdQueryVariables = Exact<{
  Id: Scalars['ID']
}>

export type FindAcademicSubjectByIdQuery = {
  academicSubject: Pick<
    AcademicSubject,
    'id' | 'code' | 'name' | 'description' | 'imageFileId' | 'publication'
  >
}

export type UpdateAcademicSubjectMutationVariables = Exact<{
  Id: Scalars['ID']
  updateInput: UpdateAcademicSubjectInput
}>

export type UpdateAcademicSubjectMutation = {
  updateAcademicSubject: Pick<AcademicSubject, 'id' | 'code' | 'name'>
}

export type UpdateAcademicSubjectPublicationMutationVariables = Exact<{
  Id: Scalars['ID']
  publication: Scalars['String']
}>

export type UpdateAcademicSubjectPublicationMutation = {
  updateAcademicSubjectPublication: Pick<
    AcademicSubject,
    'id' | 'code' | 'publication'
  >
}

export type CreateAccountMutationVariables = Exact<{
  accountInput: CreateAccountInput
}>

export type CreateAccountMutation = {
  createOrgAccount: Pick<Account, 'id' | 'displayName' | 'username' | 'email'>
}

export type OrgAccountListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']> | Scalars['String']>
}>

export type OrgAccountListQuery = {
  orgAccounts: Pick<OrgAccountsPayload, 'count'> & {
    accounts: Array<
      Pick<
        Account,
        | 'id'
        | 'email'
        | 'displayName'
        | 'username'
        | 'roles'
        | 'availability'
        | 'status'
      >
    >
  }
}

export type ListOrgOfficesQueryVariables = Exact<{ [key: string]: never }>

export type ListOrgOfficesQuery = {
  orgOffices: Array<Pick<OrgOffice, 'id' | 'name' | 'address' | 'phone'>>
}

export type CreateOrgOfficeMutationVariables = Exact<{
  input: CreateOrgOfficeInput
}>

export type CreateOrgOfficeMutation = {
  createOrgOffice: Pick<OrgOffice, 'id' | 'name'>
}

export type UpdateOrgOfficeMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateOrgOfficeInput
}>

export type UpdateOrgOfficeMutation = {
  updateOrgOffice: Pick<OrgOffice, 'id' | 'name'>
}

export type OrgOfficeQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type OrgOfficeQuery = {
  orgOffice: Pick<OrgOffice, 'id' | 'name' | 'address' | 'phone'>
}

export type StudyingCourseListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  studentIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>
}>

export type StudyingCourseListQuery = {
  courses: Pick<CoursesPayload, 'count'> & {
    courses: Array<
      Pick<
        Course,
        | 'id'
        | 'orgId'
        | 'name'
        | 'code'
        | 'tuitionFee'
        | 'startDate'
        | 'lecturerIds'
        | 'studentIds'
        | 'publicationState'
      >
    >
  }
}

export type ClassworkAssignmentListQueryVariables = Exact<{
  skip: Scalars['Int']
  limit: Scalars['Int']
  courseId: Scalars['ID']
}>

export type ClassworkAssignmentListQuery = {
  classworkAssignments: Pick<ClassworkAssignmentPayload, 'count'> & {
    classworkAssignments: Array<
      Pick<
        ClassworkAssignment,
        | 'id'
        | 'orgId'
        | 'courseId'
        | 'title'
        | 'type'
        | 'description'
        | 'publicationState'
        | 'attachments'
        | 'dueDate'
      >
    >
  }
}

export type ClassworkMaterialsListQueryVariables = Exact<{
  courseId: Scalars['String']
  skip: Scalars['Int']
  limit: Scalars['Int']
}>

export type ClassworkMaterialsListQuery = {
  classworkMaterials: Pick<ClassworkMaterialPayload, 'count'> & {
    classworkMaterials: Array<
      Pick<
        ClassworkMaterial,
        | 'id'
        | 'orgId'
        | 'createdAt'
        | 'updatedAt'
        | 'publicationState'
        | 'title'
        | 'description'
        | 'attachments'
      >
    >
  }
}

export type CourseDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type CourseDetailQuery = {
  findCourseById: Pick<
    Course,
    | 'id'
    | 'orgId'
    | 'name'
    | 'code'
    | 'tuitionFee'
    | 'startDate'
    | 'lecturerIds'
    | 'studentIds'
    | 'publicationState'
  >
}

export type TeachingCourseListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  lecturerIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>
}>

export type TeachingCourseListQuery = {
  courses: Pick<CoursesPayload, 'count'> & {
    courses: Array<
      Pick<
        Course,
        | 'id'
        | 'orgId'
        | 'name'
        | 'code'
        | 'tuitionFee'
        | 'startDate'
        | 'lecturerIds'
        | 'publicationState'
      >
    >
  }
}

export type UpdateClassworkAssignmentMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateClassworkAssignmentInput
}>

export type UpdateClassworkAssignmentMutation = {
  updateClassworkAssignment: Pick<
    ClassworkAssignment,
    'id' | 'courseId' | 'title' | 'description' | 'dueDate'
  >
}

export type AddLecturesToCourseMutationVariables = Exact<{
  lecturerIds: Array<Scalars['ID']> | Scalars['ID']
  courseId: Scalars['ID']
}>

export type AddLecturesToCourseMutation = {
  addLecturesToCourse: Pick<Course, 'id' | 'name' | 'lecturerIds'>
}

export type AddStudentToCourseMutationVariables = Exact<{
  studentIds: Array<Scalars['ID']> | Scalars['ID']
  courseId: Scalars['ID']
}>

export type AddStudentToCourseMutation = {
  addStudentsToCourse: Pick<Course, 'id' | 'name' | 'studentIds'>
}

export type FindCourseByIdQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FindCourseByIdQuery = {
  findCourseById: Pick<
    Course,
    'id' | 'code' | 'name' | 'lecturerIds' | 'studentIds'
  >
}

export type RemoveLecturersFromCourseMutationVariables = Exact<{
  lecturerIds: Array<Scalars['ID']> | Scalars['ID']
  id: Scalars['ID']
}>

export type RemoveLecturersFromCourseMutation = {
  removeLecturersFromCourse: Pick<Course, 'id' | 'code' | 'name'>
}

export type RemoveStudentsFromCourseMutationVariables = Exact<{
  studentIds: Array<Scalars['ID']> | Scalars['ID']
  id: Scalars['ID']
}>

export type RemoveStudentsFromCourseMutation = {
  removeStudentsFromCourse: Pick<Course, 'id' | 'code' | 'name'>
}

export const AuthAccountFragmentDoc: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
  ],
}
export const AuthOrgFragmentDoc: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export const SignInDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SignIn' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgNamespace' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identity' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'password' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'signIn' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'password' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'password' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'identity' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'identity' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'orgNamespace' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orgNamespace' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'token' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export type SignInMutationFn = Apollo.MutationFunction<
  SignInMutation,
  SignInMutationVariables
>
export type SignInProps<TChildProps = {}, TDataName extends string = 'mutate'> =
  {
    [key in TDataName]: Apollo.MutationFunction<
      SignInMutation,
      SignInMutationVariables
    >
  } &
    TChildProps
export function withSignIn<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >(SignInDocument, {
    alias: 'signIn',
    ...operationOptions,
  })
}

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      orgNamespace: // value for 'orgNamespace'
 *      identity: // value for 'identity'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SignInMutation,
    SignInMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SignInMutation, SignInMutationVariables>(
    SignInDocument,
    options,
  )
}
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>
export type SignInMutationResult = Apollo.MutationResult<SignInMutation>
export type SignInMutationOptions = Apollo.BaseMutationOptions<
  SignInMutation,
  SignInMutationVariables
>
export const AuthenticateDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Authenticate' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'authenticate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'permissions' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export type AuthenticateProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >
} &
  TChildProps
export function withAuthenticate<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >(AuthenticateDocument, {
    alias: 'authenticate',
    ...operationOptions,
  })
}

/**
 * __useAuthenticateQuery__
 *
 * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthenticateQuery({
 *   variables: {
 *   },
 * });
 */
export function useAuthenticateQuery(
  baseOptions?: Apollo.QueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export function useAuthenticateLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export type AuthenticateQueryHookResult = ReturnType<
  typeof useAuthenticateQuery
>
export type AuthenticateLazyQueryHookResult = ReturnType<
  typeof useAuthenticateLazyQuery
>
export type AuthenticateQueryResult = Apollo.QueryResult<
  AuthenticateQuery,
  AuthenticateQueryVariables
>
export const CanAccountManageRolesDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'CanAccountManageRoles' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roles' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'canAccountManageRoles' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'roles' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'roles' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
}
export type CanAccountManageRolesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >
} &
  TChildProps
export function withCanAccountManageRoles<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables,
    CanAccountManageRolesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables,
    CanAccountManageRolesProps<TChildProps, TDataName>
  >(CanAccountManageRolesDocument, {
    alias: 'canAccountManageRoles',
    ...operationOptions,
  })
}

/**
 * __useCanAccountManageRolesQuery__
 *
 * To run a query within a React component, call `useCanAccountManageRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCanAccountManageRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCanAccountManageRolesQuery({
 *   variables: {
 *      roles: // value for 'roles'
 *   },
 * });
 */
export function useCanAccountManageRolesQuery(
  baseOptions: Apollo.QueryHookOptions<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >(CanAccountManageRolesDocument, options)
}
export function useCanAccountManageRolesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >(CanAccountManageRolesDocument, options)
}
export type CanAccountManageRolesQueryHookResult = ReturnType<
  typeof useCanAccountManageRolesQuery
>
export type CanAccountManageRolesLazyQueryHookResult = ReturnType<
  typeof useCanAccountManageRolesLazyQuery
>
export type CanAccountManageRolesQueryResult = Apollo.QueryResult<
  CanAccountManageRolesQuery,
  CanAccountManageRolesQueryVariables
>
export const AccountAvatarDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountAvatar' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountAvatarProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >
} &
  TChildProps
export function withAccountAvatar<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >(AccountAvatarDocument, {
    alias: 'accountAvatar',
    ...operationOptions,
  })
}

/**
 * __useAccountAvatarQuery__
 *
 * To run a query within a React component, call `useAccountAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountAvatarQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountAvatarQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export function useAccountAvatarLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export type AccountAvatarQueryHookResult = ReturnType<
  typeof useAccountAvatarQuery
>
export type AccountAvatarLazyQueryHookResult = ReturnType<
  typeof useAccountAvatarLazyQuery
>
export type AccountAvatarQueryResult = Apollo.QueryResult<
  AccountAvatarQuery,
  AccountAvatarQueryVariables
>
export const AccountDisplayNameDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountDisplayName' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountDisplayNameProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >
} &
  TChildProps
export function withAccountDisplayName<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >(AccountDisplayNameDocument, {
    alias: 'accountDisplayName',
    ...operationOptions,
  })
}

/**
 * __useAccountDisplayNameQuery__
 *
 * To run a query within a React component, call `useAccountDisplayNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountDisplayNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountDisplayNameQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountDisplayNameQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export function useAccountDisplayNameLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export type AccountDisplayNameQueryHookResult = ReturnType<
  typeof useAccountDisplayNameQuery
>
export type AccountDisplayNameLazyQueryHookResult = ReturnType<
  typeof useAccountDisplayNameLazyQuery
>
export type AccountDisplayNameQueryResult = Apollo.QueryResult<
  AccountDisplayNameQuery,
  AccountDisplayNameQueryVariables
>
export const FileDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'File' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'file' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'mimeType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'size' } },
                { kind: 'Field', name: { kind: 'Name', value: 'signedUrl' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type FileProps<TChildProps = {}, TDataName extends string = 'data'> = {
  [key in TDataName]: ApolloReactHoc.DataValue<FileQuery, FileQueryVariables>
} &
  TChildProps
export function withFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FileQuery,
    FileQueryVariables,
    FileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FileQuery,
    FileQueryVariables,
    FileProps<TChildProps, TDataName>
  >(FileDocument, {
    alias: 'file',
    ...operationOptions,
  })
}

/**
 * __useFileQuery__
 *
 * To run a query within a React component, call `useFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFileQuery(
  baseOptions: Apollo.QueryHookOptions<FileQuery, FileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FileQuery, FileQueryVariables>(FileDocument, options)
}
export function useFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<FileQuery, FileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FileQuery, FileQueryVariables>(
    FileDocument,
    options,
  )
}
export type FileQueryHookResult = ReturnType<typeof useFileQuery>
export type FileLazyQueryHookResult = ReturnType<typeof useFileLazyQuery>
export type FileQueryResult = Apollo.QueryResult<FileQuery, FileQueryVariables>
export const ImageFileDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ImageFile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'file' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'mimeType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'size' } },
                { kind: 'Field', name: { kind: 'Name', value: 'signedUrl' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ImageFileProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ImageFileQuery,
    ImageFileQueryVariables
  >
} &
  TChildProps
export function withImageFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ImageFileQuery,
    ImageFileQueryVariables,
    ImageFileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ImageFileQuery,
    ImageFileQueryVariables,
    ImageFileProps<TChildProps, TDataName>
  >(ImageFileDocument, {
    alias: 'imageFile',
    ...operationOptions,
  })
}

/**
 * __useImageFileQuery__
 *
 * To run a query within a React component, call `useImageFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useImageFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImageFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImageFileQuery(
  baseOptions: Apollo.QueryHookOptions<ImageFileQuery, ImageFileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ImageFileQuery, ImageFileQueryVariables>(
    ImageFileDocument,
    options,
  )
}
export function useImageFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ImageFileQuery,
    ImageFileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ImageFileQuery, ImageFileQueryVariables>(
    ImageFileDocument,
    options,
  )
}
export type ImageFileQueryHookResult = ReturnType<typeof useImageFileQuery>
export type ImageFileLazyQueryHookResult = ReturnType<
  typeof useImageFileLazyQuery
>
export type ImageFileQueryResult = Apollo.QueryResult<
  ImageFileQuery,
  ImageFileQueryVariables
>
export const AcademicSubjectDetailDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AcademicSubjectDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'imageFileId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AcademicSubjectDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >
} &
  TChildProps
export function withAcademicSubjectDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables,
    AcademicSubjectDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables,
    AcademicSubjectDetailProps<TChildProps, TDataName>
  >(AcademicSubjectDetailDocument, {
    alias: 'academicSubjectDetail',
    ...operationOptions,
  })
}

/**
 * __useAcademicSubjectDetailQuery__
 *
 * To run a query within a React component, call `useAcademicSubjectDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useAcademicSubjectDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAcademicSubjectDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAcademicSubjectDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >(AcademicSubjectDetailDocument, options)
}
export function useAcademicSubjectDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >(AcademicSubjectDetailDocument, options)
}
export type AcademicSubjectDetailQueryHookResult = ReturnType<
  typeof useAcademicSubjectDetailQuery
>
export type AcademicSubjectDetailLazyQueryHookResult = ReturnType<
  typeof useAcademicSubjectDetailLazyQuery
>
export type AcademicSubjectDetailQueryResult = Apollo.QueryResult<
  AcademicSubjectDetailQuery,
  AcademicSubjectDetailQueryVariables
>
export const UpdateFileDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateFile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'newFile' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'Upload' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateFile' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'newFile' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'newFile' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateFileMutationFn = Apollo.MutationFunction<
  UpdateFileMutation,
  UpdateFileMutationVariables
>
export type UpdateFileProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateFileMutation,
    UpdateFileMutationVariables
  >
} &
  TChildProps
export function withUpdateFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateFileMutation,
    UpdateFileMutationVariables,
    UpdateFileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateFileMutation,
    UpdateFileMutationVariables,
    UpdateFileProps<TChildProps, TDataName>
  >(UpdateFileDocument, {
    alias: 'updateFile',
    ...operationOptions,
  })
}

/**
 * __useUpdateFileMutation__
 *
 * To run a mutation, you first call `useUpdateFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFileMutation, { data, loading, error }] = useUpdateFileMutation({
 *   variables: {
 *      id: // value for 'id'
 *      newFile: // value for 'newFile'
 *   },
 * });
 */
export function useUpdateFileMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFileMutation,
    UpdateFileMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateFileMutation, UpdateFileMutationVariables>(
    UpdateFileDocument,
    options,
  )
}
export type UpdateFileMutationHookResult = ReturnType<
  typeof useUpdateFileMutation
>
export type UpdateFileMutationResult = Apollo.MutationResult<UpdateFileMutation>
export type UpdateFileMutationOptions = Apollo.BaseMutationOptions<
  UpdateFileMutation,
  UpdateFileMutationVariables
>
export const AcademicSubjectListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AcademicSubjectList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubjects' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'academicSubjects' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publication' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'imageFileId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AcademicSubjectListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >
} &
  TChildProps
export function withAcademicSubjectList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >(AcademicSubjectListDocument, {
    alias: 'academicSubjectList',
    ...operationOptions,
  })
}

/**
 * __useAcademicSubjectListQuery__
 *
 * To run a query within a React component, call `useAcademicSubjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useAcademicSubjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAcademicSubjectListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *   },
 * });
 */
export function useAcademicSubjectListQuery(
  baseOptions: Apollo.QueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export function useAcademicSubjectListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export type AcademicSubjectListQueryHookResult = ReturnType<
  typeof useAcademicSubjectListQuery
>
export type AcademicSubjectListLazyQueryHookResult = ReturnType<
  typeof useAcademicSubjectListLazyQuery
>
export type AcademicSubjectListQueryResult = Apollo.QueryResult<
  AcademicSubjectListQuery,
  AcademicSubjectListQueryVariables
>
export const AccountProfileDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountProfile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'username' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accountByUserName' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'username' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'username' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountProfileProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >
} &
  TChildProps
export function withAccountProfile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >(AccountProfileDocument, {
    alias: 'accountProfile',
    ...operationOptions,
  })
}

/**
 * __useAccountProfileQuery__
 *
 * To run a query within a React component, call `useAccountProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountProfileQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useAccountProfileQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export function useAccountProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export type AccountProfileQueryHookResult = ReturnType<
  typeof useAccountProfileQuery
>
export type AccountProfileLazyQueryHookResult = ReturnType<
  typeof useAccountProfileLazyQuery
>
export type AccountProfileQueryResult = Apollo.QueryResult<
  AccountProfileQuery,
  AccountProfileQueryVariables
>
export const UpdateAccountStatusDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAccountStatus' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'status' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccountStatus' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'status' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'status' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAccountStatusMutationFn = Apollo.MutationFunction<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export type UpdateAccountStatusProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >
} &
  TChildProps
export function withUpdateAccountStatus<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >(UpdateAccountStatusDocument, {
    alias: 'updateAccountStatus',
    ...operationOptions,
  })
}

/**
 * __useUpdateAccountStatusMutation__
 *
 * To run a mutation, you first call `useUpdateAccountStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountStatusMutation, { data, loading, error }] = useUpdateAccountStatusMutation({
 *   variables: {
 *      id: // value for 'id'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useUpdateAccountStatusMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >(UpdateAccountStatusDocument, options)
}
export type UpdateAccountStatusMutationHookResult = ReturnType<
  typeof useUpdateAccountStatusMutation
>
export type UpdateAccountStatusMutationResult =
  Apollo.MutationResult<UpdateAccountStatusMutation>
export type UpdateAccountStatusMutationOptions = Apollo.BaseMutationOptions<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export const UpdateAccountDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'update' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'update' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAccountMutationFn = Apollo.MutationFunction<
  UpdateAccountMutation,
  UpdateAccountMutationVariables
>
export type UpdateAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >
} &
  TChildProps
export function withUpdateAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAccountMutation,
    UpdateAccountMutationVariables,
    UpdateAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAccountMutation,
    UpdateAccountMutationVariables,
    UpdateAccountProps<TChildProps, TDataName>
  >(UpdateAccountDocument, {
    alias: 'updateAccount',
    ...operationOptions,
  })
}

/**
 * __useUpdateAccountMutation__
 *
 * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({
 *   variables: {
 *      accountId: // value for 'accountId'
 *      update: // value for 'update'
 *   },
 * });
 */
export function useUpdateAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >(UpdateAccountDocument, options)
}
export type UpdateAccountMutationHookResult = ReturnType<
  typeof useUpdateAccountMutation
>
export type UpdateAccountMutationResult =
  Apollo.MutationResult<UpdateAccountMutation>
export type UpdateAccountMutationOptions = Apollo.BaseMutationOptions<
  UpdateAccountMutation,
  UpdateAccountMutationVariables
>
export const UpdateSelfAccountDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateSelfAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'update' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'update' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateSelfAccountMutationFn = Apollo.MutationFunction<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export type UpdateSelfAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >
} &
  TChildProps
export function withUpdateSelfAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >(UpdateSelfAccountDocument, {
    alias: 'updateSelfAccount',
    ...operationOptions,
  })
}

/**
 * __useUpdateSelfAccountMutation__
 *
 * To run a mutation, you first call `useUpdateSelfAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSelfAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSelfAccountMutation, { data, loading, error }] = useUpdateSelfAccountMutation({
 *   variables: {
 *      accountId: // value for 'accountId'
 *      update: // value for 'update'
 *   },
 * });
 */
export function useUpdateSelfAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >(UpdateSelfAccountDocument, options)
}
export type UpdateSelfAccountMutationHookResult = ReturnType<
  typeof useUpdateSelfAccountMutation
>
export type UpdateSelfAccountMutationResult =
  Apollo.MutationResult<UpdateSelfAccountMutation>
export type UpdateSelfAccountMutationOptions = Apollo.BaseMutationOptions<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export const ClassworkAssignmentDetailDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkAssignmentDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ClassworkAssignmentDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >
} &
  TChildProps
export function withClassworkAssignmentDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables,
    ClassworkAssignmentDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables,
    ClassworkAssignmentDetailProps<TChildProps, TDataName>
  >(ClassworkAssignmentDetailDocument, {
    alias: 'classworkAssignmentDetail',
    ...operationOptions,
  })
}

/**
 * __useClassworkAssignmentDetailQuery__
 *
 * To run a query within a React component, call `useClassworkAssignmentDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkAssignmentDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkAssignmentDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useClassworkAssignmentDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >(ClassworkAssignmentDetailDocument, options)
}
export function useClassworkAssignmentDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >(ClassworkAssignmentDetailDocument, options)
}
export type ClassworkAssignmentDetailQueryHookResult = ReturnType<
  typeof useClassworkAssignmentDetailQuery
>
export type ClassworkAssignmentDetailLazyQueryHookResult = ReturnType<
  typeof useClassworkAssignmentDetailLazyQuery
>
export type ClassworkAssignmentDetailQueryResult = Apollo.QueryResult<
  ClassworkAssignmentDetailQuery,
  ClassworkAssignmentDetailQueryVariables
>
export const CoursesDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Courses' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'academicSubjectId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'orgOfficeId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CoursesProps<TChildProps = {}, TDataName extends string = 'data'> =
  {
    [key in TDataName]: ApolloReactHoc.DataValue<
      CoursesQuery,
      CoursesQueryVariables
    >
  } &
    TChildProps
export function withCourses<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CoursesQuery,
    CoursesQueryVariables,
    CoursesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CoursesQuery,
    CoursesQueryVariables,
    CoursesProps<TChildProps, TDataName>
  >(CoursesDocument, {
    alias: 'courses',
    ...operationOptions,
  })
}

/**
 * __useCoursesQuery__
 *
 * To run a query within a React component, call `useCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCoursesQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useCoursesQuery(
  baseOptions: Apollo.QueryHookOptions<CoursesQuery, CoursesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CoursesQuery, CoursesQueryVariables>(
    CoursesDocument,
    options,
  )
}
export function useCoursesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CoursesQuery,
    CoursesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CoursesQuery, CoursesQueryVariables>(
    CoursesDocument,
    options,
  )
}
export type CoursesQueryHookResult = ReturnType<typeof useCoursesQuery>
export type CoursesLazyQueryHookResult = ReturnType<typeof useCoursesLazyQuery>
export type CoursesQueryResult = Apollo.QueryResult<
  CoursesQuery,
  CoursesQueryVariables
>
export const CreateClassworkAssignmentDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateClassworkAssignmentInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createClassworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateClassworkAssignmentMutationFn = Apollo.MutationFunction<
  CreateClassworkAssignmentMutation,
  CreateClassworkAssignmentMutationVariables
>
export type CreateClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withCreateClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables,
    CreateClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables,
    CreateClassworkAssignmentProps<TChildProps, TDataName>
  >(CreateClassworkAssignmentDocument, {
    alias: 'createClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useCreateClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useCreateClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClassworkAssignmentMutation, { data, loading, error }] = useCreateClassworkAssignmentMutation({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >(CreateClassworkAssignmentDocument, options)
}
export type CreateClassworkAssignmentMutationHookResult = ReturnType<
  typeof useCreateClassworkAssignmentMutation
>
export type CreateClassworkAssignmentMutationResult =
  Apollo.MutationResult<CreateClassworkAssignmentMutation>
export type CreateClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >
export const CreateCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateCourseInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateCourseMutationFn = Apollo.MutationFunction<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export type CreateCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >
} &
  TChildProps
export function withCreateCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >(CreateCourseDocument, {
    alias: 'createCourse',
    ...operationOptions,
  })
}

/**
 * __useCreateCourseMutation__
 *
 * To run a mutation, you first call `useCreateCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCourseMutation, { data, loading, error }] = useCreateCourseMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >(CreateCourseDocument, options)
}
export type CreateCourseMutationHookResult = ReturnType<
  typeof useCreateCourseMutation
>
export type CreateCourseMutationResult =
  Apollo.MutationResult<CreateCourseMutation>
export type CreateCourseMutationOptions = Apollo.BaseMutationOptions<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export const CreateAcademicSubjectDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateAcademicSubjectMutationFn = Apollo.MutationFunction<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export type CreateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withCreateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >(CreateAcademicSubjectDocument, {
    alias: 'createAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useCreateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useCreateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAcademicSubjectMutation, { data, loading, error }] = useCreateAcademicSubjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >(CreateAcademicSubjectDocument, options)
}
export type CreateAcademicSubjectMutationHookResult = ReturnType<
  typeof useCreateAcademicSubjectMutation
>
export type CreateAcademicSubjectMutationResult =
  Apollo.MutationResult<CreateAcademicSubjectMutation>
export type CreateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export const FindAcademicSubjectByIdDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindAcademicSubjectById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'imageFileId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type FindAcademicSubjectByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >
} &
  TChildProps
export function withFindAcademicSubjectById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >(FindAcademicSubjectByIdDocument, {
    alias: 'findAcademicSubjectById',
    ...operationOptions,
  })
}

/**
 * __useFindAcademicSubjectByIdQuery__
 *
 * To run a query within a React component, call `useFindAcademicSubjectByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindAcademicSubjectByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindAcademicSubjectByIdQuery({
 *   variables: {
 *      Id: // value for 'Id'
 *   },
 * });
 */
export function useFindAcademicSubjectByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export function useFindAcademicSubjectByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export type FindAcademicSubjectByIdQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdQuery
>
export type FindAcademicSubjectByIdLazyQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdLazyQuery
>
export type FindAcademicSubjectByIdQueryResult = Apollo.QueryResult<
  FindAcademicSubjectByIdQuery,
  FindAcademicSubjectByIdQueryVariables
>
export const UpdateAcademicSubjectDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAcademicSubjectMutationFn = Apollo.MutationFunction<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export type UpdateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectDocument, {
    alias: 'updateAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectMutation, { data, loading, error }] = useUpdateAcademicSubjectMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      updateInput: // value for 'updateInput'
 *   },
 * });
 */
export function useUpdateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >(UpdateAcademicSubjectDocument, options)
}
export type UpdateAcademicSubjectMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectMutation
>
export type UpdateAcademicSubjectMutationResult =
  Apollo.MutationResult<UpdateAcademicSubjectMutation>
export type UpdateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export const UpdateAcademicSubjectPublicationDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubjectPublication' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'publication' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubjectPublication' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'publication' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'publication' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAcademicSubjectPublicationMutationFn =
  Apollo.MutationFunction<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
export type UpdateAcademicSubjectPublicationProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubjectPublication<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectPublicationDocument, {
    alias: 'updateAcademicSubjectPublication',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectPublicationMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectPublicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectPublicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectPublicationMutation, { data, loading, error }] = useUpdateAcademicSubjectPublicationMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      publication: // value for 'publication'
 *   },
 * });
 */
export function useUpdateAcademicSubjectPublicationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >(UpdateAcademicSubjectPublicationDocument, options)
}
export type UpdateAcademicSubjectPublicationMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectPublicationMutation
>
export type UpdateAcademicSubjectPublicationMutationResult =
  Apollo.MutationResult<UpdateAcademicSubjectPublicationMutation>
export type UpdateAcademicSubjectPublicationMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
export const CreateAccountDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateAccountMutationFn = Apollo.MutationFunction<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export type CreateAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >
} &
  TChildProps
export function withCreateAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >(CreateAccountDocument, {
    alias: 'createAccount',
    ...operationOptions,
  })
}

/**
 * __useCreateAccountMutation__
 *
 * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({
 *   variables: {
 *      accountInput: // value for 'accountInput'
 *   },
 * });
 */
export function useCreateAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >(CreateAccountDocument, options)
}
export type CreateAccountMutationHookResult = ReturnType<
  typeof useCreateAccountMutation
>
export type CreateAccountMutationResult =
  Apollo.MutationResult<CreateAccountMutation>
export type CreateAccountMutationOptions = Apollo.BaseMutationOptions<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export const OrgAccountListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgAccountList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roles' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgAccounts' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'roles' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'roles' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'accounts' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'displayName' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'username' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'availability' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'status' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type OrgAccountListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >
} &
  TChildProps
export function withOrgAccountList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >(OrgAccountListDocument, {
    alias: 'orgAccountList',
    ...operationOptions,
  })
}

/**
 * __useOrgAccountListQuery__
 *
 * To run a query within a React component, call `useOrgAccountListQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgAccountListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgAccountListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *      roles: // value for 'roles'
 *   },
 * });
 */
export function useOrgAccountListQuery(
  baseOptions: Apollo.QueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export function useOrgAccountListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export type OrgAccountListQueryHookResult = ReturnType<
  typeof useOrgAccountListQuery
>
export type OrgAccountListLazyQueryHookResult = ReturnType<
  typeof useOrgAccountListLazyQuery
>
export type OrgAccountListQueryResult = Apollo.QueryResult<
  OrgAccountListQuery,
  OrgAccountListQueryVariables
>
export const ListOrgOfficesDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListOrgOffices' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffices' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ListOrgOfficesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >
} &
  TChildProps
export function withListOrgOffices<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >(ListOrgOfficesDocument, {
    alias: 'listOrgOffices',
    ...operationOptions,
  })
}

/**
 * __useListOrgOfficesQuery__
 *
 * To run a query within a React component, call `useListOrgOfficesQuery` and pass it any options that fit your needs.
 * When your component renders, `useListOrgOfficesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListOrgOfficesQuery({
 *   variables: {
 *   },
 * });
 */
export function useListOrgOfficesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export function useListOrgOfficesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export type ListOrgOfficesQueryHookResult = ReturnType<
  typeof useListOrgOfficesQuery
>
export type ListOrgOfficesLazyQueryHookResult = ReturnType<
  typeof useListOrgOfficesLazyQuery
>
export type ListOrgOfficesQueryResult = Apollo.QueryResult<
  ListOrgOfficesQuery,
  ListOrgOfficesQueryVariables
>
export const CreateOrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateOrgOfficeMutationFn = Apollo.MutationFunction<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export type CreateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withCreateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >(CreateOrgOfficeDocument, {
    alias: 'createOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useCreateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useCreateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrgOfficeMutation, { data, loading, error }] = useCreateOrgOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >(CreateOrgOfficeDocument, options)
}
export type CreateOrgOfficeMutationHookResult = ReturnType<
  typeof useCreateOrgOfficeMutation
>
export type CreateOrgOfficeMutationResult =
  Apollo.MutationResult<CreateOrgOfficeMutation>
export type CreateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export const UpdateOrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateOrgOfficeMutationFn = Apollo.MutationFunction<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export type UpdateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withUpdateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >(UpdateOrgOfficeDocument, {
    alias: 'updateOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useUpdateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useUpdateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrgOfficeMutation, { data, loading, error }] = useUpdateOrgOfficeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >(UpdateOrgOfficeDocument, options)
}
export type UpdateOrgOfficeMutationHookResult = ReturnType<
  typeof useUpdateOrgOfficeMutation
>
export type UpdateOrgOfficeMutationResult =
  Apollo.MutationResult<UpdateOrgOfficeMutation>
export type UpdateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export const OrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type OrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >
} &
  TChildProps
export function withOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >(OrgOfficeDocument, {
    alias: 'orgOffice',
    ...operationOptions,
  })
}

/**
 * __useOrgOfficeQuery__
 *
 * To run a query within a React component, call `useOrgOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgOfficeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useOrgOfficeQuery(
  baseOptions: Apollo.QueryHookOptions<OrgOfficeQuery, OrgOfficeQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export function useOrgOfficeLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export type OrgOfficeQueryHookResult = ReturnType<typeof useOrgOfficeQuery>
export type OrgOfficeLazyQueryHookResult = ReturnType<
  typeof useOrgOfficeLazyQuery
>
export type OrgOfficeQueryResult = Apollo.QueryResult<
  OrgOfficeQuery,
  OrgOfficeQueryVariables
>
export const StudyingCourseListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'StudyingCourseList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'studentIds' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'studentIds' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'studentIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type StudyingCourseListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >
} &
  TChildProps
export function withStudyingCourseList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables,
    StudyingCourseListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables,
    StudyingCourseListProps<TChildProps, TDataName>
  >(StudyingCourseListDocument, {
    alias: 'studyingCourseList',
    ...operationOptions,
  })
}

/**
 * __useStudyingCourseListQuery__
 *
 * To run a query within a React component, call `useStudyingCourseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useStudyingCourseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStudyingCourseListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      studentIds: // value for 'studentIds'
 *   },
 * });
 */
export function useStudyingCourseListQuery(
  baseOptions: Apollo.QueryHookOptions<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >(StudyingCourseListDocument, options)
}
export function useStudyingCourseListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >(StudyingCourseListDocument, options)
}
export type StudyingCourseListQueryHookResult = ReturnType<
  typeof useStudyingCourseListQuery
>
export type StudyingCourseListLazyQueryHookResult = ReturnType<
  typeof useStudyingCourseListLazyQuery
>
export type StudyingCourseListQueryResult = Apollo.QueryResult<
  StudyingCourseListQuery,
  StudyingCourseListQueryVariables
>
export const ClassworkAssignmentListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkAssignmentList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkAssignments' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'classworkAssignments' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'attachments' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'dueDate' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ClassworkAssignmentListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >
} &
  TChildProps
export function withClassworkAssignmentList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables,
    ClassworkAssignmentListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables,
    ClassworkAssignmentListProps<TChildProps, TDataName>
  >(ClassworkAssignmentListDocument, {
    alias: 'classworkAssignmentList',
    ...operationOptions,
  })
}

/**
 * __useClassworkAssignmentListQuery__
 *
 * To run a query within a React component, call `useClassworkAssignmentListQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkAssignmentListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkAssignmentListQuery({
 *   variables: {
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useClassworkAssignmentListQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >(ClassworkAssignmentListDocument, options)
}
export function useClassworkAssignmentListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >(ClassworkAssignmentListDocument, options)
}
export type ClassworkAssignmentListQueryHookResult = ReturnType<
  typeof useClassworkAssignmentListQuery
>
export type ClassworkAssignmentListLazyQueryHookResult = ReturnType<
  typeof useClassworkAssignmentListLazyQuery
>
export type ClassworkAssignmentListQueryResult = Apollo.QueryResult<
  ClassworkAssignmentListQuery,
  ClassworkAssignmentListQueryVariables
>
export const ClassworkMaterialsListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkMaterialsList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkMaterials' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'classworkMaterials' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'updatedAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'attachments' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ClassworkMaterialsListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >
} &
  TChildProps
export function withClassworkMaterialsList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables,
    ClassworkMaterialsListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables,
    ClassworkMaterialsListProps<TChildProps, TDataName>
  >(ClassworkMaterialsListDocument, {
    alias: 'classworkMaterialsList',
    ...operationOptions,
  })
}

/**
 * __useClassworkMaterialsListQuery__
 *
 * To run a query within a React component, call `useClassworkMaterialsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkMaterialsListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkMaterialsListQuery({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useClassworkMaterialsListQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >(ClassworkMaterialsListDocument, options)
}
export function useClassworkMaterialsListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >(ClassworkMaterialsListDocument, options)
}
export type ClassworkMaterialsListQueryHookResult = ReturnType<
  typeof useClassworkMaterialsListQuery
>
export type ClassworkMaterialsListLazyQueryHookResult = ReturnType<
  typeof useClassworkMaterialsListLazyQuery
>
export type ClassworkMaterialsListQueryResult = Apollo.QueryResult<
  ClassworkMaterialsListQuery,
  ClassworkMaterialsListQueryVariables
>
export const CourseDetailDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'CourseDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findCourseById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'tuitionFee' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CourseDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >
} &
  TChildProps
export function withCourseDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CourseDetailQuery,
    CourseDetailQueryVariables,
    CourseDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CourseDetailQuery,
    CourseDetailQueryVariables,
    CourseDetailProps<TChildProps, TDataName>
  >(CourseDetailDocument, {
    alias: 'courseDetail',
    ...operationOptions,
  })
}

/**
 * __useCourseDetailQuery__
 *
 * To run a query within a React component, call `useCourseDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useCourseDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCourseDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCourseDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CourseDetailQuery, CourseDetailQueryVariables>(
    CourseDetailDocument,
    options,
  )
}
export function useCourseDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CourseDetailQuery, CourseDetailQueryVariables>(
    CourseDetailDocument,
    options,
  )
}
export type CourseDetailQueryHookResult = ReturnType<
  typeof useCourseDetailQuery
>
export type CourseDetailLazyQueryHookResult = ReturnType<
  typeof useCourseDetailLazyQuery
>
export type CourseDetailQueryResult = Apollo.QueryResult<
  CourseDetailQuery,
  CourseDetailQueryVariables
>
export const TeachingCourseListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'TeachingCourseList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'lecturerIds' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type TeachingCourseListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >
} &
  TChildProps
export function withTeachingCourseList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >(TeachingCourseListDocument, {
    alias: 'teachingCourseList',
    ...operationOptions,
  })
}

/**
 * __useTeachingCourseListQuery__
 *
 * To run a query within a React component, call `useTeachingCourseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeachingCourseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeachingCourseListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      lecturerIds: // value for 'lecturerIds'
 *   },
 * });
 */
export function useTeachingCourseListQuery(
  baseOptions: Apollo.QueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export function useTeachingCourseListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export type TeachingCourseListQueryHookResult = ReturnType<
  typeof useTeachingCourseListQuery
>
export type TeachingCourseListLazyQueryHookResult = ReturnType<
  typeof useTeachingCourseListLazyQuery
>
export type TeachingCourseListQueryResult = Apollo.QueryResult<
  TeachingCourseListQuery,
  TeachingCourseListQueryVariables
>
export const UpdateClassworkAssignmentDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateClassworkAssignmentInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateClassworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateClassworkAssignmentMutationFn = Apollo.MutationFunction<
  UpdateClassworkAssignmentMutation,
  UpdateClassworkAssignmentMutationVariables
>
export type UpdateClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withUpdateClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables,
    UpdateClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables,
    UpdateClassworkAssignmentProps<TChildProps, TDataName>
  >(UpdateClassworkAssignmentDocument, {
    alias: 'updateClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useUpdateClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useUpdateClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClassworkAssignmentMutation, { data, loading, error }] = useUpdateClassworkAssignmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >(UpdateClassworkAssignmentDocument, options)
}
export type UpdateClassworkAssignmentMutationHookResult = ReturnType<
  typeof useUpdateClassworkAssignmentMutation
>
export type UpdateClassworkAssignmentMutationResult =
  Apollo.MutationResult<UpdateClassworkAssignmentMutation>
export type UpdateClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >
export const AddLecturesToCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddLecturesToCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addLecturesToCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lecturerIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lecturerIds' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AddLecturesToCourseMutationFn = Apollo.MutationFunction<
  AddLecturesToCourseMutation,
  AddLecturesToCourseMutationVariables
>
export type AddLecturesToCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >
} &
  TChildProps
export function withAddLecturesToCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables,
    AddLecturesToCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables,
    AddLecturesToCourseProps<TChildProps, TDataName>
  >(AddLecturesToCourseDocument, {
    alias: 'addLecturesToCourse',
    ...operationOptions,
  })
}

/**
 * __useAddLecturesToCourseMutation__
 *
 * To run a mutation, you first call `useAddLecturesToCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddLecturesToCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addLecturesToCourseMutation, { data, loading, error }] = useAddLecturesToCourseMutation({
 *   variables: {
 *      lecturerIds: // value for 'lecturerIds'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useAddLecturesToCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >(AddLecturesToCourseDocument, options)
}
export type AddLecturesToCourseMutationHookResult = ReturnType<
  typeof useAddLecturesToCourseMutation
>
export type AddLecturesToCourseMutationResult =
  Apollo.MutationResult<AddLecturesToCourseMutation>
export type AddLecturesToCourseMutationOptions = Apollo.BaseMutationOptions<
  AddLecturesToCourseMutation,
  AddLecturesToCourseMutationVariables
>
export const AddStudentToCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddStudentToCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addStudentsToCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'studentIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'studentIds' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AddStudentToCourseMutationFn = Apollo.MutationFunction<
  AddStudentToCourseMutation,
  AddStudentToCourseMutationVariables
>
export type AddStudentToCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >
} &
  TChildProps
export function withAddStudentToCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables,
    AddStudentToCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables,
    AddStudentToCourseProps<TChildProps, TDataName>
  >(AddStudentToCourseDocument, {
    alias: 'addStudentToCourse',
    ...operationOptions,
  })
}

/**
 * __useAddStudentToCourseMutation__
 *
 * To run a mutation, you first call `useAddStudentToCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddStudentToCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addStudentToCourseMutation, { data, loading, error }] = useAddStudentToCourseMutation({
 *   variables: {
 *      studentIds: // value for 'studentIds'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useAddStudentToCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >(AddStudentToCourseDocument, options)
}
export type AddStudentToCourseMutationHookResult = ReturnType<
  typeof useAddStudentToCourseMutation
>
export type AddStudentToCourseMutationResult =
  Apollo.MutationResult<AddStudentToCourseMutation>
export type AddStudentToCourseMutationOptions = Apollo.BaseMutationOptions<
  AddStudentToCourseMutation,
  AddStudentToCourseMutationVariables
>
export const FindCourseByIdDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindCourseById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findCourseById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type FindCourseByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >
} &
  TChildProps
export function withFindCourseById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables,
    FindCourseByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables,
    FindCourseByIdProps<TChildProps, TDataName>
  >(FindCourseByIdDocument, {
    alias: 'findCourseById',
    ...operationOptions,
  })
}

/**
 * __useFindCourseByIdQuery__
 *
 * To run a query within a React component, call `useFindCourseByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindCourseByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindCourseByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFindCourseByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FindCourseByIdQuery, FindCourseByIdQueryVariables>(
    FindCourseByIdDocument,
    options,
  )
}
export function useFindCourseByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FindCourseByIdQuery, FindCourseByIdQueryVariables>(
    FindCourseByIdDocument,
    options,
  )
}
export type FindCourseByIdQueryHookResult = ReturnType<
  typeof useFindCourseByIdQuery
>
export type FindCourseByIdLazyQueryHookResult = ReturnType<
  typeof useFindCourseByIdLazyQuery
>
export type FindCourseByIdQueryResult = Apollo.QueryResult<
  FindCourseByIdQuery,
  FindCourseByIdQueryVariables
>
export const RemoveLecturersFromCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveLecturersFromCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeLecturersFromCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lecturerIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lecturerIds' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type RemoveLecturersFromCourseMutationFn = Apollo.MutationFunction<
  RemoveLecturersFromCourseMutation,
  RemoveLecturersFromCourseMutationVariables
>
export type RemoveLecturersFromCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >
} &
  TChildProps
export function withRemoveLecturersFromCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables,
    RemoveLecturersFromCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables,
    RemoveLecturersFromCourseProps<TChildProps, TDataName>
  >(RemoveLecturersFromCourseDocument, {
    alias: 'removeLecturersFromCourse',
    ...operationOptions,
  })
}

/**
 * __useRemoveLecturersFromCourseMutation__
 *
 * To run a mutation, you first call `useRemoveLecturersFromCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveLecturersFromCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeLecturersFromCourseMutation, { data, loading, error }] = useRemoveLecturersFromCourseMutation({
 *   variables: {
 *      lecturerIds: // value for 'lecturerIds'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemoveLecturersFromCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >(RemoveLecturersFromCourseDocument, options)
}
export type RemoveLecturersFromCourseMutationHookResult = ReturnType<
  typeof useRemoveLecturersFromCourseMutation
>
export type RemoveLecturersFromCourseMutationResult =
  Apollo.MutationResult<RemoveLecturersFromCourseMutation>
export type RemoveLecturersFromCourseMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >
export const RemoveStudentsFromCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveStudentsFromCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeStudentsFromCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'studentIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'studentIds' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type RemoveStudentsFromCourseMutationFn = Apollo.MutationFunction<
  RemoveStudentsFromCourseMutation,
  RemoveStudentsFromCourseMutationVariables
>
export type RemoveStudentsFromCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >
} &
  TChildProps
export function withRemoveStudentsFromCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables,
    RemoveStudentsFromCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables,
    RemoveStudentsFromCourseProps<TChildProps, TDataName>
  >(RemoveStudentsFromCourseDocument, {
    alias: 'removeStudentsFromCourse',
    ...operationOptions,
  })
}

/**
 * __useRemoveStudentsFromCourseMutation__
 *
 * To run a mutation, you first call `useRemoveStudentsFromCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveStudentsFromCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeStudentsFromCourseMutation, { data, loading, error }] = useRemoveStudentsFromCourseMutation({
 *   variables: {
 *      studentIds: // value for 'studentIds'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemoveStudentsFromCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >(RemoveStudentsFromCourseDocument, options)
}
export type RemoveStudentsFromCourseMutationHookResult = ReturnType<
  typeof useRemoveStudentsFromCourseMutation
>
export type RemoveStudentsFromCourseMutationResult =
  Apollo.MutationResult<RemoveStudentsFromCourseMutation>
export type RemoveStudentsFromCourseMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >
