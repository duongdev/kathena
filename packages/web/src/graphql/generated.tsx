/* THIS IS AN AUTO-GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

import { DocumentNode } from 'graphql'
import * as Apollo from '@apollo/client'
import * as ApolloReactHoc from '@apollo/client/react/hoc'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any
  /** The `Upload` scalar type represents a file upload. */
  Upload: any
}

export type AcademicSubject = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  code: Scalars['String']
  description: Scalars['String']
  publication: Publication
  imageFileId: Scalars['String']
}

export type AcademicSubjectsFilterInput = {
  orgId: Scalars['ID']
  searchText?: Maybe<Scalars['String']>
}

export type AcademicSubjectsPayload = {
  academicSubjects: Array<AcademicSubject>
  count: Scalars['Int']
}

export type Account = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  otp?: Maybe<Scalars['String']>
  otpExpired?: Maybe<Scalars['DateTime']>
  status: AccountStatus
  roles: Array<Scalars['String']>
  availability: AccountAvailability
}

export enum AccountAvailability {
  Online = 'Online',
  Offline = 'Offline',
  Away = 'Away',
}

/** Status of an account. */
export enum AccountStatus {
  Pending = 'Pending',
  Active = 'Active',
  Deactivated = 'Deactivated',
}

export type AccountsFilterInput = {
  orgId: Scalars['ID']
  roles?: Maybe<Array<Scalars['String']>>
  searchText?: Maybe<Scalars['String']>
}

export type AddAttachmentsToClassworkInput = {
  attachments: Array<Scalars['Upload']>
}

export type AuthenticatePayload = {
  account: Account
  org: Org
  permissions: Array<Permission>
}

export type AvgGradeOfClassworkByCourse = {
  classworkTitle: Scalars['String']
  avgGrade: Scalars['Float']
}

export type AvgGradeOfClassworkByCourseOptionInput = {
  limit?: Maybe<Scalars['Float']>
}

export type BaseModel = {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
}

export type ClassworkAssignment = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  courseId: Scalars['ID']
  title: Scalars['String']
  type: Scalars['String']
  description?: Maybe<Scalars['String']>
  attachments: Array<Scalars['String']>
  publicationState: Publication
  dueDate?: Maybe<Scalars['DateTime']>
  maxScores: Scalars['Float']
}

export type ClassworkAssignmentByStudentIdInCourseInput = {
  courseId: Scalars['ID']
  limit: Scalars['Float']
  skip?: Maybe<Scalars['Float']>
  status?: Maybe<ClassworkAssignmentByStudentIdInCourseInputStatus>
}

export enum ClassworkAssignmentByStudentIdInCourseInputStatus {
  All = 'All',
  HaveSubmission = 'HaveSubmission',
  HaveNotSubmission = 'HaveNotSubmission',
}

export type ClassworkAssignmentByStudentIdInCourseResponse = {
  classworkAssignmentId?: Maybe<Scalars['ID']>
  classworkAssignmentsTitle?: Maybe<Scalars['ID']>
  dueDate?: Maybe<Scalars['DateTime']>
  classworkSubmissionGrade?: Maybe<Scalars['Float']>
  classworkSubmissionUpdatedAt?: Maybe<Scalars['DateTime']>
  classworkSubmissionDescription?: Maybe<Scalars['String']>
}

export type ClassworkAssignmentByStudentIdInCourseResponsePayload = {
  list?: Maybe<Array<ClassworkAssignmentByStudentIdInCourseResponse>>
  count: Scalars['Int']
}

export type ClassworkAssignmentPayload = {
  classworkAssignments: Array<ClassworkAssignment>
  count: Scalars['Int']
}

export type ClassworkMaterial = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  courseId: Scalars['ID']
  title: Scalars['String']
  type: Scalars['String']
  description?: Maybe<Scalars['String']>
  attachments: Array<Scalars['String']>
  publicationState: Publication
}

export type ClassworkMaterialPayload = {
  classworkMaterials: Array<ClassworkMaterial>
  count: Scalars['Int']
}

export type ClassworkSubmission = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  classworkId: Scalars['ID']
  courseId: Scalars['ID']
  grade?: Maybe<Scalars['Float']>
  submissionFileIds: Array<Scalars['ID']>
  description: Scalars['String']
}

export type ClassworkSubmissionStatusPayload = {
  classworkSubmissions: Array<ClassworkSubmission>
  count: Scalars['Int']
}

export type CommentsForTheLessonByLecturerInput = {
  comment?: Maybe<Scalars['String']>
}

export type CommentsForTheLessonByLecturerQuery = {
  lessonId: Scalars['ID']
  courseId: Scalars['ID']
}

export type Conversation = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  roomId: Scalars['ID']
  content: Scalars['String']
  type: ConversationType
}

export type ConversationPageOptionInput = {
  limit: Scalars['Int']
}

/** Type of an conversation. */
export enum ConversationType {
  Group = 'Group',
  Single = 'Single',
}

export type ConversationsPayload = {
  conversations: Array<Conversation>
  count: Scalars['Int']
}

export type Course = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  academicSubjectId: Scalars['ID']
  orgOfficeId: Scalars['ID']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['DateTime']
  tuitionFee: Scalars['Float']
  publicationState: Publication
  publishedAt: Scalars['DateTime']
  lecturerIds: Array<Scalars['ID']>
  studentIds: Array<Scalars['ID']>
  createdByAccountId: Scalars['ID']
}

export type CoursesFilterInput = {
  orgId: Scalars['ID']
  searchText?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
  studentIds?: Maybe<Array<Scalars['ID']>>
}

export type CoursesPayload = {
  courses: Array<Course>
  count: Scalars['Int']
}

export type CreateAcademicSubjectInput = {
  name: Scalars['String']
  code: Scalars['String']
  description?: Maybe<Scalars['String']>
  image: Scalars['Upload']
}

export type CreateAccountInput = {
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  roles: Array<Scalars['String']>
}

export type CreateClassworkAssignmentInput = {
  title: Scalars['String']
  description: Scalars['String']
  attachments?: Maybe<Array<Scalars['Upload']>>
  dueDate?: Maybe<Scalars['DateTime']>
  publicationState?: Maybe<Publication>
}

export type CreateClassworkMaterialInput = {
  title: Scalars['String']
  description?: Maybe<Scalars['String']>
  publicationState?: Maybe<Publication>
  attachments?: Maybe<Array<Scalars['Upload']>>
}

export type CreateClassworkSubmissionInput = {
  classworkId: Scalars['ID']
  submissionFiles?: Maybe<Array<Scalars['Upload']>>
  description?: Maybe<Scalars['String']>
}

export type CreateConversationInput = {
  createdByAccountId: Scalars['ID']
  roomId: Scalars['ID']
  content: Scalars['String']
  type?: Maybe<Scalars['String']>
}

export type CreateCourseInput = {
  academicSubjectId: Scalars['String']
  orgOfficeId: Scalars['String']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['String']
  tuitionFee: Scalars['Float']
  lecturerIds?: Maybe<Array<Scalars['String']>>
}

export type CreateLessonInput = {
  startTime: Scalars['DateTime']
  endTime: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  courseId: Scalars['String']
  publicationState: Publication
}

export type CreateOrgOfficeInput = {
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type CreateQuestionInput = {
  title: Scalars['String']
  scores: Scalars['Float']
  questionChoicesTitle: Array<Scalars['String']>
  questionChoicesRight: Array<Scalars['Boolean']>
}

export type CreateQuizInput = {
  title: Scalars['String']
  courseId: Scalars['String']
  questionIds?: Maybe<Array<Scalars['String']>>
  duration?: Maybe<Scalars['Float']>
  description: Scalars['String']
  publicationState?: Maybe<Publication>
}

export type CreateQuizSubmitInput = {
  quizId: Scalars['String']
  startTime: Scalars['DateTime']
}

export type File = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  size: Scalars['Int']
  mimeType: Scalars['String']
  storageProvider: FileLocation
  storageProviderIdentifier: Scalars['String']
  signedUrl?: Maybe<Scalars['String']>
}

export enum FileLocation {
  LocalStorage = 'LocalStorage',
}

export type Lesson = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  updatedByAccountId: Scalars['ID']
  startTime: Scalars['DateTime']
  endTime: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  absentStudentIds: Array<Scalars['ID']>
  lecturerComment?: Maybe<Scalars['String']>
  courseId: Scalars['ID']
  publicationState: Publication
  avgNumberOfStars: Scalars['Float']
  classworkMaterialListBeforeClass?: Maybe<Array<Scalars['ID']>>
  classworkMaterialListInClass?: Maybe<Array<Scalars['ID']>>
  classworkMaterialListAfterClass?: Maybe<Array<Scalars['ID']>>
  classworkAssignmentListBeforeClass?: Maybe<Array<Scalars['ID']>>
  classworkAssignmentListInClass?: Maybe<Array<Scalars['ID']>>
  classworkAssignmentListAfterClass?: Maybe<Array<Scalars['ID']>>
}

export type LessonsFilterInput = {
  courseId: Scalars['ID']
  startTime?: Maybe<Scalars['DateTime']>
  endTime?: Maybe<Scalars['DateTime']>
  absentStudentId?: Maybe<Scalars['ID']>
  ratingStar?: Maybe<Scalars['Float']>
  status: LessonsFilterInputStatus
}

export enum LessonsFilterInputStatus {
  academic = 'academic',
  studying = 'studying',
  teaching = 'teaching',
}

export type LessonsPayload = {
  lessons: Array<Lesson>
  count: Scalars['Int']
}

export type Mutation = {
  createOrgAccount: Account
  updateAccount: Account
  updateAccountStatus: Account
  setPassword: Account
  callOTP: Account
  signIn: SignInPayload
  createAcademicSubject: AcademicSubject
  updateAcademicSubjectPublication: AcademicSubject
  updateAcademicSubject: AcademicSubject
  createOrgOffice: OrgOffice
  updateOrgOffice: OrgOffice
  findOrgOffices: Array<OrgOffice>
  createCourse: Course
  updateCourse: Course
  addLecturesToCourse: Course
  addStudentsToCourse: Course
  removeStudentsFromCourse: Course
  removeLecturersFromCourse: Course
  createClassworkMaterial: ClassworkMaterial
  updateClassworkMaterial: ClassworkMaterial
  updateClassworkMaterialPublication: ClassworkMaterial
  addAttachmentsToClassworkMaterial: ClassworkMaterial
  removeAttachmentsFromClassworkMaterial: ClassworkMaterial
  createClassworkAssignment: ClassworkAssignment
  updateClassworkAssignment: ClassworkAssignment
  updateClassworkAssignmentPublication: ClassworkAssignment
  addAttachmentsToClassworkAssignment: ClassworkAssignment
  removeAttachmentsFromClassworkAssignments: ClassworkAssignment
  createClassworkSubmission: ClassworkSubmission
  setGradeForClassworkSubmission: ClassworkSubmission
  updateFile: File
  createConversation: Conversation
  createRatingForTheLesson: Rating
  createLesson: Lesson
  updateLesson: Lesson
  addAbsentStudentsToLesson: Lesson
  removeAbsentStudentsFromLesson: Lesson
  commentsByLecturer: Lesson
  createQuiz: Quiz
  updatePublicationQuiz: Quiz
  createQuestion: Question
  createQuizSubmit: QuizSubmit
  submitQuiz: QuizSubmit
}

export type MutationCreateOrgAccountArgs = {
  input: CreateAccountInput
}

export type MutationUpdateAccountArgs = {
  updateInput: UpdateAccountInput
  id: Scalars['ID']
}

export type MutationUpdateAccountStatusArgs = {
  status: Scalars['String']
  id: Scalars['ID']
}

export type MutationSetPasswordArgs = {
  otp: Scalars['String']
  password: Scalars['String']
  usernameOrEmail: Scalars['String']
}

export type MutationCallOtpArgs = {
  type: Scalars['String']
  usernameOrEmail: Scalars['String']
}

export type MutationSignInArgs = {
  password: Scalars['String']
  identity: Scalars['String']
  orgNamespace: Scalars['String']
}

export type MutationCreateAcademicSubjectArgs = {
  input: CreateAcademicSubjectInput
}

export type MutationUpdateAcademicSubjectPublicationArgs = {
  publication: Scalars['String']
  id: Scalars['ID']
}

export type MutationUpdateAcademicSubjectArgs = {
  updateInput: UpdateAcademicSubjectInput
  id: Scalars['ID']
}

export type MutationCreateOrgOfficeArgs = {
  input: CreateOrgOfficeInput
}

export type MutationUpdateOrgOfficeArgs = {
  input: UpdateOrgOfficeInput
  id: Scalars['ID']
}

export type MutationFindOrgOfficesArgs = {
  searchText?: Maybe<Scalars['String']>
  orgId?: Maybe<Scalars['ID']>
}

export type MutationCreateCourseArgs = {
  input: CreateCourseInput
}

export type MutationUpdateCourseArgs = {
  updateInput: UpdateCourseInput
  id: Scalars['ID']
}

export type MutationAddLecturesToCourseArgs = {
  lecturerIds: Array<Scalars['ID']>
  courseId: Scalars['ID']
}

export type MutationAddStudentsToCourseArgs = {
  studentIds: Array<Scalars['ID']>
  courseId: Scalars['ID']
}

export type MutationRemoveStudentsFromCourseArgs = {
  studentIds: Array<Scalars['ID']>
  id: Scalars['ID']
}

export type MutationRemoveLecturersFromCourseArgs = {
  lecturerIds: Array<Scalars['ID']>
  id: Scalars['ID']
}

export type MutationCreateClassworkMaterialArgs = {
  CreateClassworkMaterialInput: CreateClassworkMaterialInput
  courseId: Scalars['ID']
}

export type MutationUpdateClassworkMaterialArgs = {
  updateClassworkMaterialInput: UpdateClassworkMaterialInput
  classworkMaterialId: Scalars['ID']
}

export type MutationUpdateClassworkMaterialPublicationArgs = {
  publicationState: Publication
  classworkMaterialId: Scalars['ID']
}

export type MutationAddAttachmentsToClassworkMaterialArgs = {
  attachmentsInput: AddAttachmentsToClassworkInput
  classworkMaterialId: Scalars['ID']
}

export type MutationRemoveAttachmentsFromClassworkMaterialArgs = {
  attachments: Array<Scalars['String']>
  classworkMaterialId: Scalars['ID']
}

export type MutationCreateClassworkAssignmentArgs = {
  courseId: Scalars['ID']
  input: CreateClassworkAssignmentInput
}

export type MutationUpdateClassworkAssignmentArgs = {
  updateInput: UpdateClassworkAssignmentInput
  id: Scalars['ID']
}

export type MutationUpdateClassworkAssignmentPublicationArgs = {
  publication: Scalars['String']
  id: Scalars['ID']
}

export type MutationAddAttachmentsToClassworkAssignmentArgs = {
  attachmentsInput: AddAttachmentsToClassworkInput
  classworkAssignmentId: Scalars['ID']
}

export type MutationRemoveAttachmentsFromClassworkAssignmentsArgs = {
  attachments: Array<Scalars['String']>
  classworkAssignmentId: Scalars['ID']
}

export type MutationCreateClassworkSubmissionArgs = {
  createClassworkSubmissionInput: CreateClassworkSubmissionInput
  courseId: Scalars['ID']
}

export type MutationSetGradeForClassworkSubmissionArgs = {
  setGradeForClassworkSubmissionInput: SetGradeForClassworkSubmissionInput
}

export type MutationUpdateFileArgs = {
  newFile: Scalars['Upload']
  id: Scalars['ID']
}

export type MutationCreateConversationArgs = {
  conversationInput: CreateConversationInput
}

export type MutationCreateRatingForTheLessonArgs = {
  ratingInput: RatingInput
}

export type MutationCreateLessonArgs = {
  createLessonInput: CreateLessonInput
}

export type MutationUpdateLessonArgs = {
  updateInput: UpdateLessonInput
  lessonId: Scalars['ID']
  courseId: Scalars['ID']
}

export type MutationAddAbsentStudentsToLessonArgs = {
  absentStudentIds: Array<Scalars['String']>
  lessonId: Scalars['ID']
  courseId: Scalars['ID']
}

export type MutationRemoveAbsentStudentsFromLessonArgs = {
  absentStudentIds: Array<Scalars['String']>
  lessonId: Scalars['ID']
  courseId: Scalars['ID']
}

export type MutationCommentsByLecturerArgs = {
  commentsForTheLessonByLecturerInput: CommentsForTheLessonByLecturerInput
  commentsForTheLessonByLecturerQuery: CommentsForTheLessonByLecturerQuery
}

export type MutationCreateQuizArgs = {
  input: CreateQuizInput
}

export type MutationUpdatePublicationQuizArgs = {
  publicationState: Scalars['String']
  id: Scalars['String']
}

export type MutationCreateQuestionArgs = {
  input: CreateQuestionInput
}

export type MutationCreateQuizSubmitArgs = {
  input: CreateQuizSubmitInput
}

export type MutationSubmitQuizArgs = {
  input: SubmitQuizInput
}

export type Org = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  namespace: Scalars['String']
  name: Scalars['String']
}

export type OrgAccountsPayload = {
  accounts: Array<Account>
  count: Scalars['Int']
}

export type OrgOffice = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type PageOptionsInput = {
  skip: Scalars['Int']
  limit: Scalars['Int']
}

export enum Permission {
  Hr_Access = 'Hr_Access',
  Hr_CreateOrgAccount = 'Hr_CreateOrgAccount',
  Hr_ListOrgAccounts = 'Hr_ListOrgAccounts',
  Hr_UpdateOrgAccount = 'Hr_UpdateOrgAccount',
  Hr_UpdateOrgAccountStatus = 'Hr_UpdateOrgAccountStatus',
  Academic_AcademicSubject_Access = 'Academic_AcademicSubject_Access',
  Academic_CreateAcademicSubject = 'Academic_CreateAcademicSubject',
  Academic_ListAcademicSubjects = 'Academic_ListAcademicSubjects',
  Academic_SetAcademicSubjectPublication = 'Academic_SetAcademicSubjectPublication',
  Academic_UpdateAcademicSubject = 'Academic_UpdateAcademicSubject',
  Academic_Course_Access = 'Academic_Course_Access',
  Academic_CreateCourse = 'Academic_CreateCourse',
  Academic_UpdateCourse = 'Academic_UpdateCourse',
  Academic_ListCourses = 'Academic_ListCourses',
  Academic_AddStudentsToCourse = 'Academic_AddStudentsToCourse',
  Academic_AddLecturersToCourse = 'Academic_AddLecturersToCourse',
  Academic_RemoveStudentsFromCourse = 'Academic_RemoveStudentsFromCourse',
  Academic_RemoveLecturersFromCourse = 'Academic_RemoveLecturersFromCourse',
  Academic_CreateLesson = 'Academic_CreateLesson',
  Academic_ListLesson = 'Academic_ListLesson',
  Academic_UpdateLesson = 'Academic_UpdateLesson',
  Academic_AddAbsentStudentsToLesson = 'Academic_AddAbsentStudentsToLesson',
  Academic_RemoveAbsentStudentsFromLesson = 'Academic_RemoveAbsentStudentsFromLesson',
  Academic_CommentsForTheLesson = 'Academic_CommentsForTheLesson',
  OrgOffice_Access = 'OrgOffice_Access',
  OrgOffice_CreateOrgOffice = 'OrgOffice_CreateOrgOffice',
  OrgOffice_ListOrgOffices = 'OrgOffice_ListOrgOffices',
  OrgOffice_UpdateOrgOffice = 'OrgOffice_UpdateOrgOffice',
  Teaching_Course_Access = 'Teaching_Course_Access',
  Studying_Course_Access = 'Studying_Course_Access',
  Classwork_ListClassworkAssignment = 'Classwork_ListClassworkAssignment',
  Classwork_CreateClassworkAssignment = 'Classwork_CreateClassworkAssignment',
  Classwork_UpdateClassworkAssignment = 'Classwork_UpdateClassworkAssignment',
  Classwork_SetClassworkAssignmentPublication = 'Classwork_SetClassworkAssignmentPublication',
  Classwork_AddAttachmentsToClassworkAssignment = 'Classwork_AddAttachmentsToClassworkAssignment',
  Classwork_RemoveAttachmentsFromClassworkAssignment = 'Classwork_RemoveAttachmentsFromClassworkAssignment',
  Classwork_ListClassworkMaterial = 'Classwork_ListClassworkMaterial',
  Classwork_UpdateClassworkMaterial = 'Classwork_UpdateClassworkMaterial',
  Classwork_CreateClassworkMaterial = 'Classwork_CreateClassworkMaterial',
  Classwork_SetClassworkMaterialPublication = 'Classwork_SetClassworkMaterialPublication',
  Classwork_AddAttachmentsToClassworkMaterial = 'Classwork_AddAttachmentsToClassworkMaterial',
  Classwork_RemoveAttachmentsFromClassworkMaterial = 'Classwork_RemoveAttachmentsFromClassworkMaterial',
  Classwork_SetGradeForClassworkSubmission = 'Classwork_SetGradeForClassworkSubmission',
  Classwork_CreateClassworkSubmission = 'Classwork_CreateClassworkSubmission',
  Classwork_ListClassworkSubmission = 'Classwork_ListClassworkSubmission',
  Classwork_ShowSubmissionStatusList = 'Classwork_ShowSubmissionStatusList',
  AvgGradeStatisticsOfClassworkInTheCourse = 'AvgGradeStatisticsOfClassworkInTheCourse',
  Comment_CreateComment = 'Comment_CreateComment',
  Rating_CreateRating = 'Rating_CreateRating',
  NoPermission = 'NoPermission',
}

export enum Publication {
  Draft = 'Draft',
  Published = 'Published',
}

export type Query = {
  account?: Maybe<Account>
  accountByUserName?: Maybe<Account>
  orgAccounts: OrgAccountsPayload
  authenticate: AuthenticatePayload
  canAccountManageRoles: Scalars['Boolean']
  academicSubjects: AcademicSubjectsPayload
  academicSubject: AcademicSubject
  orgOffices: Array<OrgOffice>
  orgOffice: OrgOffice
  findCourseById: Course
  courses: CoursesPayload
  calculateAvgGradeOfClassworkAssignmentInCourse: Array<AvgGradeOfClassworkByCourse>
  classworkMaterials: ClassworkMaterialPayload
  classworkMaterial: ClassworkMaterial
  classworkAssignment: ClassworkAssignment
  classworkAssignments: ClassworkAssignmentPayload
  listClassworkAssignmentsByStudentIdInCourse: ClassworkAssignmentByStudentIdInCourseResponsePayload
  classworkSubmissions: Array<ClassworkSubmission>
  findClassworkSubmissionById: ClassworkSubmission
  findOneClassworkSubmission: ClassworkSubmission
  getListOfStudentsSubmitAssignmentsByStatus: ClassworkSubmissionStatusPayload
  submissionStatusStatistics: Array<SubmissionStatusStatistics>
  file?: Maybe<File>
  conversations: ConversationsPayload
  lessons: LessonsPayload
  updateLessonPublicationById: Lesson
  findLessonById: Lesson
  quizzes: QuizzesPayload
  quizzesStudying: QuizzesPayload
  quiz: Quiz
  question: Question
  questionChoices: QuestionChoicesPayload
  quizSubmit: QuizSubmit
}

export type QueryAccountArgs = {
  id: Scalars['ID']
}

export type QueryAccountByUserNameArgs = {
  username: Scalars['String']
}

export type QueryOrgAccountsArgs = {
  filter: AccountsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryCanAccountManageRolesArgs = {
  roles: Array<Scalars['String']>
}

export type QueryAcademicSubjectsArgs = {
  filter: AcademicSubjectsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryAcademicSubjectArgs = {
  id: Scalars['ID']
}

export type QueryOrgOfficeArgs = {
  id: Scalars['ID']
}

export type QueryFindCourseByIdArgs = {
  id: Scalars['ID']
}

export type QueryCoursesArgs = {
  filter: CoursesFilterInput
  pageOptions: PageOptionsInput
}

export type QueryCalculateAvgGradeOfClassworkAssignmentInCourseArgs = {
  optionInput: AvgGradeOfClassworkByCourseOptionInput
  courseId: Scalars['ID']
}

export type QueryClassworkMaterialsArgs = {
  searchText?: Maybe<Scalars['String']>
  courseId: Scalars['String']
  pageOptions: PageOptionsInput
}

export type QueryClassworkMaterialArgs = {
  Id: Scalars['ID']
}

export type QueryClassworkAssignmentArgs = {
  id: Scalars['ID']
}

export type QueryClassworkAssignmentsArgs = {
  searchText?: Maybe<Scalars['String']>
  courseId: Scalars['ID']
  pageOptions: PageOptionsInput
}

export type QueryListClassworkAssignmentsByStudentIdInCourseArgs = {
  Input: ClassworkAssignmentByStudentIdInCourseInput
}

export type QueryClassworkSubmissionsArgs = {
  classworkAssignmentId: Scalars['ID']
}

export type QueryFindClassworkSubmissionByIdArgs = {
  classworkSubmissionId: Scalars['ID']
}

export type QueryFindOneClassworkSubmissionArgs = {
  ClassworkAssignment: Scalars['ID']
}

export type QueryGetListOfStudentsSubmitAssignmentsByStatusArgs = {
  classworkSubmissionStatus: Scalars['String']
  classworkAssignmentId: Scalars['ID']
}

export type QuerySubmissionStatusStatisticsArgs = {
  classworkAssignmentId: Scalars['ID']
}

export type QueryFileArgs = {
  id: Scalars['ID']
}

export type QueryConversationsArgs = {
  conversationPageOptionInput: ConversationPageOptionInput
  lastId?: Maybe<Scalars['ID']>
  roomId: Scalars['String']
}

export type QueryLessonsArgs = {
  filter: LessonsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryUpdateLessonPublicationByIdArgs = {
  input: UpdateLessonPublicationByIdInput
}

export type QueryFindLessonByIdArgs = {
  lessonId: Scalars['ID']
}

export type QueryQuizzesArgs = {
  filter: QuizzesFilterInput
  pageOptions: PageOptionsInput
}

export type QueryQuizzesStudyingArgs = {
  filter: QuizzesFilterInput
  pageOptions: PageOptionsInput
}

export type QueryQuizArgs = {
  id: Scalars['ID']
}

export type QueryQuestionArgs = {
  id: Scalars['ID']
}

export type QueryQuestionChoicesArgs = {
  questionId: Scalars['ID']
}

export type QueryQuizSubmitArgs = {
  quizId: Scalars['ID']
}

export type Question = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  title: Scalars['String']
  scores: Scalars['Float']
  createdByAccountId: Scalars['ID']
}

export type QuestionChoice = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  title: Scalars['String']
  questionId: Scalars['ID']
  isRight: Scalars['Boolean']
  createdByAccountId: Scalars['ID']
}

export type QuestionChoicesPayload = {
  questionChoices: Array<QuestionChoice>
  idRight: Scalars['String']
}

export type Quiz = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  title: Scalars['String']
  description?: Maybe<Scalars['String']>
  courseId: Scalars['ID']
  questionIds: Array<Scalars['ID']>
  duration?: Maybe<Scalars['Float']>
  createdByAccountId: Scalars['ID']
  publicationState: Publication
}

export type QuizSubmit = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  quizId: Scalars['ID']
  scores: Scalars['Float']
  startTime?: Maybe<Scalars['DateTime']>
  questionIds?: Maybe<Array<Scalars['String']>>
  questionChoiceIds?: Maybe<Array<Scalars['String']>>
  createdByAccountId: Scalars['ID']
}

export type QuizzesFilterInput = {
  courseId: Scalars['ID']
  publicationState?: Maybe<Publication>
}

export type QuizzesPayload = {
  quizzes: Array<Quiz>
  count: Scalars['Int']
}

export type Rating = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  createdByAccountId: Scalars['ID']
  targetId: Scalars['ID']
  numberOfStars: Scalars['Float']
}

export type RatingInput = {
  targetId: Scalars['ID']
  numberOfStars?: Maybe<Scalars['Float']>
}

export type SetGradeForClassworkSubmissionInput = {
  submissionId: Scalars['ID']
  grade: Scalars['Float']
}

export type SignInPayload = {
  token: Scalars['String']
  account: Account
  org: Org
  permissions: Array<Permission>
}

export type SubmissionStatusStatistics = {
  label: Scalars['String']
  number: Scalars['Float']
}

export type SubmitQuizInput = {
  quizSubmitId: Scalars['String']
  questionIds: Array<Scalars['String']>
  questionChoiceIds: Array<Scalars['String']>
}

export type Subscription = {
  classworkAssignmentCreated: ClassworkAssignment
  conversationCreated: Conversation
}

export type SubscriptionClassworkAssignmentCreatedArgs = {
  courseId: Scalars['ID']
}

export type SubscriptionConversationCreatedArgs = {
  roomId: Scalars['String']
}

export type UpdateAcademicSubjectInput = {
  name?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
}

export type UpdateAccountInput = {
  username?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  displayName?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']>>
  password?: Maybe<Scalars['String']>
}

export type UpdateClassworkAssignmentInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  dueDate?: Maybe<Scalars['DateTime']>
}

export type UpdateClassworkMaterialInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
}

export type UpdateCourseInput = {
  name?: Maybe<Scalars['String']>
  tuitionFee?: Maybe<Scalars['Float']>
  startDate?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
}

export type UpdateLessonInput = {
  startTime?: Maybe<Scalars['DateTime']>
  endTime?: Maybe<Scalars['DateTime']>
  description?: Maybe<Scalars['String']>
  absentStudentIds?: Maybe<Array<Scalars['String']>>
  publicationState?: Maybe<Publication>
}

export type UpdateLessonPublicationByIdInput = {
  lessonId: Scalars['ID']
  publicationState: Publication
  courseId: Scalars['ID']
}

export type UpdateOrgOfficeInput = {
  name?: Maybe<Scalars['String']>
  address?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type AuthAccountFragment = {
  id: string
  orgId: string
  status: AccountStatus
  email: string
  otp?: Maybe<string>
  otpExpired?: Maybe<any>
  username: string
  displayName?: Maybe<string>
}

export type AuthOrgFragment = { id: string; name: string; namespace: string }

export type SignInMutationVariables = Exact<{
  orgNamespace: Scalars['String']
  identity: Scalars['String']
  password: Scalars['String']
}>

export type SignInMutation = {
  signIn: {
    token: string
    account: {
      id: string
      orgId: string
      status: AccountStatus
      email: string
      otp?: Maybe<string>
      otpExpired?: Maybe<any>
      username: string
      displayName?: Maybe<string>
    }
    org: { id: string; name: string; namespace: string }
  }
}

export type AuthenticateQueryVariables = Exact<{ [key: string]: never }>

export type AuthenticateQuery = {
  authenticate: {
    permissions: Array<Permission>
    account: {
      id: string
      orgId: string
      status: AccountStatus
      email: string
      otp?: Maybe<string>
      otpExpired?: Maybe<any>
      username: string
      displayName?: Maybe<string>
    }
    org: { id: string; name: string; namespace: string }
  }
}

export type CanAccountManageRolesQueryVariables = Exact<{
  roles: Array<Scalars['String']> | Scalars['String']
}>

export type CanAccountManageRolesQuery = { canAccountManageRoles: boolean }

export type CallOtpMutationVariables = Exact<{
  identity: Scalars['String']
  type: Scalars['String']
}>

export type CallOtpMutation = {
  callOTP: {
    id: string
    orgId: string
    status: AccountStatus
    email: string
    otp?: Maybe<string>
    otpExpired?: Maybe<any>
    username: string
    displayName?: Maybe<string>
  }
}

export type SetPasswordMutationVariables = Exact<{
  usernameOrEmail: Scalars['String']
  password: Scalars['String']
  otp: Scalars['String']
}>

export type SetPasswordMutation = {
  setPassword: {
    id: string
    orgId: string
    status: AccountStatus
    email: string
    otp?: Maybe<string>
    otpExpired?: Maybe<any>
    username: string
    displayName?: Maybe<string>
  }
}

export type AccountAvatarQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountAvatarQuery = {
  account?: Maybe<{
    id: string
    email: string
    username: string
    displayName?: Maybe<string>
    availability: AccountAvailability
  }>
}

export type AccountDisplayNameQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountDisplayNameQuery = {
  account?: Maybe<{ id: string; username: string; displayName?: Maybe<string> }>
}

export type ConversationCreatedSubscriptionVariables = Exact<{
  roomId: Scalars['String']
}>

export type ConversationCreatedSubscription = {
  conversationCreated: {
    id: string
    roomId: string
    content: string
    createdAt: any
    createdByAccountId: string
    type: ConversationType
  }
}

export type ConversationsQueryVariables = Exact<{
  lastId?: Maybe<Scalars['ID']>
  roomId: Scalars['String']
  conversationPageOptionInput: ConversationPageOptionInput
}>

export type ConversationsQuery = {
  conversations: {
    count: number
    conversations: Array<{
      id: string
      createdAt: any
      createdByAccountId: string
      roomId: string
      content: string
      type: ConversationType
    }>
  }
}

export type CreateConversationMutationVariables = Exact<{
  input: CreateConversationInput
}>

export type CreateConversationMutation = {
  createConversation: {
    id: string
    roomId: string
    content: string
    createdAt: any
    createdByAccountId: string
    type: ConversationType
  }
}

export type FileQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FileQuery = {
  file?: Maybe<{
    id: string
    orgId: string
    mimeType: string
    name: string
    size: number
    signedUrl?: Maybe<string>
  }>
}

export type ImageFileQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ImageFileQuery = {
  file?: Maybe<{
    id: string
    orgId: string
    mimeType: string
    name: string
    size: number
    signedUrl?: Maybe<string>
  }>
}

export type AcademicSubjectDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AcademicSubjectDetailQuery = {
  academicSubject: {
    id: string
    code: string
    name: string
    description: string
    imageFileId: string
    publication: Publication
  }
}

export type UpdateFileMutationVariables = Exact<{
  id: Scalars['ID']
  newFile: Scalars['Upload']
}>

export type UpdateFileMutation = { updateFile: { id: string; name: string } }

export type AcademicSubjectListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
}>

export type AcademicSubjectListQuery = {
  academicSubjects: {
    count: number
    academicSubjects: Array<{
      id: string
      orgId: string
      name: string
      code: string
      description: string
      publication: Publication
      imageFileId: string
    }>
  }
}

export type AccountProfileQueryVariables = Exact<{
  username: Scalars['String']
}>

export type AccountProfileQuery = {
  accountByUserName?: Maybe<{
    id: string
    email: string
    username: string
    displayName?: Maybe<string>
    roles: Array<string>
    status: AccountStatus
    availability: AccountAvailability
  }>
}

export type UpdateAccountStatusMutationVariables = Exact<{
  id: Scalars['ID']
  status: Scalars['String']
}>

export type UpdateAccountStatusMutation = {
  updateAccountStatus: {
    id: string
    email: string
    username: string
    displayName?: Maybe<string>
    roles: Array<string>
    status: AccountStatus
  }
}

export type UpdateAccountMutationVariables = Exact<{
  accountId: Scalars['ID']
  update: UpdateAccountInput
}>

export type UpdateAccountMutation = {
  updateAccount: {
    id: string
    displayName?: Maybe<string>
    email: string
    roles: Array<string>
  }
}

export type UpdateSelfAccountMutationVariables = Exact<{
  accountId: Scalars['ID']
  update: UpdateAccountInput
}>

export type UpdateSelfAccountMutation = {
  updateAccount: {
    id: string
    displayName?: Maybe<string>
    email: string
    roles: Array<string>
  }
}

export type ClassworkAssignmentDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type ClassworkAssignmentDetailQuery = {
  classworkAssignment: {
    id: string
    orgId: string
    courseId: string
    title: string
    type: string
    description?: Maybe<string>
    publicationState: Publication
    attachments: Array<string>
    dueDate?: Maybe<any>
  }
}

export type AddAttachmentsToClassworkAssignmentMutationVariables = Exact<{
  classworkAssignmentId: Scalars['ID']
  attachmentsInput: AddAttachmentsToClassworkInput
}>

export type AddAttachmentsToClassworkAssignmentMutation = {
  addAttachmentsToClassworkAssignment: {
    id: string
    orgId: string
    courseId: string
    title: string
    type: string
    description?: Maybe<string>
    publicationState: Publication
    attachments: Array<string>
    dueDate?: Maybe<any>
  }
}

export type RemoveAttachmentsFromClassworkAssignmentMutationVariables = Exact<{
  classworkAssignmentId: Scalars['ID']
  attachments: Array<Scalars['String']> | Scalars['String']
}>

export type RemoveAttachmentsFromClassworkAssignmentMutation = {
  removeAttachmentsFromClassworkAssignments: {
    id: string
    orgId: string
    courseId: string
    title: string
    type: string
    description?: Maybe<string>
    publicationState: Publication
    attachments: Array<string>
    dueDate?: Maybe<any>
  }
}

export type ListClassworkSubmissionQueryVariables = Exact<{
  classworkAssignmentId: Scalars['ID']
}>

export type ListClassworkSubmissionQuery = {
  classworkSubmissions: Array<{
    id: string
    createdByAccountId: string
    createdAt: any
  }>
}

export type FindClassworkSubmissionByIdQueryVariables = Exact<{
  classworkSubmissionId: Scalars['ID']
}>

export type FindClassworkSubmissionByIdQuery = {
  findClassworkSubmissionById: {
    id: string
    createdAt: any
    createdByAccountId: string
    description: string
    submissionFileIds: Array<string>
    classworkId: string
    grade?: Maybe<number>
  }
}

export type CoursesQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
}>

export type CoursesQuery = {
  courses: {
    count: number
    courses: Array<{
      id: string
      createdAt: any
      name: string
      code: string
      orgId: string
      academicSubjectId: string
      startDate: any
      tuitionFee: number
      lecturerIds: Array<string>
      orgOfficeId: string
    }>
  }
}

export type CreateClassworkAssignmentMutationVariables = Exact<{
  courseId: Scalars['ID']
  input: CreateClassworkAssignmentInput
}>

export type CreateClassworkAssignmentMutation = {
  createClassworkAssignment: {
    id: string
    title: string
    description?: Maybe<string>
  }
}

export type CreateCourseMutationVariables = Exact<{
  input: CreateCourseInput
}>

export type CreateCourseMutation = {
  createCourse: { id: string; code: string; name: string }
}

export type CreateAcademicSubjectMutationVariables = Exact<{
  input: CreateAcademicSubjectInput
}>

export type CreateAcademicSubjectMutation = {
  createAcademicSubject: { id: string; code: string; name: string }
}

export type FindAcademicSubjectByIdQueryVariables = Exact<{
  Id: Scalars['ID']
}>

export type FindAcademicSubjectByIdQuery = {
  academicSubject: {
    id: string
    code: string
    name: string
    description: string
    imageFileId: string
    publication: Publication
  }
}

export type UpdateAcademicSubjectMutationVariables = Exact<{
  Id: Scalars['ID']
  updateInput: UpdateAcademicSubjectInput
}>

export type UpdateAcademicSubjectMutation = {
  updateAcademicSubject: { id: string; code: string; name: string }
}

export type UpdateAcademicSubjectPublicationMutationVariables = Exact<{
  Id: Scalars['ID']
  publication: Scalars['String']
}>

export type UpdateAcademicSubjectPublicationMutation = {
  updateAcademicSubjectPublication: {
    id: string
    code: string
    publication: Publication
  }
}

export type CreateAccountMutationVariables = Exact<{
  accountInput: CreateAccountInput
}>

export type CreateAccountMutation = {
  createOrgAccount: {
    id: string
    displayName?: Maybe<string>
    username: string
    email: string
  }
}

export type AddLecturesToCourseMutationVariables = Exact<{
  lecturerIds: Array<Scalars['ID']> | Scalars['ID']
  courseId: Scalars['ID']
}>

export type AddLecturesToCourseMutation = {
  addLecturesToCourse: { id: string; name: string; lecturerIds: Array<string> }
}

export type AddStudentToCourseMutationVariables = Exact<{
  studentIds: Array<Scalars['ID']> | Scalars['ID']
  courseId: Scalars['ID']
}>

export type AddStudentToCourseMutation = {
  addStudentsToCourse: { id: string; name: string; studentIds: Array<string> }
}

export type FindCourseByIdQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FindCourseByIdQuery = {
  findCourseById: {
    id: string
    code: string
    name: string
    lecturerIds: Array<string>
    studentIds: Array<string>
    startDate: any
    tuitionFee: number
  }
}

export type RemoveLecturersFromCourseMutationVariables = Exact<{
  lecturerIds: Array<Scalars['ID']> | Scalars['ID']
  id: Scalars['ID']
}>

export type RemoveLecturersFromCourseMutation = {
  removeLecturersFromCourse: { id: string; code: string; name: string }
}

export type RemoveStudentsFromCourseMutationVariables = Exact<{
  studentIds: Array<Scalars['ID']> | Scalars['ID']
  id: Scalars['ID']
}>

export type RemoveStudentsFromCourseMutation = {
  removeStudentsFromCourse: { id: string; code: string; name: string }
}

export type OrgAccountListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']> | Scalars['String']>
}>

export type OrgAccountListQuery = {
  orgAccounts: {
    count: number
    accounts: Array<{
      id: string
      email: string
      displayName?: Maybe<string>
      username: string
      roles: Array<string>
      availability: AccountAvailability
      status: AccountStatus
    }>
  }
}

export type ListOrgOfficesQueryVariables = Exact<{ [key: string]: never }>

export type ListOrgOfficesQuery = {
  orgOffices: Array<{
    id: string
    name: string
    address: string
    phone: string
  }>
}

export type CreateOrgOfficeMutationVariables = Exact<{
  input: CreateOrgOfficeInput
}>

export type CreateOrgOfficeMutation = {
  createOrgOffice: { id: string; name: string }
}

export type UpdateOrgOfficeMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateOrgOfficeInput
}>

export type UpdateOrgOfficeMutation = {
  updateOrgOffice: { id: string; name: string }
}

export type OrgOfficeQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type OrgOfficeQuery = {
  orgOffice: { id: string; name: string; address: string; phone: string }
}

export type CreateClassworkSubmissionMutationVariables = Exact<{
  CreateClassworkSubmissionInput: CreateClassworkSubmissionInput
  courseId: Scalars['ID']
}>

export type CreateClassworkSubmissionMutation = {
  createClassworkSubmission: {
    id: string
    createdAt: any
    submissionFileIds: Array<string>
    description: string
  }
}

export type FindOneClassworkSubmissionQueryVariables = Exact<{
  ClassworkAssignment: Scalars['ID']
}>

export type FindOneClassworkSubmissionQuery = {
  findOneClassworkSubmission: {
    id: string
    createdAt: any
    classworkId: string
    createdByAccountId: string
    description: string
  }
}

export type ListClassworkAssignmentsByStudentIdInCourseQueryVariables = Exact<{
  Input: ClassworkAssignmentByStudentIdInCourseInput
}>

export type ListClassworkAssignmentsByStudentIdInCourseQuery = {
  listClassworkAssignmentsByStudentIdInCourse: {
    count: number
    list?: Maybe<
      Array<{
        classworkAssignmentId?: Maybe<string>
        classworkAssignmentsTitle?: Maybe<string>
        dueDate?: Maybe<any>
        classworkSubmissionGrade?: Maybe<number>
        classworkSubmissionUpdatedAt?: Maybe<any>
        classworkSubmissionDescription?: Maybe<string>
      }>
    >
  }
}

export type QuizzesStudyingQueryVariables = Exact<{
  skip: Scalars['Int']
  limit: Scalars['Int']
  courseId: Scalars['ID']
}>

export type QuizzesStudyingQuery = {
  quizzesStudying: {
    count: number
    quizzes: Array<{
      id: string
      title: string
      description?: Maybe<string>
      courseId: string
      questionIds: Array<string>
      duration?: Maybe<number>
      createdByAccountId: string
      publicationState: Publication
    }>
  }
}

export type StartQuizMutationVariables = Exact<{
  input: CreateQuizSubmitInput
}>

export type StartQuizMutation = {
  createQuizSubmit: {
    id: string
    quizId: string
    scores: number
    startTime?: Maybe<any>
    questionIds?: Maybe<Array<string>>
    questionChoiceIds?: Maybe<Array<string>>
    createdByAccountId: string
  }
}

export type QuizSubmitQueryVariables = Exact<{
  quizId: Scalars['ID']
}>

export type QuizSubmitQuery = {
  quizSubmit: {
    id: string
    quizId: string
    scores: number
    startTime?: Maybe<any>
    questionIds?: Maybe<Array<string>>
    questionChoiceIds?: Maybe<Array<string>>
    createdByAccountId: string
  }
}

export type SubmitQuizMutationVariables = Exact<{
  input: SubmitQuizInput
}>

export type SubmitQuizMutation = {
  submitQuiz: {
    id: string
    quizId: string
    scores: number
    startTime?: Maybe<any>
    questionIds?: Maybe<Array<string>>
    questionChoiceIds?: Maybe<Array<string>>
    createdByAccountId: string
  }
}

export type StudyingCourseListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
  studentIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>
}>

export type StudyingCourseListQuery = {
  courses: {
    count: number
    courses: Array<{
      id: string
      orgId: string
      name: string
      code: string
      tuitionFee: number
      startDate: any
      lecturerIds: Array<string>
      studentIds: Array<string>
      publicationState: Publication
    }>
  }
}

export type ClassworkAssignmentListQueryVariables = Exact<{
  skip: Scalars['Int']
  limit: Scalars['Int']
  courseId: Scalars['ID']
}>

export type ClassworkAssignmentListQuery = {
  classworkAssignments: {
    count: number
    classworkAssignments: Array<{
      id: string
      orgId: string
      courseId: string
      title: string
      type: string
      description?: Maybe<string>
      publicationState: Publication
      attachments: Array<string>
      dueDate?: Maybe<any>
    }>
  }
}

export type CreateLessonMutationVariables = Exact<{
  createLessonInput: CreateLessonInput
}>

export type CreateLessonMutation = {
  createLesson: {
    id: string
    orgId: string
    createdAt: any
    createdByAccountId: string
    updatedByAccountId: string
    startTime: any
    endTime: any
    description?: Maybe<string>
    absentStudentIds: Array<string>
    lecturerComment?: Maybe<string>
    courseId: string
    publicationState: Publication
    avgNumberOfStars: number
  }
}

export type ListLessonsQueryVariables = Exact<{
  filter: LessonsFilterInput
  pageOptions: PageOptionsInput
}>

export type ListLessonsQuery = {
  lessons: {
    count: number
    lessons: Array<{
      id: string
      orgId: string
      createdAt: any
      updatedAt: any
      createdByAccountId: string
      startTime: any
      endTime: any
      description?: Maybe<string>
      absentStudentIds: Array<string>
      lecturerComment?: Maybe<string>
      courseId: string
      publicationState: Publication
      avgNumberOfStars: number
    }>
  }
}

export type FindLessonByIdQueryVariables = Exact<{
  lessonId: Scalars['ID']
}>

export type FindLessonByIdQuery = {
  findLessonById: {
    id: string
    orgId: string
    createdAt: any
    updatedAt: any
    createdByAccountId: string
    startTime: any
    endTime: any
    description?: Maybe<string>
    absentStudentIds: Array<string>
    lecturerComment?: Maybe<string>
    courseId: string
    publicationState: Publication
    avgNumberOfStars: number
  }
}

export type UpdateLessonMutationVariables = Exact<{
  lessonId: Scalars['ID']
  courseId: Scalars['ID']
  updateInput: UpdateLessonInput
}>

export type UpdateLessonMutation = {
  updateLesson: {
    id: string
    createdAt: any
    updatedAt: any
    startTime: any
    endTime: any
    description?: Maybe<string>
    publicationState: Publication
    courseId: string
  }
}

export type ClassworkMaterialsListQueryVariables = Exact<{
  courseId: Scalars['String']
  skip: Scalars['Int']
  limit: Scalars['Int']
}>

export type ClassworkMaterialsListQuery = {
  classworkMaterials: {
    count: number
    classworkMaterials: Array<{
      id: string
      orgId: string
      createdAt: any
      updatedAt: any
      publicationState: Publication
      title: string
      description?: Maybe<string>
      attachments: Array<string>
    }>
  }
}

export type CreateClassworkMaterialMutationVariables = Exact<{
  courseId: Scalars['ID']
  CreateClassworkMaterialInput: CreateClassworkMaterialInput
}>

export type CreateClassworkMaterialMutation = {
  createClassworkMaterial: {
    id: string
    createdAt: any
    courseId: string
    title: string
    description?: Maybe<string>
    attachments: Array<string>
  }
}

export type DetailClassworkMaterialQueryVariables = Exact<{
  Id: Scalars['ID']
}>

export type DetailClassworkMaterialQuery = {
  classworkMaterial: {
    id: string
    createdAt: any
    updatedAt: any
    createdByAccountId: string
    title: string
    description?: Maybe<string>
    attachments: Array<string>
    publicationState: Publication
    courseId: string
  }
}

export type UpdateClassworkMaterialMutationVariables = Exact<{
  classworkMaterialId: Scalars['ID']
  updateClassworkMaterialInput: UpdateClassworkMaterialInput
}>

export type UpdateClassworkMaterialMutation = {
  updateClassworkMaterial: {
    id: string
    createdAt: any
    courseId: string
    title: string
    description?: Maybe<string>
    attachments: Array<string>
  }
}

export type AddAttachmentsToClassworkMaterialMutationVariables = Exact<{
  attachmentsInput: AddAttachmentsToClassworkInput
  classworkMaterialId: Scalars['ID']
}>

export type AddAttachmentsToClassworkMaterialMutation = {
  addAttachmentsToClassworkMaterial: {
    id: string
    orgId: string
    title: string
    attachments: Array<string>
  }
}

export type RemoveAttachmentsFromClassworkMaterialMutationVariables = Exact<{
  attachments: Array<Scalars['String']> | Scalars['String']
  classworkMaterialId: Scalars['ID']
}>

export type RemoveAttachmentsFromClassworkMaterialMutation = {
  removeAttachmentsFromClassworkMaterial: {
    id: string
    orgId: string
    title: string
    attachments: Array<string>
  }
}

export type SetGradeForClassworkSubmissionMutationVariables = Exact<{
  setGradeForClassworkSubmissionInput: SetGradeForClassworkSubmissionInput
}>

export type SetGradeForClassworkSubmissionMutation = {
  setGradeForClassworkSubmission: { id: string; grade?: Maybe<number> }
}

export type CourseDetailQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type CourseDetailQuery = {
  findCourseById: {
    id: string
    orgId: string
    name: string
    code: string
    tuitionFee: number
    startDate: any
    lecturerIds: Array<string>
    studentIds: Array<string>
    publicationState: Publication
  }
}

export type AvgGradeOfClassworkAssignmentInCourseQueryVariables = Exact<{
  courseId: Scalars['ID']
  optionInput: AvgGradeOfClassworkByCourseOptionInput
}>

export type AvgGradeOfClassworkAssignmentInCourseQuery = {
  calculateAvgGradeOfClassworkAssignmentInCourse: Array<{
    classworkTitle: string
    avgGrade: number
  }>
}

export type QuizzesQueryVariables = Exact<{
  skip: Scalars['Int']
  limit: Scalars['Int']
  courseId: Scalars['ID']
}>

export type QuizzesQuery = {
  quizzes: {
    count: number
    quizzes: Array<{
      id: string
      title: string
      description?: Maybe<string>
      courseId: string
      questionIds: Array<string>
      duration?: Maybe<number>
      createdByAccountId: string
      publicationState: Publication
    }>
  }
}

export type CreateQuestionMutationVariables = Exact<{
  input: CreateQuestionInput
}>

export type CreateQuestionMutation = {
  createQuestion: {
    id: string
    title: string
    scores: number
    createdByAccountId: string
  }
}

export type CreateQuizMutationVariables = Exact<{
  input: CreateQuizInput
}>

export type CreateQuizMutation = {
  createQuiz: {
    id: string
    title: string
    duration?: Maybe<number>
    description?: Maybe<string>
    courseId: string
    questionIds: Array<string>
    createdByAccountId: string
  }
}

export type QuizQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type QuizQuery = {
  quiz: {
    id: string
    title: string
    description?: Maybe<string>
    courseId: string
    duration?: Maybe<number>
    publicationState: Publication
    questionIds: Array<string>
    createdByAccountId: string
  }
}

export type QuestionQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type QuestionQuery = {
  question: {
    id: string
    title: string
    scores: number
    createdByAccountId: string
  }
}

export type QuestionChoicesQueryVariables = Exact<{
  questionId: Scalars['ID']
}>

export type QuestionChoicesQuery = {
  questionChoices: {
    idRight: string
    questionChoices: Array<{
      id: string
      title: string
      isRight: boolean
      questionId: string
      createdByAccountId: string
    }>
  }
}

export type UpdatePublicationQuizMutationVariables = Exact<{
  id: Scalars['String']
  publicationState: Scalars['String']
}>

export type UpdatePublicationQuizMutation = {
  updatePublicationQuiz: { id: string; publicationState: Publication }
}

export type TeachingCourseListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  lecturerIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>
  searchText?: Maybe<Scalars['String']>
}>

export type TeachingCourseListQuery = {
  courses: {
    count: number
    courses: Array<{
      id: string
      orgId: string
      name: string
      code: string
      tuitionFee: number
      startDate: any
      lecturerIds: Array<string>
      publicationState: Publication
    }>
  }
}

export type UpdateClassworkAssignmentMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateClassworkAssignmentInput
}>

export type UpdateClassworkAssignmentMutation = {
  updateClassworkAssignment: {
    id: string
    courseId: string
    title: string
    description?: Maybe<string>
    dueDate?: Maybe<any>
  }
}

export type UpdateCourseMutationVariables = Exact<{
  id: Scalars['ID']
  updateInput: UpdateCourseInput
}>

export type UpdateCourseMutation = {
  updateCourse: {
    id: string
    createdAt: any
    updatedAt: any
    name: string
    startDate: any
    lecturerIds: Array<string>
    tuitionFee: number
  }
}

export const AuthAccountFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otpExpired' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const AuthOrgFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export const SignInDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SignIn' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgNamespace' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identity' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'password' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'signIn' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'password' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'password' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'identity' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'identity' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'orgNamespace' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orgNamespace' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'token' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otpExpired' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type SignInMutationFn = Apollo.MutationFunction<
  SignInMutation,
  SignInMutationVariables
>
export type SignInProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    SignInMutation,
    SignInMutationVariables
  >
} &
  TChildProps
export function withSignIn<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >(SignInDocument, {
    alias: 'signIn',
    ...operationOptions,
  })
}

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      orgNamespace: // value for 'orgNamespace'
 *      identity: // value for 'identity'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SignInMutation,
    SignInMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SignInMutation, SignInMutationVariables>(
    SignInDocument,
    options,
  )
}
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>
export type SignInMutationResult = Apollo.MutationResult<SignInMutation>
export type SignInMutationOptions = Apollo.BaseMutationOptions<
  SignInMutation,
  SignInMutationVariables
>
export const AuthenticateDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Authenticate' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'authenticate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'permissions' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otpExpired' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AuthenticateProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >
} &
  TChildProps
export function withAuthenticate<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >(AuthenticateDocument, {
    alias: 'authenticate',
    ...operationOptions,
  })
}

/**
 * __useAuthenticateQuery__
 *
 * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthenticateQuery({
 *   variables: {
 *   },
 * });
 */
export function useAuthenticateQuery(
  baseOptions?: Apollo.QueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export function useAuthenticateLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export type AuthenticateQueryHookResult = ReturnType<
  typeof useAuthenticateQuery
>
export type AuthenticateLazyQueryHookResult = ReturnType<
  typeof useAuthenticateLazyQuery
>
export type AuthenticateQueryResult = Apollo.QueryResult<
  AuthenticateQuery,
  AuthenticateQueryVariables
>
export const CanAccountManageRolesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'CanAccountManageRoles' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roles' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'canAccountManageRoles' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'roles' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'roles' },
                },
              },
            ],
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CanAccountManageRolesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >
} &
  TChildProps
export function withCanAccountManageRoles<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables,
    CanAccountManageRolesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables,
    CanAccountManageRolesProps<TChildProps, TDataName>
  >(CanAccountManageRolesDocument, {
    alias: 'canAccountManageRoles',
    ...operationOptions,
  })
}

/**
 * __useCanAccountManageRolesQuery__
 *
 * To run a query within a React component, call `useCanAccountManageRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCanAccountManageRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCanAccountManageRolesQuery({
 *   variables: {
 *      roles: // value for 'roles'
 *   },
 * });
 */
export function useCanAccountManageRolesQuery(
  baseOptions: Apollo.QueryHookOptions<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >(CanAccountManageRolesDocument, options)
}
export function useCanAccountManageRolesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    CanAccountManageRolesQuery,
    CanAccountManageRolesQueryVariables
  >(CanAccountManageRolesDocument, options)
}
export type CanAccountManageRolesQueryHookResult = ReturnType<
  typeof useCanAccountManageRolesQuery
>
export type CanAccountManageRolesLazyQueryHookResult = ReturnType<
  typeof useCanAccountManageRolesLazyQuery
>
export type CanAccountManageRolesQueryResult = Apollo.QueryResult<
  CanAccountManageRolesQuery,
  CanAccountManageRolesQueryVariables
>
export const CallOtpDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CallOTP' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identity' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'type' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'callOTP' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'usernameOrEmail' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'identity' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'type' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'type' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AuthAccount' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otpExpired' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CallOtpMutationFn = Apollo.MutationFunction<
  CallOtpMutation,
  CallOtpMutationVariables
>
export type CallOtpProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CallOtpMutation,
    CallOtpMutationVariables
  >
} &
  TChildProps
export function withCallOtp<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CallOtpMutation,
    CallOtpMutationVariables,
    CallOtpProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CallOtpMutation,
    CallOtpMutationVariables,
    CallOtpProps<TChildProps, TDataName>
  >(CallOtpDocument, {
    alias: 'callOtp',
    ...operationOptions,
  })
}

/**
 * __useCallOtpMutation__
 *
 * To run a mutation, you first call `useCallOtpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCallOtpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [callOtpMutation, { data, loading, error }] = useCallOtpMutation({
 *   variables: {
 *      identity: // value for 'identity'
 *      type: // value for 'type'
 *   },
 * });
 */
export function useCallOtpMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CallOtpMutation,
    CallOtpMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CallOtpMutation, CallOtpMutationVariables>(
    CallOtpDocument,
    options,
  )
}
export type CallOtpMutationHookResult = ReturnType<typeof useCallOtpMutation>
export type CallOtpMutationResult = Apollo.MutationResult<CallOtpMutation>
export type CallOtpMutationOptions = Apollo.BaseMutationOptions<
  CallOtpMutation,
  CallOtpMutationVariables
>
export const SetPasswordDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SetPassword' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'usernameOrEmail' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'password' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'otp' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'setPassword' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'usernameOrEmail' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'usernameOrEmail' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'password' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'password' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'otp' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'otp' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'AuthAccount' },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otp' } },
          { kind: 'Field', name: { kind: 'Name', value: 'otpExpired' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type SetPasswordMutationFn = Apollo.MutationFunction<
  SetPasswordMutation,
  SetPasswordMutationVariables
>
export type SetPasswordProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    SetPasswordMutation,
    SetPasswordMutationVariables
  >
} &
  TChildProps
export function withSetPassword<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SetPasswordMutation,
    SetPasswordMutationVariables,
    SetPasswordProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SetPasswordMutation,
    SetPasswordMutationVariables,
    SetPasswordProps<TChildProps, TDataName>
  >(SetPasswordDocument, {
    alias: 'setPassword',
    ...operationOptions,
  })
}

/**
 * __useSetPasswordMutation__
 *
 * To run a mutation, you first call `useSetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setPasswordMutation, { data, loading, error }] = useSetPasswordMutation({
 *   variables: {
 *      usernameOrEmail: // value for 'usernameOrEmail'
 *      password: // value for 'password'
 *      otp: // value for 'otp'
 *   },
 * });
 */
export function useSetPasswordMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetPasswordMutation,
    SetPasswordMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SetPasswordMutation, SetPasswordMutationVariables>(
    SetPasswordDocument,
    options,
  )
}
export type SetPasswordMutationHookResult = ReturnType<
  typeof useSetPasswordMutation
>
export type SetPasswordMutationResult =
  Apollo.MutationResult<SetPasswordMutation>
export type SetPasswordMutationOptions = Apollo.BaseMutationOptions<
  SetPasswordMutation,
  SetPasswordMutationVariables
>
export const AccountAvatarDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountAvatar' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AccountAvatarProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >
} &
  TChildProps
export function withAccountAvatar<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >(AccountAvatarDocument, {
    alias: 'accountAvatar',
    ...operationOptions,
  })
}

/**
 * __useAccountAvatarQuery__
 *
 * To run a query within a React component, call `useAccountAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountAvatarQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountAvatarQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export function useAccountAvatarLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export type AccountAvatarQueryHookResult = ReturnType<
  typeof useAccountAvatarQuery
>
export type AccountAvatarLazyQueryHookResult = ReturnType<
  typeof useAccountAvatarLazyQuery
>
export type AccountAvatarQueryResult = Apollo.QueryResult<
  AccountAvatarQuery,
  AccountAvatarQueryVariables
>
export const AccountDisplayNameDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountDisplayName' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AccountDisplayNameProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >
} &
  TChildProps
export function withAccountDisplayName<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >(AccountDisplayNameDocument, {
    alias: 'accountDisplayName',
    ...operationOptions,
  })
}

/**
 * __useAccountDisplayNameQuery__
 *
 * To run a query within a React component, call `useAccountDisplayNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountDisplayNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountDisplayNameQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountDisplayNameQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export function useAccountDisplayNameLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export type AccountDisplayNameQueryHookResult = ReturnType<
  typeof useAccountDisplayNameQuery
>
export type AccountDisplayNameLazyQueryHookResult = ReturnType<
  typeof useAccountDisplayNameLazyQuery
>
export type AccountDisplayNameQueryResult = Apollo.QueryResult<
  AccountDisplayNameQuery,
  AccountDisplayNameQueryVariables
>
export const ConversationCreatedDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'subscription',
      name: { kind: 'Name', value: 'ConversationCreated' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roomId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'conversationCreated' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'roomId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'roomId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roomId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'content' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ConversationCreatedProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ConversationCreatedSubscription,
    ConversationCreatedSubscriptionVariables
  >
} &
  TChildProps
export function withConversationCreated<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ConversationCreatedSubscription,
    ConversationCreatedSubscriptionVariables,
    ConversationCreatedProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withSubscription<
    TProps,
    ConversationCreatedSubscription,
    ConversationCreatedSubscriptionVariables,
    ConversationCreatedProps<TChildProps, TDataName>
  >(ConversationCreatedDocument, {
    alias: 'conversationCreated',
    ...operationOptions,
  })
}

/**
 * __useConversationCreatedSubscription__
 *
 * To run a query within a React component, call `useConversationCreatedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useConversationCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useConversationCreatedSubscription({
 *   variables: {
 *      roomId: // value for 'roomId'
 *   },
 * });
 */
export function useConversationCreatedSubscription(
  baseOptions: Apollo.SubscriptionHookOptions<
    ConversationCreatedSubscription,
    ConversationCreatedSubscriptionVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useSubscription<
    ConversationCreatedSubscription,
    ConversationCreatedSubscriptionVariables
  >(ConversationCreatedDocument, options)
}
export type ConversationCreatedSubscriptionHookResult = ReturnType<
  typeof useConversationCreatedSubscription
>
export type ConversationCreatedSubscriptionResult =
  Apollo.SubscriptionResult<ConversationCreatedSubscription>
export const ConversationsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Conversations' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lastId' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roomId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'conversationPageOptionInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ConversationPageOptionInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'conversations' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lastId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lastId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'roomId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'roomId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'conversationPageOptionInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'conversationPageOptionInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'conversations' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdByAccountId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'roomId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'content' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ConversationsProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ConversationsQuery,
    ConversationsQueryVariables
  >
} &
  TChildProps
export function withConversations<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ConversationsQuery,
    ConversationsQueryVariables,
    ConversationsProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ConversationsQuery,
    ConversationsQueryVariables,
    ConversationsProps<TChildProps, TDataName>
  >(ConversationsDocument, {
    alias: 'conversations',
    ...operationOptions,
  })
}

/**
 * __useConversationsQuery__
 *
 * To run a query within a React component, call `useConversationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useConversationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useConversationsQuery({
 *   variables: {
 *      lastId: // value for 'lastId'
 *      roomId: // value for 'roomId'
 *      conversationPageOptionInput: // value for 'conversationPageOptionInput'
 *   },
 * });
 */
export function useConversationsQuery(
  baseOptions: Apollo.QueryHookOptions<
    ConversationsQuery,
    ConversationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ConversationsQuery, ConversationsQueryVariables>(
    ConversationsDocument,
    options,
  )
}
export function useConversationsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ConversationsQuery,
    ConversationsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ConversationsQuery, ConversationsQueryVariables>(
    ConversationsDocument,
    options,
  )
}
export type ConversationsQueryHookResult = ReturnType<
  typeof useConversationsQuery
>
export type ConversationsLazyQueryHookResult = ReturnType<
  typeof useConversationsLazyQuery
>
export type ConversationsQueryResult = Apollo.QueryResult<
  ConversationsQuery,
  ConversationsQueryVariables
>
export const CreateConversationDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateConversation' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateConversationInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createConversation' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'conversationInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roomId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'content' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateConversationMutationFn = Apollo.MutationFunction<
  CreateConversationMutation,
  CreateConversationMutationVariables
>
export type CreateConversationProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateConversationMutation,
    CreateConversationMutationVariables
  >
} &
  TChildProps
export function withCreateConversation<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateConversationMutation,
    CreateConversationMutationVariables,
    CreateConversationProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateConversationMutation,
    CreateConversationMutationVariables,
    CreateConversationProps<TChildProps, TDataName>
  >(CreateConversationDocument, {
    alias: 'createConversation',
    ...operationOptions,
  })
}

/**
 * __useCreateConversationMutation__
 *
 * To run a mutation, you first call `useCreateConversationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateConversationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createConversationMutation, { data, loading, error }] = useCreateConversationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateConversationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateConversationMutation,
    CreateConversationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateConversationMutation,
    CreateConversationMutationVariables
  >(CreateConversationDocument, options)
}
export type CreateConversationMutationHookResult = ReturnType<
  typeof useCreateConversationMutation
>
export type CreateConversationMutationResult =
  Apollo.MutationResult<CreateConversationMutation>
export type CreateConversationMutationOptions = Apollo.BaseMutationOptions<
  CreateConversationMutation,
  CreateConversationMutationVariables
>
export const FileDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'File' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'file' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'mimeType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'size' } },
                { kind: 'Field', name: { kind: 'Name', value: 'signedUrl' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FileProps<TChildProps = {}, TDataName extends string = 'data'> = {
  [key in TDataName]: ApolloReactHoc.DataValue<FileQuery, FileQueryVariables>
} &
  TChildProps
export function withFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FileQuery,
    FileQueryVariables,
    FileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FileQuery,
    FileQueryVariables,
    FileProps<TChildProps, TDataName>
  >(FileDocument, {
    alias: 'file',
    ...operationOptions,
  })
}

/**
 * __useFileQuery__
 *
 * To run a query within a React component, call `useFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFileQuery(
  baseOptions: Apollo.QueryHookOptions<FileQuery, FileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FileQuery, FileQueryVariables>(FileDocument, options)
}
export function useFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<FileQuery, FileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FileQuery, FileQueryVariables>(
    FileDocument,
    options,
  )
}
export type FileQueryHookResult = ReturnType<typeof useFileQuery>
export type FileLazyQueryHookResult = ReturnType<typeof useFileLazyQuery>
export type FileQueryResult = Apollo.QueryResult<FileQuery, FileQueryVariables>
export const ImageFileDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ImageFile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'file' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'mimeType' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'size' } },
                { kind: 'Field', name: { kind: 'Name', value: 'signedUrl' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ImageFileProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ImageFileQuery,
    ImageFileQueryVariables
  >
} &
  TChildProps
export function withImageFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ImageFileQuery,
    ImageFileQueryVariables,
    ImageFileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ImageFileQuery,
    ImageFileQueryVariables,
    ImageFileProps<TChildProps, TDataName>
  >(ImageFileDocument, {
    alias: 'imageFile',
    ...operationOptions,
  })
}

/**
 * __useImageFileQuery__
 *
 * To run a query within a React component, call `useImageFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useImageFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useImageFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useImageFileQuery(
  baseOptions: Apollo.QueryHookOptions<ImageFileQuery, ImageFileQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ImageFileQuery, ImageFileQueryVariables>(
    ImageFileDocument,
    options,
  )
}
export function useImageFileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ImageFileQuery,
    ImageFileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ImageFileQuery, ImageFileQueryVariables>(
    ImageFileDocument,
    options,
  )
}
export type ImageFileQueryHookResult = ReturnType<typeof useImageFileQuery>
export type ImageFileLazyQueryHookResult = ReturnType<
  typeof useImageFileLazyQuery
>
export type ImageFileQueryResult = Apollo.QueryResult<
  ImageFileQuery,
  ImageFileQueryVariables
>
export const AcademicSubjectDetailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AcademicSubjectDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'imageFileId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AcademicSubjectDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >
} &
  TChildProps
export function withAcademicSubjectDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables,
    AcademicSubjectDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables,
    AcademicSubjectDetailProps<TChildProps, TDataName>
  >(AcademicSubjectDetailDocument, {
    alias: 'academicSubjectDetail',
    ...operationOptions,
  })
}

/**
 * __useAcademicSubjectDetailQuery__
 *
 * To run a query within a React component, call `useAcademicSubjectDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useAcademicSubjectDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAcademicSubjectDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAcademicSubjectDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >(AcademicSubjectDetailDocument, options)
}
export function useAcademicSubjectDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AcademicSubjectDetailQuery,
    AcademicSubjectDetailQueryVariables
  >(AcademicSubjectDetailDocument, options)
}
export type AcademicSubjectDetailQueryHookResult = ReturnType<
  typeof useAcademicSubjectDetailQuery
>
export type AcademicSubjectDetailLazyQueryHookResult = ReturnType<
  typeof useAcademicSubjectDetailLazyQuery
>
export type AcademicSubjectDetailQueryResult = Apollo.QueryResult<
  AcademicSubjectDetailQuery,
  AcademicSubjectDetailQueryVariables
>
export const UpdateFileDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateFile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'newFile' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'Upload' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateFile' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'newFile' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'newFile' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateFileMutationFn = Apollo.MutationFunction<
  UpdateFileMutation,
  UpdateFileMutationVariables
>
export type UpdateFileProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateFileMutation,
    UpdateFileMutationVariables
  >
} &
  TChildProps
export function withUpdateFile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateFileMutation,
    UpdateFileMutationVariables,
    UpdateFileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateFileMutation,
    UpdateFileMutationVariables,
    UpdateFileProps<TChildProps, TDataName>
  >(UpdateFileDocument, {
    alias: 'updateFile',
    ...operationOptions,
  })
}

/**
 * __useUpdateFileMutation__
 *
 * To run a mutation, you first call `useUpdateFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateFileMutation, { data, loading, error }] = useUpdateFileMutation({
 *   variables: {
 *      id: // value for 'id'
 *      newFile: // value for 'newFile'
 *   },
 * });
 */
export function useUpdateFileMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateFileMutation,
    UpdateFileMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateFileMutation, UpdateFileMutationVariables>(
    UpdateFileDocument,
    options,
  )
}
export type UpdateFileMutationHookResult = ReturnType<
  typeof useUpdateFileMutation
>
export type UpdateFileMutationResult = Apollo.MutationResult<UpdateFileMutation>
export type UpdateFileMutationOptions = Apollo.BaseMutationOptions<
  UpdateFileMutation,
  UpdateFileMutationVariables
>
export const AcademicSubjectListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AcademicSubjectList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubjects' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'academicSubjects' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publication' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'imageFileId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AcademicSubjectListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >
} &
  TChildProps
export function withAcademicSubjectList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >(AcademicSubjectListDocument, {
    alias: 'academicSubjectList',
    ...operationOptions,
  })
}

/**
 * __useAcademicSubjectListQuery__
 *
 * To run a query within a React component, call `useAcademicSubjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useAcademicSubjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAcademicSubjectListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *   },
 * });
 */
export function useAcademicSubjectListQuery(
  baseOptions: Apollo.QueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export function useAcademicSubjectListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export type AcademicSubjectListQueryHookResult = ReturnType<
  typeof useAcademicSubjectListQuery
>
export type AcademicSubjectListLazyQueryHookResult = ReturnType<
  typeof useAcademicSubjectListLazyQuery
>
export type AcademicSubjectListQueryResult = Apollo.QueryResult<
  AcademicSubjectListQuery,
  AcademicSubjectListQueryVariables
>
export const AccountProfileDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountProfile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'username' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accountByUserName' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'username' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'username' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AccountProfileProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >
} &
  TChildProps
export function withAccountProfile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >(AccountProfileDocument, {
    alias: 'accountProfile',
    ...operationOptions,
  })
}

/**
 * __useAccountProfileQuery__
 *
 * To run a query within a React component, call `useAccountProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountProfileQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useAccountProfileQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export function useAccountProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export type AccountProfileQueryHookResult = ReturnType<
  typeof useAccountProfileQuery
>
export type AccountProfileLazyQueryHookResult = ReturnType<
  typeof useAccountProfileLazyQuery
>
export type AccountProfileQueryResult = Apollo.QueryResult<
  AccountProfileQuery,
  AccountProfileQueryVariables
>
export const UpdateAccountStatusDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAccountStatus' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'status' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccountStatus' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'status' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'status' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateAccountStatusMutationFn = Apollo.MutationFunction<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export type UpdateAccountStatusProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >
} &
  TChildProps
export function withUpdateAccountStatus<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >(UpdateAccountStatusDocument, {
    alias: 'updateAccountStatus',
    ...operationOptions,
  })
}

/**
 * __useUpdateAccountStatusMutation__
 *
 * To run a mutation, you first call `useUpdateAccountStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountStatusMutation, { data, loading, error }] = useUpdateAccountStatusMutation({
 *   variables: {
 *      id: // value for 'id'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useUpdateAccountStatusMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >(UpdateAccountStatusDocument, options)
}
export type UpdateAccountStatusMutationHookResult = ReturnType<
  typeof useUpdateAccountStatusMutation
>
export type UpdateAccountStatusMutationResult =
  Apollo.MutationResult<UpdateAccountStatusMutation>
export type UpdateAccountStatusMutationOptions = Apollo.BaseMutationOptions<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export const UpdateAccountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'update' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'update' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateAccountMutationFn = Apollo.MutationFunction<
  UpdateAccountMutation,
  UpdateAccountMutationVariables
>
export type UpdateAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >
} &
  TChildProps
export function withUpdateAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAccountMutation,
    UpdateAccountMutationVariables,
    UpdateAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAccountMutation,
    UpdateAccountMutationVariables,
    UpdateAccountProps<TChildProps, TDataName>
  >(UpdateAccountDocument, {
    alias: 'updateAccount',
    ...operationOptions,
  })
}

/**
 * __useUpdateAccountMutation__
 *
 * To run a mutation, you first call `useUpdateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountMutation, { data, loading, error }] = useUpdateAccountMutation({
 *   variables: {
 *      accountId: // value for 'accountId'
 *      update: // value for 'update'
 *   },
 * });
 */
export function useUpdateAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAccountMutation,
    UpdateAccountMutationVariables
  >(UpdateAccountDocument, options)
}
export type UpdateAccountMutationHookResult = ReturnType<
  typeof useUpdateAccountMutation
>
export type UpdateAccountMutationResult =
  Apollo.MutationResult<UpdateAccountMutation>
export type UpdateAccountMutationOptions = Apollo.BaseMutationOptions<
  UpdateAccountMutation,
  UpdateAccountMutationVariables
>
export const UpdateSelfAccountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateSelfAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'update' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'update' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateSelfAccountMutationFn = Apollo.MutationFunction<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export type UpdateSelfAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >
} &
  TChildProps
export function withUpdateSelfAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >(UpdateSelfAccountDocument, {
    alias: 'updateSelfAccount',
    ...operationOptions,
  })
}

/**
 * __useUpdateSelfAccountMutation__
 *
 * To run a mutation, you first call `useUpdateSelfAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSelfAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSelfAccountMutation, { data, loading, error }] = useUpdateSelfAccountMutation({
 *   variables: {
 *      accountId: // value for 'accountId'
 *      update: // value for 'update'
 *   },
 * });
 */
export function useUpdateSelfAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >(UpdateSelfAccountDocument, options)
}
export type UpdateSelfAccountMutationHookResult = ReturnType<
  typeof useUpdateSelfAccountMutation
>
export type UpdateSelfAccountMutationResult =
  Apollo.MutationResult<UpdateSelfAccountMutation>
export type UpdateSelfAccountMutationOptions = Apollo.BaseMutationOptions<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export const ClassworkAssignmentDetailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkAssignmentDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ClassworkAssignmentDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >
} &
  TChildProps
export function withClassworkAssignmentDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables,
    ClassworkAssignmentDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables,
    ClassworkAssignmentDetailProps<TChildProps, TDataName>
  >(ClassworkAssignmentDetailDocument, {
    alias: 'classworkAssignmentDetail',
    ...operationOptions,
  })
}

/**
 * __useClassworkAssignmentDetailQuery__
 *
 * To run a query within a React component, call `useClassworkAssignmentDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkAssignmentDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkAssignmentDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useClassworkAssignmentDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >(ClassworkAssignmentDetailDocument, options)
}
export function useClassworkAssignmentDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkAssignmentDetailQuery,
    ClassworkAssignmentDetailQueryVariables
  >(ClassworkAssignmentDetailDocument, options)
}
export type ClassworkAssignmentDetailQueryHookResult = ReturnType<
  typeof useClassworkAssignmentDetailQuery
>
export type ClassworkAssignmentDetailLazyQueryHookResult = ReturnType<
  typeof useClassworkAssignmentDetailLazyQuery
>
export type ClassworkAssignmentDetailQueryResult = Apollo.QueryResult<
  ClassworkAssignmentDetailQuery,
  ClassworkAssignmentDetailQueryVariables
>
export const AddAttachmentsToClassworkAssignmentDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddAttachmentsToClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkAssignmentId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'attachmentsInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'AddAttachmentsToClassworkInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'addAttachmentsToClassworkAssignment',
            },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'attachmentsInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'attachmentsInput' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkAssignmentId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkAssignmentId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AddAttachmentsToClassworkAssignmentMutationFn =
  Apollo.MutationFunction<
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables
  >
export type AddAttachmentsToClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withAddAttachmentsToClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables,
    AddAttachmentsToClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables,
    AddAttachmentsToClassworkAssignmentProps<TChildProps, TDataName>
  >(AddAttachmentsToClassworkAssignmentDocument, {
    alias: 'addAttachmentsToClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useAddAttachmentsToClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useAddAttachmentsToClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddAttachmentsToClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addAttachmentsToClassworkAssignmentMutation, { data, loading, error }] = useAddAttachmentsToClassworkAssignmentMutation({
 *   variables: {
 *      classworkAssignmentId: // value for 'classworkAssignmentId'
 *      attachmentsInput: // value for 'attachmentsInput'
 *   },
 * });
 */
export function useAddAttachmentsToClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables
  >(AddAttachmentsToClassworkAssignmentDocument, options)
}
export type AddAttachmentsToClassworkAssignmentMutationHookResult = ReturnType<
  typeof useAddAttachmentsToClassworkAssignmentMutation
>
export type AddAttachmentsToClassworkAssignmentMutationResult =
  Apollo.MutationResult<AddAttachmentsToClassworkAssignmentMutation>
export type AddAttachmentsToClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    AddAttachmentsToClassworkAssignmentMutation,
    AddAttachmentsToClassworkAssignmentMutationVariables
  >
export const RemoveAttachmentsFromClassworkAssignmentDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveAttachmentsFromClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkAssignmentId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'attachments' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'removeAttachmentsFromClassworkAssignments',
            },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'attachments' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'attachments' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkAssignmentId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkAssignmentId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type RemoveAttachmentsFromClassworkAssignmentMutationFn =
  Apollo.MutationFunction<
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables
  >
export type RemoveAttachmentsFromClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withRemoveAttachmentsFromClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables,
    RemoveAttachmentsFromClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables,
    RemoveAttachmentsFromClassworkAssignmentProps<TChildProps, TDataName>
  >(RemoveAttachmentsFromClassworkAssignmentDocument, {
    alias: 'removeAttachmentsFromClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useRemoveAttachmentsFromClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useRemoveAttachmentsFromClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveAttachmentsFromClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeAttachmentsFromClassworkAssignmentMutation, { data, loading, error }] = useRemoveAttachmentsFromClassworkAssignmentMutation({
 *   variables: {
 *      classworkAssignmentId: // value for 'classworkAssignmentId'
 *      attachments: // value for 'attachments'
 *   },
 * });
 */
export function useRemoveAttachmentsFromClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables
  >(RemoveAttachmentsFromClassworkAssignmentDocument, options)
}
export type RemoveAttachmentsFromClassworkAssignmentMutationHookResult =
  ReturnType<typeof useRemoveAttachmentsFromClassworkAssignmentMutation>
export type RemoveAttachmentsFromClassworkAssignmentMutationResult =
  Apollo.MutationResult<RemoveAttachmentsFromClassworkAssignmentMutation>
export type RemoveAttachmentsFromClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveAttachmentsFromClassworkAssignmentMutation,
    RemoveAttachmentsFromClassworkAssignmentMutationVariables
  >
export const ListClassworkSubmissionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListClassworkSubmission' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkAssignmentId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkSubmissions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkAssignmentId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkAssignmentId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ListClassworkSubmissionProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables
  >
} &
  TChildProps
export function withListClassworkSubmission<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables,
    ListClassworkSubmissionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables,
    ListClassworkSubmissionProps<TChildProps, TDataName>
  >(ListClassworkSubmissionDocument, {
    alias: 'listClassworkSubmission',
    ...operationOptions,
  })
}

/**
 * __useListClassworkSubmissionQuery__
 *
 * To run a query within a React component, call `useListClassworkSubmissionQuery` and pass it any options that fit your needs.
 * When your component renders, `useListClassworkSubmissionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListClassworkSubmissionQuery({
 *   variables: {
 *      classworkAssignmentId: // value for 'classworkAssignmentId'
 *   },
 * });
 */
export function useListClassworkSubmissionQuery(
  baseOptions: Apollo.QueryHookOptions<
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables
  >(ListClassworkSubmissionDocument, options)
}
export function useListClassworkSubmissionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ListClassworkSubmissionQuery,
    ListClassworkSubmissionQueryVariables
  >(ListClassworkSubmissionDocument, options)
}
export type ListClassworkSubmissionQueryHookResult = ReturnType<
  typeof useListClassworkSubmissionQuery
>
export type ListClassworkSubmissionLazyQueryHookResult = ReturnType<
  typeof useListClassworkSubmissionLazyQuery
>
export type ListClassworkSubmissionQueryResult = Apollo.QueryResult<
  ListClassworkSubmissionQuery,
  ListClassworkSubmissionQueryVariables
>
export const FindClassworkSubmissionByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindClassworkSubmissionById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkSubmissionId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findClassworkSubmissionById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkSubmissionId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkSubmissionId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'submissionFileIds' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'classworkId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'grade' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FindClassworkSubmissionByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables
  >
} &
  TChildProps
export function withFindClassworkSubmissionById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables,
    FindClassworkSubmissionByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables,
    FindClassworkSubmissionByIdProps<TChildProps, TDataName>
  >(FindClassworkSubmissionByIdDocument, {
    alias: 'findClassworkSubmissionById',
    ...operationOptions,
  })
}

/**
 * __useFindClassworkSubmissionByIdQuery__
 *
 * To run a query within a React component, call `useFindClassworkSubmissionByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindClassworkSubmissionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindClassworkSubmissionByIdQuery({
 *   variables: {
 *      classworkSubmissionId: // value for 'classworkSubmissionId'
 *   },
 * });
 */
export function useFindClassworkSubmissionByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables
  >(FindClassworkSubmissionByIdDocument, options)
}
export function useFindClassworkSubmissionByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    FindClassworkSubmissionByIdQuery,
    FindClassworkSubmissionByIdQueryVariables
  >(FindClassworkSubmissionByIdDocument, options)
}
export type FindClassworkSubmissionByIdQueryHookResult = ReturnType<
  typeof useFindClassworkSubmissionByIdQuery
>
export type FindClassworkSubmissionByIdLazyQueryHookResult = ReturnType<
  typeof useFindClassworkSubmissionByIdLazyQuery
>
export type FindClassworkSubmissionByIdQueryResult = Apollo.QueryResult<
  FindClassworkSubmissionByIdQuery,
  FindClassworkSubmissionByIdQueryVariables
>
export const CoursesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Courses' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'academicSubjectId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'orgOfficeId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CoursesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    CoursesQuery,
    CoursesQueryVariables
  >
} &
  TChildProps
export function withCourses<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CoursesQuery,
    CoursesQueryVariables,
    CoursesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CoursesQuery,
    CoursesQueryVariables,
    CoursesProps<TChildProps, TDataName>
  >(CoursesDocument, {
    alias: 'courses',
    ...operationOptions,
  })
}

/**
 * __useCoursesQuery__
 *
 * To run a query within a React component, call `useCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCoursesQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *   },
 * });
 */
export function useCoursesQuery(
  baseOptions: Apollo.QueryHookOptions<CoursesQuery, CoursesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CoursesQuery, CoursesQueryVariables>(
    CoursesDocument,
    options,
  )
}
export function useCoursesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CoursesQuery,
    CoursesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CoursesQuery, CoursesQueryVariables>(
    CoursesDocument,
    options,
  )
}
export type CoursesQueryHookResult = ReturnType<typeof useCoursesQuery>
export type CoursesLazyQueryHookResult = ReturnType<typeof useCoursesLazyQuery>
export type CoursesQueryResult = Apollo.QueryResult<
  CoursesQuery,
  CoursesQueryVariables
>
export const CreateClassworkAssignmentDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateClassworkAssignmentInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createClassworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateClassworkAssignmentMutationFn = Apollo.MutationFunction<
  CreateClassworkAssignmentMutation,
  CreateClassworkAssignmentMutationVariables
>
export type CreateClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withCreateClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables,
    CreateClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables,
    CreateClassworkAssignmentProps<TChildProps, TDataName>
  >(CreateClassworkAssignmentDocument, {
    alias: 'createClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useCreateClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useCreateClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClassworkAssignmentMutation, { data, loading, error }] = useCreateClassworkAssignmentMutation({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >(CreateClassworkAssignmentDocument, options)
}
export type CreateClassworkAssignmentMutationHookResult = ReturnType<
  typeof useCreateClassworkAssignmentMutation
>
export type CreateClassworkAssignmentMutationResult =
  Apollo.MutationResult<CreateClassworkAssignmentMutation>
export type CreateClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    CreateClassworkAssignmentMutation,
    CreateClassworkAssignmentMutationVariables
  >
export const CreateCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateCourseInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateCourseMutationFn = Apollo.MutationFunction<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export type CreateCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >
} &
  TChildProps
export function withCreateCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >(CreateCourseDocument, {
    alias: 'createCourse',
    ...operationOptions,
  })
}

/**
 * __useCreateCourseMutation__
 *
 * To run a mutation, you first call `useCreateCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCourseMutation, { data, loading, error }] = useCreateCourseMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >(CreateCourseDocument, options)
}
export type CreateCourseMutationHookResult = ReturnType<
  typeof useCreateCourseMutation
>
export type CreateCourseMutationResult =
  Apollo.MutationResult<CreateCourseMutation>
export type CreateCourseMutationOptions = Apollo.BaseMutationOptions<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export const CreateAcademicSubjectDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateAcademicSubjectMutationFn = Apollo.MutationFunction<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export type CreateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withCreateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >(CreateAcademicSubjectDocument, {
    alias: 'createAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useCreateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useCreateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAcademicSubjectMutation, { data, loading, error }] = useCreateAcademicSubjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >(CreateAcademicSubjectDocument, options)
}
export type CreateAcademicSubjectMutationHookResult = ReturnType<
  typeof useCreateAcademicSubjectMutation
>
export type CreateAcademicSubjectMutationResult =
  Apollo.MutationResult<CreateAcademicSubjectMutation>
export type CreateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export const FindAcademicSubjectByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindAcademicSubjectById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'imageFileId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FindAcademicSubjectByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >
} &
  TChildProps
export function withFindAcademicSubjectById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >(FindAcademicSubjectByIdDocument, {
    alias: 'findAcademicSubjectById',
    ...operationOptions,
  })
}

/**
 * __useFindAcademicSubjectByIdQuery__
 *
 * To run a query within a React component, call `useFindAcademicSubjectByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindAcademicSubjectByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindAcademicSubjectByIdQuery({
 *   variables: {
 *      Id: // value for 'Id'
 *   },
 * });
 */
export function useFindAcademicSubjectByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export function useFindAcademicSubjectByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export type FindAcademicSubjectByIdQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdQuery
>
export type FindAcademicSubjectByIdLazyQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdLazyQuery
>
export type FindAcademicSubjectByIdQueryResult = Apollo.QueryResult<
  FindAcademicSubjectByIdQuery,
  FindAcademicSubjectByIdQueryVariables
>
export const UpdateAcademicSubjectDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateAcademicSubjectMutationFn = Apollo.MutationFunction<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export type UpdateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectDocument, {
    alias: 'updateAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectMutation, { data, loading, error }] = useUpdateAcademicSubjectMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      updateInput: // value for 'updateInput'
 *   },
 * });
 */
export function useUpdateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >(UpdateAcademicSubjectDocument, options)
}
export type UpdateAcademicSubjectMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectMutation
>
export type UpdateAcademicSubjectMutationResult =
  Apollo.MutationResult<UpdateAcademicSubjectMutation>
export type UpdateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export const UpdateAcademicSubjectPublicationDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubjectPublication' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'publication' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubjectPublication' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'publication' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'publication' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateAcademicSubjectPublicationMutationFn =
  Apollo.MutationFunction<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
export type UpdateAcademicSubjectPublicationProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubjectPublication<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectPublicationDocument, {
    alias: 'updateAcademicSubjectPublication',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectPublicationMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectPublicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectPublicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectPublicationMutation, { data, loading, error }] = useUpdateAcademicSubjectPublicationMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      publication: // value for 'publication'
 *   },
 * });
 */
export function useUpdateAcademicSubjectPublicationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >(UpdateAcademicSubjectPublicationDocument, options)
}
export type UpdateAcademicSubjectPublicationMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectPublicationMutation
>
export type UpdateAcademicSubjectPublicationMutationResult =
  Apollo.MutationResult<UpdateAcademicSubjectPublicationMutation>
export type UpdateAcademicSubjectPublicationMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
export const CreateAccountDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateAccountMutationFn = Apollo.MutationFunction<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export type CreateAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >
} &
  TChildProps
export function withCreateAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >(CreateAccountDocument, {
    alias: 'createAccount',
    ...operationOptions,
  })
}

/**
 * __useCreateAccountMutation__
 *
 * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({
 *   variables: {
 *      accountInput: // value for 'accountInput'
 *   },
 * });
 */
export function useCreateAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >(CreateAccountDocument, options)
}
export type CreateAccountMutationHookResult = ReturnType<
  typeof useCreateAccountMutation
>
export type CreateAccountMutationResult =
  Apollo.MutationResult<CreateAccountMutation>
export type CreateAccountMutationOptions = Apollo.BaseMutationOptions<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export const AddLecturesToCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddLecturesToCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addLecturesToCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lecturerIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lecturerIds' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AddLecturesToCourseMutationFn = Apollo.MutationFunction<
  AddLecturesToCourseMutation,
  AddLecturesToCourseMutationVariables
>
export type AddLecturesToCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >
} &
  TChildProps
export function withAddLecturesToCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables,
    AddLecturesToCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables,
    AddLecturesToCourseProps<TChildProps, TDataName>
  >(AddLecturesToCourseDocument, {
    alias: 'addLecturesToCourse',
    ...operationOptions,
  })
}

/**
 * __useAddLecturesToCourseMutation__
 *
 * To run a mutation, you first call `useAddLecturesToCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddLecturesToCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addLecturesToCourseMutation, { data, loading, error }] = useAddLecturesToCourseMutation({
 *   variables: {
 *      lecturerIds: // value for 'lecturerIds'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useAddLecturesToCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddLecturesToCourseMutation,
    AddLecturesToCourseMutationVariables
  >(AddLecturesToCourseDocument, options)
}
export type AddLecturesToCourseMutationHookResult = ReturnType<
  typeof useAddLecturesToCourseMutation
>
export type AddLecturesToCourseMutationResult =
  Apollo.MutationResult<AddLecturesToCourseMutation>
export type AddLecturesToCourseMutationOptions = Apollo.BaseMutationOptions<
  AddLecturesToCourseMutation,
  AddLecturesToCourseMutationVariables
>
export const AddStudentToCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddStudentToCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addStudentsToCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'studentIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'studentIds' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AddStudentToCourseMutationFn = Apollo.MutationFunction<
  AddStudentToCourseMutation,
  AddStudentToCourseMutationVariables
>
export type AddStudentToCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >
} &
  TChildProps
export function withAddStudentToCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables,
    AddStudentToCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables,
    AddStudentToCourseProps<TChildProps, TDataName>
  >(AddStudentToCourseDocument, {
    alias: 'addStudentToCourse',
    ...operationOptions,
  })
}

/**
 * __useAddStudentToCourseMutation__
 *
 * To run a mutation, you first call `useAddStudentToCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddStudentToCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addStudentToCourseMutation, { data, loading, error }] = useAddStudentToCourseMutation({
 *   variables: {
 *      studentIds: // value for 'studentIds'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useAddStudentToCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddStudentToCourseMutation,
    AddStudentToCourseMutationVariables
  >(AddStudentToCourseDocument, options)
}
export type AddStudentToCourseMutationHookResult = ReturnType<
  typeof useAddStudentToCourseMutation
>
export type AddStudentToCourseMutationResult =
  Apollo.MutationResult<AddStudentToCourseMutation>
export type AddStudentToCourseMutationOptions = Apollo.BaseMutationOptions<
  AddStudentToCourseMutation,
  AddStudentToCourseMutationVariables
>
export const FindCourseByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindCourseById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findCourseById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'tuitionFee' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FindCourseByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >
} &
  TChildProps
export function withFindCourseById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables,
    FindCourseByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables,
    FindCourseByIdProps<TChildProps, TDataName>
  >(FindCourseByIdDocument, {
    alias: 'findCourseById',
    ...operationOptions,
  })
}

/**
 * __useFindCourseByIdQuery__
 *
 * To run a query within a React component, call `useFindCourseByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindCourseByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindCourseByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFindCourseByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FindCourseByIdQuery, FindCourseByIdQueryVariables>(
    FindCourseByIdDocument,
    options,
  )
}
export function useFindCourseByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindCourseByIdQuery,
    FindCourseByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FindCourseByIdQuery, FindCourseByIdQueryVariables>(
    FindCourseByIdDocument,
    options,
  )
}
export type FindCourseByIdQueryHookResult = ReturnType<
  typeof useFindCourseByIdQuery
>
export type FindCourseByIdLazyQueryHookResult = ReturnType<
  typeof useFindCourseByIdLazyQuery
>
export type FindCourseByIdQueryResult = Apollo.QueryResult<
  FindCourseByIdQuery,
  FindCourseByIdQueryVariables
>
export const RemoveLecturersFromCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveLecturersFromCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeLecturersFromCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lecturerIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lecturerIds' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type RemoveLecturersFromCourseMutationFn = Apollo.MutationFunction<
  RemoveLecturersFromCourseMutation,
  RemoveLecturersFromCourseMutationVariables
>
export type RemoveLecturersFromCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >
} &
  TChildProps
export function withRemoveLecturersFromCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables,
    RemoveLecturersFromCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables,
    RemoveLecturersFromCourseProps<TChildProps, TDataName>
  >(RemoveLecturersFromCourseDocument, {
    alias: 'removeLecturersFromCourse',
    ...operationOptions,
  })
}

/**
 * __useRemoveLecturersFromCourseMutation__
 *
 * To run a mutation, you first call `useRemoveLecturersFromCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveLecturersFromCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeLecturersFromCourseMutation, { data, loading, error }] = useRemoveLecturersFromCourseMutation({
 *   variables: {
 *      lecturerIds: // value for 'lecturerIds'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemoveLecturersFromCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >(RemoveLecturersFromCourseDocument, options)
}
export type RemoveLecturersFromCourseMutationHookResult = ReturnType<
  typeof useRemoveLecturersFromCourseMutation
>
export type RemoveLecturersFromCourseMutationResult =
  Apollo.MutationResult<RemoveLecturersFromCourseMutation>
export type RemoveLecturersFromCourseMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveLecturersFromCourseMutation,
    RemoveLecturersFromCourseMutationVariables
  >
export const RemoveStudentsFromCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveStudentsFromCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'ID' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeStudentsFromCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'studentIds' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'studentIds' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type RemoveStudentsFromCourseMutationFn = Apollo.MutationFunction<
  RemoveStudentsFromCourseMutation,
  RemoveStudentsFromCourseMutationVariables
>
export type RemoveStudentsFromCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >
} &
  TChildProps
export function withRemoveStudentsFromCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables,
    RemoveStudentsFromCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables,
    RemoveStudentsFromCourseProps<TChildProps, TDataName>
  >(RemoveStudentsFromCourseDocument, {
    alias: 'removeStudentsFromCourse',
    ...operationOptions,
  })
}

/**
 * __useRemoveStudentsFromCourseMutation__
 *
 * To run a mutation, you first call `useRemoveStudentsFromCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveStudentsFromCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeStudentsFromCourseMutation, { data, loading, error }] = useRemoveStudentsFromCourseMutation({
 *   variables: {
 *      studentIds: // value for 'studentIds'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRemoveStudentsFromCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >(RemoveStudentsFromCourseDocument, options)
}
export type RemoveStudentsFromCourseMutationHookResult = ReturnType<
  typeof useRemoveStudentsFromCourseMutation
>
export type RemoveStudentsFromCourseMutationResult =
  Apollo.MutationResult<RemoveStudentsFromCourseMutation>
export type RemoveStudentsFromCourseMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveStudentsFromCourseMutation,
    RemoveStudentsFromCourseMutationVariables
  >
export const OrgAccountListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgAccountList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roles' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgAccounts' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'roles' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'roles' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'accounts' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'displayName' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'username' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'availability' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'status' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type OrgAccountListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >
} &
  TChildProps
export function withOrgAccountList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >(OrgAccountListDocument, {
    alias: 'orgAccountList',
    ...operationOptions,
  })
}

/**
 * __useOrgAccountListQuery__
 *
 * To run a query within a React component, call `useOrgAccountListQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgAccountListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgAccountListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *      roles: // value for 'roles'
 *   },
 * });
 */
export function useOrgAccountListQuery(
  baseOptions: Apollo.QueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export function useOrgAccountListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export type OrgAccountListQueryHookResult = ReturnType<
  typeof useOrgAccountListQuery
>
export type OrgAccountListLazyQueryHookResult = ReturnType<
  typeof useOrgAccountListLazyQuery
>
export type OrgAccountListQueryResult = Apollo.QueryResult<
  OrgAccountListQuery,
  OrgAccountListQueryVariables
>
export const ListOrgOfficesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListOrgOffices' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffices' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ListOrgOfficesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >
} &
  TChildProps
export function withListOrgOffices<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >(ListOrgOfficesDocument, {
    alias: 'listOrgOffices',
    ...operationOptions,
  })
}

/**
 * __useListOrgOfficesQuery__
 *
 * To run a query within a React component, call `useListOrgOfficesQuery` and pass it any options that fit your needs.
 * When your component renders, `useListOrgOfficesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListOrgOfficesQuery({
 *   variables: {
 *   },
 * });
 */
export function useListOrgOfficesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export function useListOrgOfficesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export type ListOrgOfficesQueryHookResult = ReturnType<
  typeof useListOrgOfficesQuery
>
export type ListOrgOfficesLazyQueryHookResult = ReturnType<
  typeof useListOrgOfficesLazyQuery
>
export type ListOrgOfficesQueryResult = Apollo.QueryResult<
  ListOrgOfficesQuery,
  ListOrgOfficesQueryVariables
>
export const CreateOrgOfficeDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateOrgOfficeMutationFn = Apollo.MutationFunction<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export type CreateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withCreateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >(CreateOrgOfficeDocument, {
    alias: 'createOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useCreateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useCreateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrgOfficeMutation, { data, loading, error }] = useCreateOrgOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >(CreateOrgOfficeDocument, options)
}
export type CreateOrgOfficeMutationHookResult = ReturnType<
  typeof useCreateOrgOfficeMutation
>
export type CreateOrgOfficeMutationResult =
  Apollo.MutationResult<CreateOrgOfficeMutation>
export type CreateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export const UpdateOrgOfficeDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateOrgOfficeMutationFn = Apollo.MutationFunction<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export type UpdateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withUpdateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >(UpdateOrgOfficeDocument, {
    alias: 'updateOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useUpdateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useUpdateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrgOfficeMutation, { data, loading, error }] = useUpdateOrgOfficeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >(UpdateOrgOfficeDocument, options)
}
export type UpdateOrgOfficeMutationHookResult = ReturnType<
  typeof useUpdateOrgOfficeMutation
>
export type UpdateOrgOfficeMutationResult =
  Apollo.MutationResult<UpdateOrgOfficeMutation>
export type UpdateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export const OrgOfficeDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type OrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >
} &
  TChildProps
export function withOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >(OrgOfficeDocument, {
    alias: 'orgOffice',
    ...operationOptions,
  })
}

/**
 * __useOrgOfficeQuery__
 *
 * To run a query within a React component, call `useOrgOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgOfficeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useOrgOfficeQuery(
  baseOptions: Apollo.QueryHookOptions<OrgOfficeQuery, OrgOfficeQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export function useOrgOfficeLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export type OrgOfficeQueryHookResult = ReturnType<typeof useOrgOfficeQuery>
export type OrgOfficeLazyQueryHookResult = ReturnType<
  typeof useOrgOfficeLazyQuery
>
export type OrgOfficeQueryResult = Apollo.QueryResult<
  OrgOfficeQuery,
  OrgOfficeQueryVariables
>
export const CreateClassworkSubmissionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateClassworkSubmission' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'CreateClassworkSubmissionInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateClassworkSubmissionInput' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createClassworkSubmission' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'createClassworkSubmissionInput' },
                value: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'CreateClassworkSubmissionInput',
                  },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'submissionFileIds' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateClassworkSubmissionMutationFn = Apollo.MutationFunction<
  CreateClassworkSubmissionMutation,
  CreateClassworkSubmissionMutationVariables
>
export type CreateClassworkSubmissionProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables
  >
} &
  TChildProps
export function withCreateClassworkSubmission<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables,
    CreateClassworkSubmissionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables,
    CreateClassworkSubmissionProps<TChildProps, TDataName>
  >(CreateClassworkSubmissionDocument, {
    alias: 'createClassworkSubmission',
    ...operationOptions,
  })
}

/**
 * __useCreateClassworkSubmissionMutation__
 *
 * To run a mutation, you first call `useCreateClassworkSubmissionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClassworkSubmissionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClassworkSubmissionMutation, { data, loading, error }] = useCreateClassworkSubmissionMutation({
 *   variables: {
 *      CreateClassworkSubmissionInput: // value for 'CreateClassworkSubmissionInput'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useCreateClassworkSubmissionMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables
  >(CreateClassworkSubmissionDocument, options)
}
export type CreateClassworkSubmissionMutationHookResult = ReturnType<
  typeof useCreateClassworkSubmissionMutation
>
export type CreateClassworkSubmissionMutationResult =
  Apollo.MutationResult<CreateClassworkSubmissionMutation>
export type CreateClassworkSubmissionMutationOptions =
  Apollo.BaseMutationOptions<
    CreateClassworkSubmissionMutation,
    CreateClassworkSubmissionMutationVariables
  >
export const FindOneClassworkSubmissionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindOneClassworkSubmission' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'ClassworkAssignment' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findOneClassworkSubmission' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'ClassworkAssignment' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'ClassworkAssignment' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'classworkId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FindOneClassworkSubmissionProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables
  >
} &
  TChildProps
export function withFindOneClassworkSubmission<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables,
    FindOneClassworkSubmissionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables,
    FindOneClassworkSubmissionProps<TChildProps, TDataName>
  >(FindOneClassworkSubmissionDocument, {
    alias: 'findOneClassworkSubmission',
    ...operationOptions,
  })
}

/**
 * __useFindOneClassworkSubmissionQuery__
 *
 * To run a query within a React component, call `useFindOneClassworkSubmissionQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindOneClassworkSubmissionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindOneClassworkSubmissionQuery({
 *   variables: {
 *      ClassworkAssignment: // value for 'ClassworkAssignment'
 *   },
 * });
 */
export function useFindOneClassworkSubmissionQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables
  >(FindOneClassworkSubmissionDocument, options)
}
export function useFindOneClassworkSubmissionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    FindOneClassworkSubmissionQuery,
    FindOneClassworkSubmissionQueryVariables
  >(FindOneClassworkSubmissionDocument, options)
}
export type FindOneClassworkSubmissionQueryHookResult = ReturnType<
  typeof useFindOneClassworkSubmissionQuery
>
export type FindOneClassworkSubmissionLazyQueryHookResult = ReturnType<
  typeof useFindOneClassworkSubmissionLazyQuery
>
export type FindOneClassworkSubmissionQueryResult = Apollo.QueryResult<
  FindOneClassworkSubmissionQuery,
  FindOneClassworkSubmissionQueryVariables
>
export const ListClassworkAssignmentsByStudentIdInCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: {
        kind: 'Name',
        value: 'ListClassworkAssignmentsByStudentIdInCourse',
      },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'Input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ClassworkAssignmentByStudentIdInCourseInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'listClassworkAssignmentsByStudentIdInCourse',
            },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'Input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'list' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'classworkAssignmentId' },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'classworkAssignmentsTitle',
                        },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'dueDate' },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'classworkSubmissionGrade',
                        },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'classworkSubmissionGrade',
                        },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'classworkSubmissionUpdatedAt',
                        },
                      },
                      {
                        kind: 'Field',
                        name: {
                          kind: 'Name',
                          value: 'classworkSubmissionDescription',
                        },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ListClassworkAssignmentsByStudentIdInCourseProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >
} &
  TChildProps
export function withListClassworkAssignmentsByStudentIdInCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables,
    ListClassworkAssignmentsByStudentIdInCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables,
    ListClassworkAssignmentsByStudentIdInCourseProps<TChildProps, TDataName>
  >(ListClassworkAssignmentsByStudentIdInCourseDocument, {
    alias: 'listClassworkAssignmentsByStudentIdInCourse',
    ...operationOptions,
  })
}

/**
 * __useListClassworkAssignmentsByStudentIdInCourseQuery__
 *
 * To run a query within a React component, call `useListClassworkAssignmentsByStudentIdInCourseQuery` and pass it any options that fit your needs.
 * When your component renders, `useListClassworkAssignmentsByStudentIdInCourseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListClassworkAssignmentsByStudentIdInCourseQuery({
 *   variables: {
 *      Input: // value for 'Input'
 *   },
 * });
 */
export function useListClassworkAssignmentsByStudentIdInCourseQuery(
  baseOptions: Apollo.QueryHookOptions<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >(ListClassworkAssignmentsByStudentIdInCourseDocument, options)
}
export function useListClassworkAssignmentsByStudentIdInCourseLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >(ListClassworkAssignmentsByStudentIdInCourseDocument, options)
}
export type ListClassworkAssignmentsByStudentIdInCourseQueryHookResult =
  ReturnType<typeof useListClassworkAssignmentsByStudentIdInCourseQuery>
export type ListClassworkAssignmentsByStudentIdInCourseLazyQueryHookResult =
  ReturnType<typeof useListClassworkAssignmentsByStudentIdInCourseLazyQuery>
export type ListClassworkAssignmentsByStudentIdInCourseQueryResult =
  Apollo.QueryResult<
    ListClassworkAssignmentsByStudentIdInCourseQuery,
    ListClassworkAssignmentsByStudentIdInCourseQueryVariables
  >
export const QuizzesStudyingDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'QuizzesStudying' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'quizzesStudying' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'courseId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'publicationState' },
                      value: { kind: 'EnumValue', value: 'Published' },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'quizzes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'questionIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'duration' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdByAccountId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuizzesStudyingProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables
  >
} &
  TChildProps
export function withQuizzesStudying<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables,
    QuizzesStudyingProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables,
    QuizzesStudyingProps<TChildProps, TDataName>
  >(QuizzesStudyingDocument, {
    alias: 'quizzesStudying',
    ...operationOptions,
  })
}

/**
 * __useQuizzesStudyingQuery__
 *
 * To run a query within a React component, call `useQuizzesStudyingQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuizzesStudyingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuizzesStudyingQuery({
 *   variables: {
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useQuizzesStudyingQuery(
  baseOptions: Apollo.QueryHookOptions<
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuizzesStudyingQuery, QuizzesStudyingQueryVariables>(
    QuizzesStudyingDocument,
    options,
  )
}
export function useQuizzesStudyingLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    QuizzesStudyingQuery,
    QuizzesStudyingQueryVariables
  >(QuizzesStudyingDocument, options)
}
export type QuizzesStudyingQueryHookResult = ReturnType<
  typeof useQuizzesStudyingQuery
>
export type QuizzesStudyingLazyQueryHookResult = ReturnType<
  typeof useQuizzesStudyingLazyQuery
>
export type QuizzesStudyingQueryResult = Apollo.QueryResult<
  QuizzesStudyingQuery,
  QuizzesStudyingQueryVariables
>
export const StartQuizDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'StartQuiz' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateQuizSubmitInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createQuizSubmit' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'quizId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'scores' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'questionIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'questionChoiceIds' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type StartQuizMutationFn = Apollo.MutationFunction<
  StartQuizMutation,
  StartQuizMutationVariables
>
export type StartQuizProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    StartQuizMutation,
    StartQuizMutationVariables
  >
} &
  TChildProps
export function withStartQuiz<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    StartQuizMutation,
    StartQuizMutationVariables,
    StartQuizProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    StartQuizMutation,
    StartQuizMutationVariables,
    StartQuizProps<TChildProps, TDataName>
  >(StartQuizDocument, {
    alias: 'startQuiz',
    ...operationOptions,
  })
}

/**
 * __useStartQuizMutation__
 *
 * To run a mutation, you first call `useStartQuizMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartQuizMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startQuizMutation, { data, loading, error }] = useStartQuizMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useStartQuizMutation(
  baseOptions?: Apollo.MutationHookOptions<
    StartQuizMutation,
    StartQuizMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<StartQuizMutation, StartQuizMutationVariables>(
    StartQuizDocument,
    options,
  )
}
export type StartQuizMutationHookResult = ReturnType<
  typeof useStartQuizMutation
>
export type StartQuizMutationResult = Apollo.MutationResult<StartQuizMutation>
export type StartQuizMutationOptions = Apollo.BaseMutationOptions<
  StartQuizMutation,
  StartQuizMutationVariables
>
export const QuizSubmitDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'QuizSubmit' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'quizId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'quizSubmit' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'quizId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'quizId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'quizId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'scores' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'questionIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'questionChoiceIds' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuizSubmitProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    QuizSubmitQuery,
    QuizSubmitQueryVariables
  >
} &
  TChildProps
export function withQuizSubmit<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuizSubmitQuery,
    QuizSubmitQueryVariables,
    QuizSubmitProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuizSubmitQuery,
    QuizSubmitQueryVariables,
    QuizSubmitProps<TChildProps, TDataName>
  >(QuizSubmitDocument, {
    alias: 'quizSubmit',
    ...operationOptions,
  })
}

/**
 * __useQuizSubmitQuery__
 *
 * To run a query within a React component, call `useQuizSubmitQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuizSubmitQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuizSubmitQuery({
 *   variables: {
 *      quizId: // value for 'quizId'
 *   },
 * });
 */
export function useQuizSubmitQuery(
  baseOptions: Apollo.QueryHookOptions<
    QuizSubmitQuery,
    QuizSubmitQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuizSubmitQuery, QuizSubmitQueryVariables>(
    QuizSubmitDocument,
    options,
  )
}
export function useQuizSubmitLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QuizSubmitQuery,
    QuizSubmitQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QuizSubmitQuery, QuizSubmitQueryVariables>(
    QuizSubmitDocument,
    options,
  )
}
export type QuizSubmitQueryHookResult = ReturnType<typeof useQuizSubmitQuery>
export type QuizSubmitLazyQueryHookResult = ReturnType<
  typeof useQuizSubmitLazyQuery
>
export type QuizSubmitQueryResult = Apollo.QueryResult<
  QuizSubmitQuery,
  QuizSubmitQueryVariables
>
export const SubmitQuizDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SubmitQuiz' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'SubmitQuizInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'submitQuiz' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'quizId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'scores' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'questionIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'questionChoiceIds' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type SubmitQuizMutationFn = Apollo.MutationFunction<
  SubmitQuizMutation,
  SubmitQuizMutationVariables
>
export type SubmitQuizProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    SubmitQuizMutation,
    SubmitQuizMutationVariables
  >
} &
  TChildProps
export function withSubmitQuiz<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SubmitQuizMutation,
    SubmitQuizMutationVariables,
    SubmitQuizProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SubmitQuizMutation,
    SubmitQuizMutationVariables,
    SubmitQuizProps<TChildProps, TDataName>
  >(SubmitQuizDocument, {
    alias: 'submitQuiz',
    ...operationOptions,
  })
}

/**
 * __useSubmitQuizMutation__
 *
 * To run a mutation, you first call `useSubmitQuizMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitQuizMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitQuizMutation, { data, loading, error }] = useSubmitQuizMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSubmitQuizMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SubmitQuizMutation,
    SubmitQuizMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SubmitQuizMutation, SubmitQuizMutationVariables>(
    SubmitQuizDocument,
    options,
  )
}
export type SubmitQuizMutationHookResult = ReturnType<
  typeof useSubmitQuizMutation
>
export type SubmitQuizMutationResult = Apollo.MutationResult<SubmitQuizMutation>
export type SubmitQuizMutationOptions = Apollo.BaseMutationOptions<
  SubmitQuizMutation,
  SubmitQuizMutationVariables
>
export const StudyingCourseListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'StudyingCourseList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'studentIds' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'studentIds' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'studentIds' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'studentIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type StudyingCourseListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >
} &
  TChildProps
export function withStudyingCourseList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables,
    StudyingCourseListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables,
    StudyingCourseListProps<TChildProps, TDataName>
  >(StudyingCourseListDocument, {
    alias: 'studyingCourseList',
    ...operationOptions,
  })
}

/**
 * __useStudyingCourseListQuery__
 *
 * To run a query within a React component, call `useStudyingCourseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useStudyingCourseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStudyingCourseListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *      studentIds: // value for 'studentIds'
 *   },
 * });
 */
export function useStudyingCourseListQuery(
  baseOptions: Apollo.QueryHookOptions<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >(StudyingCourseListDocument, options)
}
export function useStudyingCourseListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    StudyingCourseListQuery,
    StudyingCourseListQueryVariables
  >(StudyingCourseListDocument, options)
}
export type StudyingCourseListQueryHookResult = ReturnType<
  typeof useStudyingCourseListQuery
>
export type StudyingCourseListLazyQueryHookResult = ReturnType<
  typeof useStudyingCourseListLazyQuery
>
export type StudyingCourseListQueryResult = Apollo.QueryResult<
  StudyingCourseListQuery,
  StudyingCourseListQueryVariables
>
export const ClassworkAssignmentListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkAssignmentList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkAssignments' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'classworkAssignments' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'type' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'attachments' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'dueDate' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ClassworkAssignmentListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >
} &
  TChildProps
export function withClassworkAssignmentList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables,
    ClassworkAssignmentListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables,
    ClassworkAssignmentListProps<TChildProps, TDataName>
  >(ClassworkAssignmentListDocument, {
    alias: 'classworkAssignmentList',
    ...operationOptions,
  })
}

/**
 * __useClassworkAssignmentListQuery__
 *
 * To run a query within a React component, call `useClassworkAssignmentListQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkAssignmentListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkAssignmentListQuery({
 *   variables: {
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useClassworkAssignmentListQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >(ClassworkAssignmentListDocument, options)
}
export function useClassworkAssignmentListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkAssignmentListQuery,
    ClassworkAssignmentListQueryVariables
  >(ClassworkAssignmentListDocument, options)
}
export type ClassworkAssignmentListQueryHookResult = ReturnType<
  typeof useClassworkAssignmentListQuery
>
export type ClassworkAssignmentListLazyQueryHookResult = ReturnType<
  typeof useClassworkAssignmentListLazyQuery
>
export type ClassworkAssignmentListQueryResult = Apollo.QueryResult<
  ClassworkAssignmentListQuery,
  ClassworkAssignmentListQueryVariables
>
export const CreateLessonDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateLesson' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'createLessonInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateLessonInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createLesson' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'createLessonInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'createLessonInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'updatedByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'endTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'absentStudentIds' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'lecturerComment' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'avgNumberOfStars' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateLessonMutationFn = Apollo.MutationFunction<
  CreateLessonMutation,
  CreateLessonMutationVariables
>
export type CreateLessonProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateLessonMutation,
    CreateLessonMutationVariables
  >
} &
  TChildProps
export function withCreateLesson<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateLessonMutation,
    CreateLessonMutationVariables,
    CreateLessonProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateLessonMutation,
    CreateLessonMutationVariables,
    CreateLessonProps<TChildProps, TDataName>
  >(CreateLessonDocument, {
    alias: 'createLesson',
    ...operationOptions,
  })
}

/**
 * __useCreateLessonMutation__
 *
 * To run a mutation, you first call `useCreateLessonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLessonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLessonMutation, { data, loading, error }] = useCreateLessonMutation({
 *   variables: {
 *      createLessonInput: // value for 'createLessonInput'
 *   },
 * });
 */
export function useCreateLessonMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateLessonMutation,
    CreateLessonMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateLessonMutation,
    CreateLessonMutationVariables
  >(CreateLessonDocument, options)
}
export type CreateLessonMutationHookResult = ReturnType<
  typeof useCreateLessonMutation
>
export type CreateLessonMutationResult =
  Apollo.MutationResult<CreateLessonMutation>
export type CreateLessonMutationOptions = Apollo.BaseMutationOptions<
  CreateLessonMutation,
  CreateLessonMutationVariables
>
export const ListLessonsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListLessons' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'filter' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'LessonsFilterInput' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'pageOptions' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'PageOptionsInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lessons' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'filter' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'pageOptions' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'lessons' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'updatedAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdByAccountId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startTime' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'endTime' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'absentStudentIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerComment' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'avgNumberOfStars' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ListLessonsProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListLessonsQuery,
    ListLessonsQueryVariables
  >
} &
  TChildProps
export function withListLessons<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListLessonsQuery,
    ListLessonsQueryVariables,
    ListLessonsProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListLessonsQuery,
    ListLessonsQueryVariables,
    ListLessonsProps<TChildProps, TDataName>
  >(ListLessonsDocument, {
    alias: 'listLessons',
    ...operationOptions,
  })
}

/**
 * __useListLessonsQuery__
 *
 * To run a query within a React component, call `useListLessonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useListLessonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListLessonsQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      pageOptions: // value for 'pageOptions'
 *   },
 * });
 */
export function useListLessonsQuery(
  baseOptions: Apollo.QueryHookOptions<
    ListLessonsQuery,
    ListLessonsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ListLessonsQuery, ListLessonsQueryVariables>(
    ListLessonsDocument,
    options,
  )
}
export function useListLessonsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListLessonsQuery,
    ListLessonsQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ListLessonsQuery, ListLessonsQueryVariables>(
    ListLessonsDocument,
    options,
  )
}
export type ListLessonsQueryHookResult = ReturnType<typeof useListLessonsQuery>
export type ListLessonsLazyQueryHookResult = ReturnType<
  typeof useListLessonsLazyQuery
>
export type ListLessonsQueryResult = Apollo.QueryResult<
  ListLessonsQuery,
  ListLessonsQueryVariables
>
export const FindLessonByIdDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindLessonById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lessonId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findLessonById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lessonId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lessonId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'updatedAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'endTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'absentStudentIds' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'lecturerComment' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'avgNumberOfStars' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type FindLessonByIdProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindLessonByIdQuery,
    FindLessonByIdQueryVariables
  >
} &
  TChildProps
export function withFindLessonById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindLessonByIdQuery,
    FindLessonByIdQueryVariables,
    FindLessonByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindLessonByIdQuery,
    FindLessonByIdQueryVariables,
    FindLessonByIdProps<TChildProps, TDataName>
  >(FindLessonByIdDocument, {
    alias: 'findLessonById',
    ...operationOptions,
  })
}

/**
 * __useFindLessonByIdQuery__
 *
 * To run a query within a React component, call `useFindLessonByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindLessonByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindLessonByIdQuery({
 *   variables: {
 *      lessonId: // value for 'lessonId'
 *   },
 * });
 */
export function useFindLessonByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindLessonByIdQuery,
    FindLessonByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<FindLessonByIdQuery, FindLessonByIdQueryVariables>(
    FindLessonByIdDocument,
    options,
  )
}
export function useFindLessonByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindLessonByIdQuery,
    FindLessonByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<FindLessonByIdQuery, FindLessonByIdQueryVariables>(
    FindLessonByIdDocument,
    options,
  )
}
export type FindLessonByIdQueryHookResult = ReturnType<
  typeof useFindLessonByIdQuery
>
export type FindLessonByIdLazyQueryHookResult = ReturnType<
  typeof useFindLessonByIdLazyQuery
>
export type FindLessonByIdQueryResult = Apollo.QueryResult<
  FindLessonByIdQuery,
  FindLessonByIdQueryVariables
>
export const UpdateLessonDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateLesson' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lessonId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateLessonInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateLesson' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'lessonId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'lessonId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'updatedAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'endTime' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateLessonMutationFn = Apollo.MutationFunction<
  UpdateLessonMutation,
  UpdateLessonMutationVariables
>
export type UpdateLessonProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateLessonMutation,
    UpdateLessonMutationVariables
  >
} &
  TChildProps
export function withUpdateLesson<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateLessonMutation,
    UpdateLessonMutationVariables,
    UpdateLessonProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateLessonMutation,
    UpdateLessonMutationVariables,
    UpdateLessonProps<TChildProps, TDataName>
  >(UpdateLessonDocument, {
    alias: 'updateLesson',
    ...operationOptions,
  })
}

/**
 * __useUpdateLessonMutation__
 *
 * To run a mutation, you first call `useUpdateLessonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLessonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLessonMutation, { data, loading, error }] = useUpdateLessonMutation({
 *   variables: {
 *      lessonId: // value for 'lessonId'
 *      courseId: // value for 'courseId'
 *      updateInput: // value for 'updateInput'
 *   },
 * });
 */
export function useUpdateLessonMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateLessonMutation,
    UpdateLessonMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateLessonMutation,
    UpdateLessonMutationVariables
  >(UpdateLessonDocument, options)
}
export type UpdateLessonMutationHookResult = ReturnType<
  typeof useUpdateLessonMutation
>
export type UpdateLessonMutationResult =
  Apollo.MutationResult<UpdateLessonMutation>
export type UpdateLessonMutationOptions = Apollo.BaseMutationOptions<
  UpdateLessonMutation,
  UpdateLessonMutationVariables
>
export const ClassworkMaterialsListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ClassworkMaterialsList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkMaterials' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'classworkMaterials' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'updatedAt' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'attachments' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type ClassworkMaterialsListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >
} &
  TChildProps
export function withClassworkMaterialsList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables,
    ClassworkMaterialsListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables,
    ClassworkMaterialsListProps<TChildProps, TDataName>
  >(ClassworkMaterialsListDocument, {
    alias: 'classworkMaterialsList',
    ...operationOptions,
  })
}

/**
 * __useClassworkMaterialsListQuery__
 *
 * To run a query within a React component, call `useClassworkMaterialsListQuery` and pass it any options that fit your needs.
 * When your component renders, `useClassworkMaterialsListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClassworkMaterialsListQuery({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useClassworkMaterialsListQuery(
  baseOptions: Apollo.QueryHookOptions<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >(ClassworkMaterialsListDocument, options)
}
export function useClassworkMaterialsListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    ClassworkMaterialsListQuery,
    ClassworkMaterialsListQueryVariables
  >(ClassworkMaterialsListDocument, options)
}
export type ClassworkMaterialsListQueryHookResult = ReturnType<
  typeof useClassworkMaterialsListQuery
>
export type ClassworkMaterialsListLazyQueryHookResult = ReturnType<
  typeof useClassworkMaterialsListLazyQuery
>
export type ClassworkMaterialsListQueryResult = Apollo.QueryResult<
  ClassworkMaterialsListQuery,
  ClassworkMaterialsListQueryVariables
>
export const CreateClassworkMaterialDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateClassworkMaterial' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'CreateClassworkMaterialInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateClassworkMaterialInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createClassworkMaterial' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'CreateClassworkMaterialInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'CreateClassworkMaterialInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateClassworkMaterialMutationFn = Apollo.MutationFunction<
  CreateClassworkMaterialMutation,
  CreateClassworkMaterialMutationVariables
>
export type CreateClassworkMaterialProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateClassworkMaterialMutation,
    CreateClassworkMaterialMutationVariables
  >
} &
  TChildProps
export function withCreateClassworkMaterial<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateClassworkMaterialMutation,
    CreateClassworkMaterialMutationVariables,
    CreateClassworkMaterialProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateClassworkMaterialMutation,
    CreateClassworkMaterialMutationVariables,
    CreateClassworkMaterialProps<TChildProps, TDataName>
  >(CreateClassworkMaterialDocument, {
    alias: 'createClassworkMaterial',
    ...operationOptions,
  })
}

/**
 * __useCreateClassworkMaterialMutation__
 *
 * To run a mutation, you first call `useCreateClassworkMaterialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateClassworkMaterialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createClassworkMaterialMutation, { data, loading, error }] = useCreateClassworkMaterialMutation({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      CreateClassworkMaterialInput: // value for 'CreateClassworkMaterialInput'
 *   },
 * });
 */
export function useCreateClassworkMaterialMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateClassworkMaterialMutation,
    CreateClassworkMaterialMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateClassworkMaterialMutation,
    CreateClassworkMaterialMutationVariables
  >(CreateClassworkMaterialDocument, options)
}
export type CreateClassworkMaterialMutationHookResult = ReturnType<
  typeof useCreateClassworkMaterialMutation
>
export type CreateClassworkMaterialMutationResult =
  Apollo.MutationResult<CreateClassworkMaterialMutation>
export type CreateClassworkMaterialMutationOptions = Apollo.BaseMutationOptions<
  CreateClassworkMaterialMutation,
  CreateClassworkMaterialMutationVariables
>
export const DetailClassworkMaterialDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'DetailClassworkMaterial' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'classworkMaterial' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'Id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'updatedAt' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type DetailClassworkMaterialProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables
  >
} &
  TChildProps
export function withDetailClassworkMaterial<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables,
    DetailClassworkMaterialProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables,
    DetailClassworkMaterialProps<TChildProps, TDataName>
  >(DetailClassworkMaterialDocument, {
    alias: 'detailClassworkMaterial',
    ...operationOptions,
  })
}

/**
 * __useDetailClassworkMaterialQuery__
 *
 * To run a query within a React component, call `useDetailClassworkMaterialQuery` and pass it any options that fit your needs.
 * When your component renders, `useDetailClassworkMaterialQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDetailClassworkMaterialQuery({
 *   variables: {
 *      Id: // value for 'Id'
 *   },
 * });
 */
export function useDetailClassworkMaterialQuery(
  baseOptions: Apollo.QueryHookOptions<
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables
  >(DetailClassworkMaterialDocument, options)
}
export function useDetailClassworkMaterialLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    DetailClassworkMaterialQuery,
    DetailClassworkMaterialQueryVariables
  >(DetailClassworkMaterialDocument, options)
}
export type DetailClassworkMaterialQueryHookResult = ReturnType<
  typeof useDetailClassworkMaterialQuery
>
export type DetailClassworkMaterialLazyQueryHookResult = ReturnType<
  typeof useDetailClassworkMaterialLazyQuery
>
export type DetailClassworkMaterialQueryResult = Apollo.QueryResult<
  DetailClassworkMaterialQuery,
  DetailClassworkMaterialQueryVariables
>
export const UpdateClassworkMaterialDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateClassworkMaterial' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkMaterialId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateClassworkMaterialInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateClassworkMaterialInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateClassworkMaterial' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkMaterialId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkMaterialId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateClassworkMaterialInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateClassworkMaterialInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateClassworkMaterialMutationFn = Apollo.MutationFunction<
  UpdateClassworkMaterialMutation,
  UpdateClassworkMaterialMutationVariables
>
export type UpdateClassworkMaterialProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateClassworkMaterialMutation,
    UpdateClassworkMaterialMutationVariables
  >
} &
  TChildProps
export function withUpdateClassworkMaterial<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateClassworkMaterialMutation,
    UpdateClassworkMaterialMutationVariables,
    UpdateClassworkMaterialProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateClassworkMaterialMutation,
    UpdateClassworkMaterialMutationVariables,
    UpdateClassworkMaterialProps<TChildProps, TDataName>
  >(UpdateClassworkMaterialDocument, {
    alias: 'updateClassworkMaterial',
    ...operationOptions,
  })
}

/**
 * __useUpdateClassworkMaterialMutation__
 *
 * To run a mutation, you first call `useUpdateClassworkMaterialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClassworkMaterialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClassworkMaterialMutation, { data, loading, error }] = useUpdateClassworkMaterialMutation({
 *   variables: {
 *      classworkMaterialId: // value for 'classworkMaterialId'
 *      updateClassworkMaterialInput: // value for 'updateClassworkMaterialInput'
 *   },
 * });
 */
export function useUpdateClassworkMaterialMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateClassworkMaterialMutation,
    UpdateClassworkMaterialMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateClassworkMaterialMutation,
    UpdateClassworkMaterialMutationVariables
  >(UpdateClassworkMaterialDocument, options)
}
export type UpdateClassworkMaterialMutationHookResult = ReturnType<
  typeof useUpdateClassworkMaterialMutation
>
export type UpdateClassworkMaterialMutationResult =
  Apollo.MutationResult<UpdateClassworkMaterialMutation>
export type UpdateClassworkMaterialMutationOptions = Apollo.BaseMutationOptions<
  UpdateClassworkMaterialMutation,
  UpdateClassworkMaterialMutationVariables
>
export const AddAttachmentsToClassworkMaterialDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddAttachmentsToClassworkMaterial' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'attachmentsInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'AddAttachmentsToClassworkInput' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkMaterialId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addAttachmentsToClassworkMaterial' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'attachmentsInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'attachmentsInput' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkMaterialId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkMaterialId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AddAttachmentsToClassworkMaterialMutationFn =
  Apollo.MutationFunction<
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables
  >
export type AddAttachmentsToClassworkMaterialProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables
  >
} &
  TChildProps
export function withAddAttachmentsToClassworkMaterial<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables,
    AddAttachmentsToClassworkMaterialProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables,
    AddAttachmentsToClassworkMaterialProps<TChildProps, TDataName>
  >(AddAttachmentsToClassworkMaterialDocument, {
    alias: 'addAttachmentsToClassworkMaterial',
    ...operationOptions,
  })
}

/**
 * __useAddAttachmentsToClassworkMaterialMutation__
 *
 * To run a mutation, you first call `useAddAttachmentsToClassworkMaterialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddAttachmentsToClassworkMaterialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addAttachmentsToClassworkMaterialMutation, { data, loading, error }] = useAddAttachmentsToClassworkMaterialMutation({
 *   variables: {
 *      attachmentsInput: // value for 'attachmentsInput'
 *      classworkMaterialId: // value for 'classworkMaterialId'
 *   },
 * });
 */
export function useAddAttachmentsToClassworkMaterialMutation(
  baseOptions?: Apollo.MutationHookOptions<
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables
  >(AddAttachmentsToClassworkMaterialDocument, options)
}
export type AddAttachmentsToClassworkMaterialMutationHookResult = ReturnType<
  typeof useAddAttachmentsToClassworkMaterialMutation
>
export type AddAttachmentsToClassworkMaterialMutationResult =
  Apollo.MutationResult<AddAttachmentsToClassworkMaterialMutation>
export type AddAttachmentsToClassworkMaterialMutationOptions =
  Apollo.BaseMutationOptions<
    AddAttachmentsToClassworkMaterialMutation,
    AddAttachmentsToClassworkMaterialMutationVariables
  >
export const RemoveAttachmentsFromClassworkMaterialDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveAttachmentsFromClassworkMaterial' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'attachments' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'ListType',
              type: {
                kind: 'NonNullType',
                type: {
                  kind: 'NamedType',
                  name: { kind: 'Name', value: 'String' },
                },
              },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'classworkMaterialId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'removeAttachmentsFromClassworkMaterial',
            },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'attachments' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'attachments' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'classworkMaterialId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'classworkMaterialId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'attachments' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type RemoveAttachmentsFromClassworkMaterialMutationFn =
  Apollo.MutationFunction<
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables
  >
export type RemoveAttachmentsFromClassworkMaterialProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables
  >
} &
  TChildProps
export function withRemoveAttachmentsFromClassworkMaterial<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables,
    RemoveAttachmentsFromClassworkMaterialProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables,
    RemoveAttachmentsFromClassworkMaterialProps<TChildProps, TDataName>
  >(RemoveAttachmentsFromClassworkMaterialDocument, {
    alias: 'removeAttachmentsFromClassworkMaterial',
    ...operationOptions,
  })
}

/**
 * __useRemoveAttachmentsFromClassworkMaterialMutation__
 *
 * To run a mutation, you first call `useRemoveAttachmentsFromClassworkMaterialMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveAttachmentsFromClassworkMaterialMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeAttachmentsFromClassworkMaterialMutation, { data, loading, error }] = useRemoveAttachmentsFromClassworkMaterialMutation({
 *   variables: {
 *      attachments: // value for 'attachments'
 *      classworkMaterialId: // value for 'classworkMaterialId'
 *   },
 * });
 */
export function useRemoveAttachmentsFromClassworkMaterialMutation(
  baseOptions?: Apollo.MutationHookOptions<
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables
  >(RemoveAttachmentsFromClassworkMaterialDocument, options)
}
export type RemoveAttachmentsFromClassworkMaterialMutationHookResult =
  ReturnType<typeof useRemoveAttachmentsFromClassworkMaterialMutation>
export type RemoveAttachmentsFromClassworkMaterialMutationResult =
  Apollo.MutationResult<RemoveAttachmentsFromClassworkMaterialMutation>
export type RemoveAttachmentsFromClassworkMaterialMutationOptions =
  Apollo.BaseMutationOptions<
    RemoveAttachmentsFromClassworkMaterialMutation,
    RemoveAttachmentsFromClassworkMaterialMutationVariables
  >
export const SetGradeForClassworkSubmissionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SetGradeForClassworkSubmission' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: {
              kind: 'Name',
              value: 'setGradeForClassworkSubmissionInput',
            },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'SetGradeForClassworkSubmissionInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'setGradeForClassworkSubmission' },
            arguments: [
              {
                kind: 'Argument',
                name: {
                  kind: 'Name',
                  value: 'setGradeForClassworkSubmissionInput',
                },
                value: {
                  kind: 'Variable',
                  name: {
                    kind: 'Name',
                    value: 'setGradeForClassworkSubmissionInput',
                  },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'grade' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type SetGradeForClassworkSubmissionMutationFn = Apollo.MutationFunction<
  SetGradeForClassworkSubmissionMutation,
  SetGradeForClassworkSubmissionMutationVariables
>
export type SetGradeForClassworkSubmissionProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables
  >
} &
  TChildProps
export function withSetGradeForClassworkSubmission<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables,
    SetGradeForClassworkSubmissionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables,
    SetGradeForClassworkSubmissionProps<TChildProps, TDataName>
  >(SetGradeForClassworkSubmissionDocument, {
    alias: 'setGradeForClassworkSubmission',
    ...operationOptions,
  })
}

/**
 * __useSetGradeForClassworkSubmissionMutation__
 *
 * To run a mutation, you first call `useSetGradeForClassworkSubmissionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetGradeForClassworkSubmissionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setGradeForClassworkSubmissionMutation, { data, loading, error }] = useSetGradeForClassworkSubmissionMutation({
 *   variables: {
 *      setGradeForClassworkSubmissionInput: // value for 'setGradeForClassworkSubmissionInput'
 *   },
 * });
 */
export function useSetGradeForClassworkSubmissionMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables
  >(SetGradeForClassworkSubmissionDocument, options)
}
export type SetGradeForClassworkSubmissionMutationHookResult = ReturnType<
  typeof useSetGradeForClassworkSubmissionMutation
>
export type SetGradeForClassworkSubmissionMutationResult =
  Apollo.MutationResult<SetGradeForClassworkSubmissionMutation>
export type SetGradeForClassworkSubmissionMutationOptions =
  Apollo.BaseMutationOptions<
    SetGradeForClassworkSubmissionMutation,
    SetGradeForClassworkSubmissionMutationVariables
  >
export const CourseDetailDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'CourseDetail' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'findCourseById' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'tuitionFee' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'studentIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CourseDetailProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >
} &
  TChildProps
export function withCourseDetail<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CourseDetailQuery,
    CourseDetailQueryVariables,
    CourseDetailProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    CourseDetailQuery,
    CourseDetailQueryVariables,
    CourseDetailProps<TChildProps, TDataName>
  >(CourseDetailDocument, {
    alias: 'courseDetail',
    ...operationOptions,
  })
}

/**
 * __useCourseDetailQuery__
 *
 * To run a query within a React component, call `useCourseDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useCourseDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCourseDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCourseDetailQuery(
  baseOptions: Apollo.QueryHookOptions<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CourseDetailQuery, CourseDetailQueryVariables>(
    CourseDetailDocument,
    options,
  )
}
export function useCourseDetailLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CourseDetailQuery,
    CourseDetailQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CourseDetailQuery, CourseDetailQueryVariables>(
    CourseDetailDocument,
    options,
  )
}
export type CourseDetailQueryHookResult = ReturnType<
  typeof useCourseDetailQuery
>
export type CourseDetailLazyQueryHookResult = ReturnType<
  typeof useCourseDetailLazyQuery
>
export type CourseDetailQueryResult = Apollo.QueryResult<
  CourseDetailQuery,
  CourseDetailQueryVariables
>
export const AvgGradeOfClassworkAssignmentInCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AvgGradeOfClassworkAssignmentInCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'optionInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'AvgGradeOfClassworkByCourseOptionInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: {
              kind: 'Name',
              value: 'calculateAvgGradeOfClassworkAssignmentInCourse',
            },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'courseId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'courseId' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'optionInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'optionInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'classworkTitle' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'avgGrade' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type AvgGradeOfClassworkAssignmentInCourseProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >
} &
  TChildProps
export function withAvgGradeOfClassworkAssignmentInCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables,
    AvgGradeOfClassworkAssignmentInCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables,
    AvgGradeOfClassworkAssignmentInCourseProps<TChildProps, TDataName>
  >(AvgGradeOfClassworkAssignmentInCourseDocument, {
    alias: 'avgGradeOfClassworkAssignmentInCourse',
    ...operationOptions,
  })
}

/**
 * __useAvgGradeOfClassworkAssignmentInCourseQuery__
 *
 * To run a query within a React component, call `useAvgGradeOfClassworkAssignmentInCourseQuery` and pass it any options that fit your needs.
 * When your component renders, `useAvgGradeOfClassworkAssignmentInCourseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAvgGradeOfClassworkAssignmentInCourseQuery({
 *   variables: {
 *      courseId: // value for 'courseId'
 *      optionInput: // value for 'optionInput'
 *   },
 * });
 */
export function useAvgGradeOfClassworkAssignmentInCourseQuery(
  baseOptions: Apollo.QueryHookOptions<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >(AvgGradeOfClassworkAssignmentInCourseDocument, options)
}
export function useAvgGradeOfClassworkAssignmentInCourseLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >(AvgGradeOfClassworkAssignmentInCourseDocument, options)
}
export type AvgGradeOfClassworkAssignmentInCourseQueryHookResult = ReturnType<
  typeof useAvgGradeOfClassworkAssignmentInCourseQuery
>
export type AvgGradeOfClassworkAssignmentInCourseLazyQueryHookResult =
  ReturnType<typeof useAvgGradeOfClassworkAssignmentInCourseLazyQuery>
export type AvgGradeOfClassworkAssignmentInCourseQueryResult =
  Apollo.QueryResult<
    AvgGradeOfClassworkAssignmentInCourseQuery,
    AvgGradeOfClassworkAssignmentInCourseQueryVariables
  >
export const QuizzesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Quizzes' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'courseId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'quizzes' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'courseId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'quizzes' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'courseId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'questionIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'duration' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdByAccountId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuizzesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    QuizzesQuery,
    QuizzesQueryVariables
  >
} &
  TChildProps
export function withQuizzes<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuizzesQuery,
    QuizzesQueryVariables,
    QuizzesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuizzesQuery,
    QuizzesQueryVariables,
    QuizzesProps<TChildProps, TDataName>
  >(QuizzesDocument, {
    alias: 'quizzes',
    ...operationOptions,
  })
}

/**
 * __useQuizzesQuery__
 *
 * To run a query within a React component, call `useQuizzesQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuizzesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuizzesQuery({
 *   variables: {
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      courseId: // value for 'courseId'
 *   },
 * });
 */
export function useQuizzesQuery(
  baseOptions: Apollo.QueryHookOptions<QuizzesQuery, QuizzesQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuizzesQuery, QuizzesQueryVariables>(
    QuizzesDocument,
    options,
  )
}
export function useQuizzesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QuizzesQuery,
    QuizzesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QuizzesQuery, QuizzesQueryVariables>(
    QuizzesDocument,
    options,
  )
}
export type QuizzesQueryHookResult = ReturnType<typeof useQuizzesQuery>
export type QuizzesLazyQueryHookResult = ReturnType<typeof useQuizzesLazyQuery>
export type QuizzesQueryResult = Apollo.QueryResult<
  QuizzesQuery,
  QuizzesQueryVariables
>
export const CreateQuestionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateQuestion' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateQuestionInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createQuestion' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'scores' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateQuestionMutationFn = Apollo.MutationFunction<
  CreateQuestionMutation,
  CreateQuestionMutationVariables
>
export type CreateQuestionProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateQuestionMutation,
    CreateQuestionMutationVariables
  >
} &
  TChildProps
export function withCreateQuestion<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateQuestionMutation,
    CreateQuestionMutationVariables,
    CreateQuestionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateQuestionMutation,
    CreateQuestionMutationVariables,
    CreateQuestionProps<TChildProps, TDataName>
  >(CreateQuestionDocument, {
    alias: 'createQuestion',
    ...operationOptions,
  })
}

/**
 * __useCreateQuestionMutation__
 *
 * To run a mutation, you first call `useCreateQuestionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateQuestionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createQuestionMutation, { data, loading, error }] = useCreateQuestionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateQuestionMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateQuestionMutation,
    CreateQuestionMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateQuestionMutation,
    CreateQuestionMutationVariables
  >(CreateQuestionDocument, options)
}
export type CreateQuestionMutationHookResult = ReturnType<
  typeof useCreateQuestionMutation
>
export type CreateQuestionMutationResult =
  Apollo.MutationResult<CreateQuestionMutation>
export type CreateQuestionMutationOptions = Apollo.BaseMutationOptions<
  CreateQuestionMutation,
  CreateQuestionMutationVariables
>
export const CreateQuizDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateQuiz' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateQuizInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createQuiz' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'duration' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'questionIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type CreateQuizMutationFn = Apollo.MutationFunction<
  CreateQuizMutation,
  CreateQuizMutationVariables
>
export type CreateQuizProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateQuizMutation,
    CreateQuizMutationVariables
  >
} &
  TChildProps
export function withCreateQuiz<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateQuizMutation,
    CreateQuizMutationVariables,
    CreateQuizProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateQuizMutation,
    CreateQuizMutationVariables,
    CreateQuizProps<TChildProps, TDataName>
  >(CreateQuizDocument, {
    alias: 'createQuiz',
    ...operationOptions,
  })
}

/**
 * __useCreateQuizMutation__
 *
 * To run a mutation, you first call `useCreateQuizMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateQuizMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createQuizMutation, { data, loading, error }] = useCreateQuizMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateQuizMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateQuizMutation,
    CreateQuizMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateQuizMutation, CreateQuizMutationVariables>(
    CreateQuizDocument,
    options,
  )
}
export type CreateQuizMutationHookResult = ReturnType<
  typeof useCreateQuizMutation
>
export type CreateQuizMutationResult = Apollo.MutationResult<CreateQuizMutation>
export type CreateQuizMutationOptions = Apollo.BaseMutationOptions<
  CreateQuizMutation,
  CreateQuizMutationVariables
>
export const QuizDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Quiz' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'quiz' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'duration' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'questionIds' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuizProps<TChildProps = {}, TDataName extends string = 'data'> = {
  [key in TDataName]: ApolloReactHoc.DataValue<QuizQuery, QuizQueryVariables>
} &
  TChildProps
export function withQuiz<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuizQuery,
    QuizQueryVariables,
    QuizProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuizQuery,
    QuizQueryVariables,
    QuizProps<TChildProps, TDataName>
  >(QuizDocument, {
    alias: 'quiz',
    ...operationOptions,
  })
}

/**
 * __useQuizQuery__
 *
 * To run a query within a React component, call `useQuizQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuizQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuizQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useQuizQuery(
  baseOptions: Apollo.QueryHookOptions<QuizQuery, QuizQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuizQuery, QuizQueryVariables>(QuizDocument, options)
}
export function useQuizLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<QuizQuery, QuizQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QuizQuery, QuizQueryVariables>(
    QuizDocument,
    options,
  )
}
export type QuizQueryHookResult = ReturnType<typeof useQuizQuery>
export type QuizLazyQueryHookResult = ReturnType<typeof useQuizLazyQuery>
export type QuizQueryResult = Apollo.QueryResult<QuizQuery, QuizQueryVariables>
export const QuestionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Question' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'question' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'scores' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'createdByAccountId' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuestionProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    QuestionQuery,
    QuestionQueryVariables
  >
} &
  TChildProps
export function withQuestion<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuestionQuery,
    QuestionQueryVariables,
    QuestionProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuestionQuery,
    QuestionQueryVariables,
    QuestionProps<TChildProps, TDataName>
  >(QuestionDocument, {
    alias: 'question',
    ...operationOptions,
  })
}

/**
 * __useQuestionQuery__
 *
 * To run a query within a React component, call `useQuestionQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuestionQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useQuestionQuery(
  baseOptions: Apollo.QueryHookOptions<QuestionQuery, QuestionQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuestionQuery, QuestionQueryVariables>(
    QuestionDocument,
    options,
  )
}
export function useQuestionLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QuestionQuery,
    QuestionQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<QuestionQuery, QuestionQueryVariables>(
    QuestionDocument,
    options,
  )
}
export type QuestionQueryHookResult = ReturnType<typeof useQuestionQuery>
export type QuestionLazyQueryHookResult = ReturnType<
  typeof useQuestionLazyQuery
>
export type QuestionQueryResult = Apollo.QueryResult<
  QuestionQuery,
  QuestionQueryVariables
>
export const QuestionChoicesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'QuestionChoices' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'questionId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'questionChoices' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'questionId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'questionId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'questionChoices' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'isRight' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'questionId' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'createdByAccountId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'idRight' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type QuestionChoicesProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables
  >
} &
  TChildProps
export function withQuestionChoices<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables,
    QuestionChoicesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables,
    QuestionChoicesProps<TChildProps, TDataName>
  >(QuestionChoicesDocument, {
    alias: 'questionChoices',
    ...operationOptions,
  })
}

/**
 * __useQuestionChoicesQuery__
 *
 * To run a query within a React component, call `useQuestionChoicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useQuestionChoicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useQuestionChoicesQuery({
 *   variables: {
 *      questionId: // value for 'questionId'
 *   },
 * });
 */
export function useQuestionChoicesQuery(
  baseOptions: Apollo.QueryHookOptions<
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<QuestionChoicesQuery, QuestionChoicesQueryVariables>(
    QuestionChoicesDocument,
    options,
  )
}
export function useQuestionChoicesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    QuestionChoicesQuery,
    QuestionChoicesQueryVariables
  >(QuestionChoicesDocument, options)
}
export type QuestionChoicesQueryHookResult = ReturnType<
  typeof useQuestionChoicesQuery
>
export type QuestionChoicesLazyQueryHookResult = ReturnType<
  typeof useQuestionChoicesLazyQuery
>
export type QuestionChoicesQueryResult = Apollo.QueryResult<
  QuestionChoicesQuery,
  QuestionChoicesQueryVariables
>
export const UpdatePublicationQuizDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdatePublicationQuiz' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'publicationState' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updatePublicationQuiz' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'publicationState' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'publicationState' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'publicationState' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdatePublicationQuizMutationFn = Apollo.MutationFunction<
  UpdatePublicationQuizMutation,
  UpdatePublicationQuizMutationVariables
>
export type UpdatePublicationQuizProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdatePublicationQuizMutation,
    UpdatePublicationQuizMutationVariables
  >
} &
  TChildProps
export function withUpdatePublicationQuiz<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdatePublicationQuizMutation,
    UpdatePublicationQuizMutationVariables,
    UpdatePublicationQuizProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdatePublicationQuizMutation,
    UpdatePublicationQuizMutationVariables,
    UpdatePublicationQuizProps<TChildProps, TDataName>
  >(UpdatePublicationQuizDocument, {
    alias: 'updatePublicationQuiz',
    ...operationOptions,
  })
}

/**
 * __useUpdatePublicationQuizMutation__
 *
 * To run a mutation, you first call `useUpdatePublicationQuizMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePublicationQuizMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePublicationQuizMutation, { data, loading, error }] = useUpdatePublicationQuizMutation({
 *   variables: {
 *      id: // value for 'id'
 *      publicationState: // value for 'publicationState'
 *   },
 * });
 */
export function useUpdatePublicationQuizMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdatePublicationQuizMutation,
    UpdatePublicationQuizMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdatePublicationQuizMutation,
    UpdatePublicationQuizMutationVariables
  >(UpdatePublicationQuizDocument, options)
}
export type UpdatePublicationQuizMutationHookResult = ReturnType<
  typeof useUpdatePublicationQuizMutation
>
export type UpdatePublicationQuizMutationResult =
  Apollo.MutationResult<UpdatePublicationQuizMutation>
export type UpdatePublicationQuizMutationOptions = Apollo.BaseMutationOptions<
  UpdatePublicationQuizMutation,
  UpdatePublicationQuizMutationVariables
>
export const TeachingCourseListDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'TeachingCourseList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'lecturerIds' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type TeachingCourseListProps<
  TChildProps = {},
  TDataName extends string = 'data',
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >
} &
  TChildProps
export function withTeachingCourseList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >(TeachingCourseListDocument, {
    alias: 'teachingCourseList',
    ...operationOptions,
  })
}

/**
 * __useTeachingCourseListQuery__
 *
 * To run a query within a React component, call `useTeachingCourseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeachingCourseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeachingCourseListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      lecturerIds: // value for 'lecturerIds'
 *      searchText: // value for 'searchText'
 *   },
 * });
 */
export function useTeachingCourseListQuery(
  baseOptions: Apollo.QueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export function useTeachingCourseListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export type TeachingCourseListQueryHookResult = ReturnType<
  typeof useTeachingCourseListQuery
>
export type TeachingCourseListLazyQueryHookResult = ReturnType<
  typeof useTeachingCourseListLazyQuery
>
export type TeachingCourseListQueryResult = Apollo.QueryResult<
  TeachingCourseListQuery,
  TeachingCourseListQueryVariables
>
export const UpdateClassworkAssignmentDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateClassworkAssignment' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateClassworkAssignmentInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateClassworkAssignment' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'courseId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'title' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'dueDate' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateClassworkAssignmentMutationFn = Apollo.MutationFunction<
  UpdateClassworkAssignmentMutation,
  UpdateClassworkAssignmentMutationVariables
>
export type UpdateClassworkAssignmentProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >
} &
  TChildProps
export function withUpdateClassworkAssignment<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables,
    UpdateClassworkAssignmentProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables,
    UpdateClassworkAssignmentProps<TChildProps, TDataName>
  >(UpdateClassworkAssignmentDocument, {
    alias: 'updateClassworkAssignment',
    ...operationOptions,
  })
}

/**
 * __useUpdateClassworkAssignmentMutation__
 *
 * To run a mutation, you first call `useUpdateClassworkAssignmentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateClassworkAssignmentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateClassworkAssignmentMutation, { data, loading, error }] = useUpdateClassworkAssignmentMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateClassworkAssignmentMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >(UpdateClassworkAssignmentDocument, options)
}
export type UpdateClassworkAssignmentMutationHookResult = ReturnType<
  typeof useUpdateClassworkAssignmentMutation
>
export type UpdateClassworkAssignmentMutationResult =
  Apollo.MutationResult<UpdateClassworkAssignmentMutation>
export type UpdateClassworkAssignmentMutationOptions =
  Apollo.BaseMutationOptions<
    UpdateClassworkAssignmentMutation,
    UpdateClassworkAssignmentMutationVariables
  >
export const UpdateCourseDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateCourseInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'createdAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'updatedAt' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'startDate' } },
                { kind: 'Field', name: { kind: 'Name', value: 'lecturerIds' } },
                { kind: 'Field', name: { kind: 'Name', value: 'tuitionFee' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode
export type UpdateCourseMutationFn = Apollo.MutationFunction<
  UpdateCourseMutation,
  UpdateCourseMutationVariables
>
export type UpdateCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate',
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateCourseMutation,
    UpdateCourseMutationVariables
  >
} &
  TChildProps
export function withUpdateCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate',
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateCourseMutation,
    UpdateCourseMutationVariables,
    UpdateCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateCourseMutation,
    UpdateCourseMutationVariables,
    UpdateCourseProps<TChildProps, TDataName>
  >(UpdateCourseDocument, {
    alias: 'updateCourse',
    ...operationOptions,
  })
}

/**
 * __useUpdateCourseMutation__
 *
 * To run a mutation, you first call `useUpdateCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCourseMutation, { data, loading, error }] = useUpdateCourseMutation({
 *   variables: {
 *      id: // value for 'id'
 *      updateInput: // value for 'updateInput'
 *   },
 * });
 */
export function useUpdateCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateCourseMutation,
    UpdateCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateCourseMutation,
    UpdateCourseMutationVariables
  >(UpdateCourseDocument, options)
}
export type UpdateCourseMutationHookResult = ReturnType<
  typeof useUpdateCourseMutation
>
export type UpdateCourseMutationResult =
  Apollo.MutationResult<UpdateCourseMutation>
export type UpdateCourseMutationOptions = Apollo.BaseMutationOptions<
  UpdateCourseMutation,
  UpdateCourseMutationVariables
>
