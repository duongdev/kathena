/* THIS IS AN AUTO-GENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */

import { DocumentNode } from 'graphql'
import * as Apollo from '@apollo/client'
import * as ApolloReactHoc from '@apollo/client/react/hoc'
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> }
const defaultOptions = {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any
  /** The `Upload` scalar type represents a file upload. */
  Upload: any
}

export type Account = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  status: AccountStatus
  roles: Array<Scalars['String']>
  availability: AccountAvailability
}

export type BaseModel = {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
}

/** Status of an account. */
export enum AccountStatus {
  Pending = 'Pending',
  Active = 'Active',
  Deactivated = 'Deactivated',
}

export enum AccountAvailability {
  Online = 'Online',
  Offline = 'Offline',
  Away = 'Away',
}

export type Org = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  namespace: Scalars['String']
  name: Scalars['String']
}

export type AuthenticatePayload = {
  account: Account
  org: Org
  permissions: Array<Permission>
}

export enum Permission {
  Hr_Access = 'Hr_Access',
  Hr_CreateOrgAccount = 'Hr_CreateOrgAccount',
  Hr_ListOrgAccounts = 'Hr_ListOrgAccounts',
  Hr_UpdateOrgAccount = 'Hr_UpdateOrgAccount',
  Hr_UpdateOrgAccountStatus = 'Hr_UpdateOrgAccountStatus',
  Academic_CreateAcademicSubject = 'Academic_CreateAcademicSubject',
  Academic_ListAcademicSubjects = 'Academic_ListAcademicSubjects',
  Academic_SetAcademicSubjectPublication = 'Academic_SetAcademicSubjectPublication',
  Academic_UpdateAcademicSubject = 'Academic_UpdateAcademicSubject',
  OrgOffice_CreateOrgOffice = 'OrgOffice_CreateOrgOffice',
  OrgOffice_ListOrgOffices = 'OrgOffice_ListOrgOffices',
  OrgOffice_UpdateOrgOffice = 'OrgOffice_UpdateOrgOffice',
  Academic_CreateCourse = 'Academic_CreateCourse',
  Academic_UpdateCourse = 'Academic_UpdateCourse',
  Academic_ListCourses = 'Academic_ListCourses',
  NoPermission = 'NoPermission',
}

export type SignInPayload = {
  token: Scalars['String']
  account: Account
  org: Org
  permissions: Array<Permission>
}

export type File = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  size: Scalars['Int']
  mimeType: Scalars['String']
  storageProvider: FileLocation
  storageProviderIdentifier: Scalars['String']
}

export enum FileLocation {
  LocalStorage = 'LocalStorage',
}

export type AcademicSubject = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  code: Scalars['String']
  description: Scalars['String']
  publication: Publication
  imageFileId: Scalars['String']
}

export enum Publication {
  Draft = 'Draft',
  Published = 'Published',
}

export type Course = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  academicSubjectId: Scalars['ID']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['DateTime']
  tuitionFee: Scalars['Float']
  publicationState: Publication
  publishedAt: Scalars['DateTime']
  lecturerIds: Array<Scalars['String']>
  createdByAccountId: Scalars['ID']
}

export type AcademicSubjectsPayload = {
  academicSubjects: Array<AcademicSubject>
  count: Scalars['Int']
}

export type CoursesPayload = {
  courses: Array<Course>
  count: Scalars['Int']
}

export type OrgAccountsPayload = {
  accounts: Array<Account>
  count: Scalars['Int']
}

export type OrgOffice = BaseModel & {
  id: Scalars['ID']
  orgId: Scalars['ID']
  createdAt: Scalars['DateTime']
  updatedAt: Scalars['DateTime']
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type Query = {
  account?: Maybe<Account>
  accountByUserName?: Maybe<Account>
  orgAccounts: OrgAccountsPayload
  authenticate: AuthenticatePayload
  academicSubjects: AcademicSubjectsPayload
  academicSubject: AcademicSubject
  courses: CoursesPayload
  file?: Maybe<File>
  orgOffices: Array<OrgOffice>
  orgOffice: OrgOffice
}

export type QueryAccountArgs = {
  id: Scalars['ID']
}

export type QueryAccountByUserNameArgs = {
  username: Scalars['String']
}

export type QueryOrgAccountsArgs = {
  filter: AccountsFilterInput
  pageOptions: PageOptionsInput
}

export type QueryAcademicSubjectsArgs = {
  pageOptions: PageOptionsInput
  orgId: Scalars['ID']
}

export type QueryAcademicSubjectArgs = {
  id: Scalars['ID']
}

export type QueryCoursesArgs = {
  filter: CoursesFilterInput
  pageOptions: PageOptionsInput
}

export type QueryFileArgs = {
  id: Scalars['ID']
}

export type QueryOrgOfficeArgs = {
  id: Scalars['ID']
}

export type AccountsFilterInput = {
  orgId: Scalars['ID']
  roles?: Maybe<Array<Scalars['String']>>
  searchText?: Maybe<Scalars['String']>
}

export type PageOptionsInput = {
  skip: Scalars['Int']
  limit: Scalars['Int']
}

export type CoursesFilterInput = {
  orgId: Scalars['ID']
  searchText?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
}

export type Mutation = {
  createOrgAccount: Account
  updateAccount: Account
  updateAccountStatus: Account
  signIn: SignInPayload
  createAcademicSubject: AcademicSubject
  updateAcademicSubjectPublication: AcademicSubject
  updateAcademicSubject: AcademicSubject
  createCourse: Course
  updateCourse: Course
  findCourseById: Course
  createOrgOffice: OrgOffice
  updateOrgOffice: OrgOffice
}

export type MutationCreateOrgAccountArgs = {
  input: CreateAccountInput
}

export type MutationUpdateAccountArgs = {
  updateInput: UpdateAccountInput
  id: Scalars['ID']
}

export type MutationUpdateAccountStatusArgs = {
  status: Scalars['String']
  id: Scalars['ID']
}

export type MutationSignInArgs = {
  password: Scalars['String']
  identity: Scalars['String']
  orgNamespace: Scalars['String']
}

export type MutationCreateAcademicSubjectArgs = {
  input: CreateAcademicSubjectInput
}

export type MutationUpdateAcademicSubjectPublicationArgs = {
  publication: Scalars['String']
  id: Scalars['ID']
}

export type MutationUpdateAcademicSubjectArgs = {
  updateInput: UpdateAcademicSubjectInput
  id: Scalars['ID']
}

export type MutationCreateCourseArgs = {
  input: CreateCourseInput
}

export type MutationUpdateCourseArgs = {
  updateInput: UpdateCourseInput
  id: Scalars['ID']
}

export type MutationFindCourseByIdArgs = {
  id: Scalars['ID']
}

export type MutationCreateOrgOfficeArgs = {
  input: CreateOrgOfficeInput
}

export type MutationUpdateOrgOfficeArgs = {
  input: UpdateOrgOfficeInput
  id: Scalars['ID']
}

export type CreateAccountInput = {
  username: Scalars['String']
  email: Scalars['String']
  displayName?: Maybe<Scalars['String']>
  roles: Array<Scalars['String']>
}

export type UpdateAccountInput = {
  username?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  displayName?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']>>
  password?: Maybe<Scalars['String']>
}

export type CreateAcademicSubjectInput = {
  name: Scalars['String']
  code: Scalars['String']
  description?: Maybe<Scalars['String']>
  image: Scalars['Upload']
}

export type UpdateAcademicSubjectInput = {
  name?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
}

export type CreateCourseInput = {
  academicSubjectId: Scalars['String']
  code: Scalars['String']
  name: Scalars['String']
  startDate: Scalars['String']
  tuitionFee: Scalars['Float']
  lecturerIds?: Maybe<Array<Scalars['String']>>
}

export type UpdateCourseInput = {
  name?: Maybe<Scalars['String']>
  tuitionFee?: Maybe<Scalars['Float']>
  startDate?: Maybe<Scalars['String']>
  lecturerIds?: Maybe<Array<Scalars['ID']>>
}

export type CreateOrgOfficeInput = {
  name: Scalars['String']
  address: Scalars['String']
  phone: Scalars['String']
}

export type UpdateOrgOfficeInput = {
  name?: Maybe<Scalars['String']>
  address?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type AuthAccountFragment = Pick<
  Account,
  'id' | 'orgId' | 'status' | 'email' | 'username' | 'displayName'
>

export type AuthOrgFragment = Pick<Org, 'id' | 'name' | 'namespace'>

export type SignInMutationVariables = Exact<{
  orgNamespace: Scalars['String']
  identity: Scalars['String']
  password: Scalars['String']
}>

export type SignInMutation = {
  signIn: Pick<SignInPayload, 'token'> & {
    account: AuthAccountFragment
    org: AuthOrgFragment
  }
}

export type AuthenticateQueryVariables = Exact<{ [key: string]: never }>

export type AuthenticateQuery = {
  authenticate: Pick<AuthenticatePayload, 'permissions'> & {
    account: AuthAccountFragment
    org: AuthOrgFragment
  }
}

export type AccountAvatarQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountAvatarQuery = {
  account?: Maybe<
    Pick<Account, 'id' | 'email' | 'username' | 'displayName' | 'availability'>
  >
}

export type AccountDisplayNameQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type AccountDisplayNameQuery = {
  account?: Maybe<Pick<Account, 'id' | 'username' | 'displayName'>>
}

export type AcademicSubjectListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
}>

export type AcademicSubjectListQuery = {
  academicSubjects: Pick<AcademicSubjectsPayload, 'count'> & {
    academicSubjects: Array<
      Pick<
        AcademicSubject,
        | 'id'
        | 'orgId'
        | 'name'
        | 'code'
        | 'description'
        | 'publication'
        | 'imageFileId'
      >
    >
  }
}

export type AccountProfileQueryVariables = Exact<{
  username: Scalars['String']
}>

export type AccountProfileQuery = {
  accountByUserName?: Maybe<
    Pick<
      Account,
      | 'id'
      | 'email'
      | 'username'
      | 'displayName'
      | 'roles'
      | 'status'
      | 'availability'
    >
  >
}

export type UpdateAccountStatusMutationVariables = Exact<{
  id: Scalars['ID']
  status: Scalars['String']
}>

export type UpdateAccountStatusMutation = {
  updateAccountStatus: Pick<
    Account,
    'id' | 'email' | 'username' | 'displayName' | 'roles' | 'status'
  >
}

export type UpdateSelfAccountMutationVariables = Exact<{
  accountId: Scalars['ID']
  update: UpdateAccountInput
}>

export type UpdateSelfAccountMutation = {
  updateAccount: Pick<Account, 'id' | 'displayName' | 'email' | 'roles'>
}

export type CreateCourseMutationVariables = Exact<{
  input: CreateCourseInput
}>

export type CreateCourseMutation = {
  createCourse: Pick<Course, 'id' | 'code' | 'name'>
}

export type CreateAcademicSubjectMutationVariables = Exact<{
  input: CreateAcademicSubjectInput
}>

export type CreateAcademicSubjectMutation = {
  createAcademicSubject: Pick<AcademicSubject, 'id' | 'code' | 'name'>
}

export type FindAcademicSubjectByIdQueryVariables = Exact<{
  Id: Scalars['ID']
}>

export type FindAcademicSubjectByIdQuery = {
  academicSubject: Pick<
    AcademicSubject,
    'id' | 'code' | 'name' | 'description' | 'imageFileId' | 'publication'
  >
}

export type UpdateAcademicSubjectMutationVariables = Exact<{
  Id: Scalars['ID']
  updateInput: UpdateAcademicSubjectInput
}>

export type UpdateAcademicSubjectMutation = {
  updateAcademicSubject: Pick<AcademicSubject, 'id' | 'code' | 'name'>
}

export type UpdateAcademicSubjectPublicationMutationVariables = Exact<{
  Id: Scalars['ID']
  publication: Scalars['String']
}>

export type UpdateAcademicSubjectPublicationMutation = {
  updateAcademicSubjectPublication: Pick<
    AcademicSubject,
    'id' | 'code' | 'publication'
  >
}

export type CreateAccountMutationVariables = Exact<{
  accountInput: CreateAccountInput
}>

export type CreateAccountMutation = {
  createOrgAccount: Pick<Account, 'id' | 'displayName' | 'username' | 'email'>
}

export type OrgAccountListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  searchText?: Maybe<Scalars['String']>
  roles?: Maybe<Array<Scalars['String']> | Scalars['String']>
}>

export type OrgAccountListQuery = {
  orgAccounts: Pick<OrgAccountsPayload, 'count'> & {
    accounts: Array<
      Pick<
        Account,
        | 'id'
        | 'email'
        | 'displayName'
        | 'username'
        | 'roles'
        | 'availability'
        | 'status'
      >
    >
  }
}

export type ListOrgOfficesQueryVariables = Exact<{ [key: string]: never }>

export type ListOrgOfficesQuery = {
  orgOffices: Array<Pick<OrgOffice, 'id' | 'name' | 'address' | 'phone'>>
}

export type CreateOrgOfficeMutationVariables = Exact<{
  input: CreateOrgOfficeInput
}>

export type CreateOrgOfficeMutation = {
  createOrgOffice: Pick<OrgOffice, 'id' | 'name'>
}

export type UpdateOrgOfficeMutationVariables = Exact<{
  id: Scalars['ID']
  input: UpdateOrgOfficeInput
}>

export type UpdateOrgOfficeMutation = {
  updateOrgOffice: Pick<OrgOffice, 'id' | 'name'>
}

export type OrgOfficeQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type OrgOfficeQuery = {
  orgOffice: Pick<OrgOffice, 'id' | 'name' | 'address' | 'phone'>
}

export type TeachingCourseListQueryVariables = Exact<{
  orgId: Scalars['ID']
  skip: Scalars['Int']
  limit: Scalars['Int']
  lecturerIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>
}>

export type TeachingCourseListQuery = {
  courses: Pick<CoursesPayload, 'count'> & {
    courses: Array<
      Pick<
        Course,
        | 'id'
        | 'orgId'
        | 'name'
        | 'code'
        | 'tuitionFee'
        | 'startDate'
        | 'lecturerIds'
        | 'publicationState'
      >
    >
  }
}

export const AuthAccountFragmentDoc: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
  ],
}
export const AuthOrgFragmentDoc: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export const SignInDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SignIn' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgNamespace' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'identity' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'password' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'signIn' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'password' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'password' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'identity' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'identity' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'orgNamespace' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orgNamespace' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'token' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export type SignInMutationFn = Apollo.MutationFunction<
  SignInMutation,
  SignInMutationVariables
>
export type SignInProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    SignInMutation,
    SignInMutationVariables
  >
} &
  TChildProps
export function withSignIn<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    SignInMutation,
    SignInMutationVariables,
    SignInProps<TChildProps, TDataName>
  >(SignInDocument, {
    alias: 'signIn',
    ...operationOptions,
  })
}

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      orgNamespace: // value for 'orgNamespace'
 *      identity: // value for 'identity'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SignInMutation,
    SignInMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<SignInMutation, SignInMutationVariables>(
    SignInDocument,
    options,
  )
}
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>
export type SignInMutationResult = Apollo.MutationResult<SignInMutation>
export type SignInMutationOptions = Apollo.BaseMutationOptions<
  SignInMutation,
  SignInMutationVariables
>
export const AuthenticateDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'Authenticate' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'authenticate' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'account' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthAccount' },
                      },
                    ],
                  },
                },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'org' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'AuthOrg' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'permissions' } },
              ],
            },
          },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthAccount' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Account' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'status' } },
          { kind: 'Field', name: { kind: 'Name', value: 'email' } },
          { kind: 'Field', name: { kind: 'Name', value: 'username' } },
          { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
        ],
      },
    },
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'AuthOrg' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Org' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'id' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'namespace' } },
        ],
      },
    },
  ],
}
export type AuthenticateProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >
} &
  TChildProps
export function withAuthenticate<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AuthenticateQuery,
    AuthenticateQueryVariables,
    AuthenticateProps<TChildProps, TDataName>
  >(AuthenticateDocument, {
    alias: 'authenticate',
    ...operationOptions,
  })
}

/**
 * __useAuthenticateQuery__
 *
 * To run a query within a React component, call `useAuthenticateQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthenticateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthenticateQuery({
 *   variables: {
 *   },
 * });
 */
export function useAuthenticateQuery(
  baseOptions?: Apollo.QueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export function useAuthenticateLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AuthenticateQuery,
    AuthenticateQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AuthenticateQuery, AuthenticateQueryVariables>(
    AuthenticateDocument,
    options,
  )
}
export type AuthenticateQueryHookResult = ReturnType<
  typeof useAuthenticateQuery
>
export type AuthenticateLazyQueryHookResult = ReturnType<
  typeof useAuthenticateLazyQuery
>
export type AuthenticateQueryResult = Apollo.QueryResult<
  AuthenticateQuery,
  AuthenticateQueryVariables
>
export const AccountAvatarDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountAvatar' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountAvatarProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >
} &
  TChildProps
export function withAccountAvatar<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountAvatarQuery,
    AccountAvatarQueryVariables,
    AccountAvatarProps<TChildProps, TDataName>
  >(AccountAvatarDocument, {
    alias: 'accountAvatar',
    ...operationOptions,
  })
}

/**
 * __useAccountAvatarQuery__
 *
 * To run a query within a React component, call `useAccountAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountAvatarQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountAvatarQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export function useAccountAvatarLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountAvatarQuery,
    AccountAvatarQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountAvatarQuery, AccountAvatarQueryVariables>(
    AccountAvatarDocument,
    options,
  )
}
export type AccountAvatarQueryHookResult = ReturnType<
  typeof useAccountAvatarQuery
>
export type AccountAvatarLazyQueryHookResult = ReturnType<
  typeof useAccountAvatarLazyQuery
>
export type AccountAvatarQueryResult = Apollo.QueryResult<
  AccountAvatarQuery,
  AccountAvatarQueryVariables
>
export const AccountDisplayNameDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountDisplayName' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'account' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountDisplayNameProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >
} &
  TChildProps
export function withAccountDisplayName<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables,
    AccountDisplayNameProps<TChildProps, TDataName>
  >(AccountDisplayNameDocument, {
    alias: 'accountDisplayName',
    ...operationOptions,
  })
}

/**
 * __useAccountDisplayNameQuery__
 *
 * To run a query within a React component, call `useAccountDisplayNameQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountDisplayNameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountDisplayNameQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAccountDisplayNameQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export function useAccountDisplayNameLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AccountDisplayNameQuery,
    AccountDisplayNameQueryVariables
  >(AccountDisplayNameDocument, options)
}
export type AccountDisplayNameQueryHookResult = ReturnType<
  typeof useAccountDisplayNameQuery
>
export type AccountDisplayNameLazyQueryHookResult = ReturnType<
  typeof useAccountDisplayNameLazyQuery
>
export type AccountDisplayNameQueryResult = Apollo.QueryResult<
  AccountDisplayNameQuery,
  AccountDisplayNameQueryVariables
>
export const AcademicSubjectListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AcademicSubjectList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubjects' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'orgId' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'orgId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'academicSubjects' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'description' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publication' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'imageFileId' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AcademicSubjectListProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >
} &
  TChildProps
export function withAcademicSubjectList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables,
    AcademicSubjectListProps<TChildProps, TDataName>
  >(AcademicSubjectListDocument, {
    alias: 'academicSubjectList',
    ...operationOptions,
  })
}

/**
 * __useAcademicSubjectListQuery__
 *
 * To run a query within a React component, call `useAcademicSubjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useAcademicSubjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAcademicSubjectListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *   },
 * });
 */
export function useAcademicSubjectListQuery(
  baseOptions: Apollo.QueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export function useAcademicSubjectListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    AcademicSubjectListQuery,
    AcademicSubjectListQueryVariables
  >(AcademicSubjectListDocument, options)
}
export type AcademicSubjectListQueryHookResult = ReturnType<
  typeof useAcademicSubjectListQuery
>
export type AcademicSubjectListLazyQueryHookResult = ReturnType<
  typeof useAcademicSubjectListLazyQuery
>
export type AcademicSubjectListQueryResult = Apollo.QueryResult<
  AcademicSubjectListQuery,
  AcademicSubjectListQueryVariables
>
export const AccountProfileDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'AccountProfile' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'username' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'accountByUserName' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'username' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'username' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'availability' },
                },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type AccountProfileProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >
} &
  TChildProps
export function withAccountProfile<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    AccountProfileQuery,
    AccountProfileQueryVariables,
    AccountProfileProps<TChildProps, TDataName>
  >(AccountProfileDocument, {
    alias: 'accountProfile',
    ...operationOptions,
  })
}

/**
 * __useAccountProfileQuery__
 *
 * To run a query within a React component, call `useAccountProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountProfileQuery({
 *   variables: {
 *      username: // value for 'username'
 *   },
 * });
 */
export function useAccountProfileQuery(
  baseOptions: Apollo.QueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export function useAccountProfileLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    AccountProfileQuery,
    AccountProfileQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<AccountProfileQuery, AccountProfileQueryVariables>(
    AccountProfileDocument,
    options,
  )
}
export type AccountProfileQueryHookResult = ReturnType<
  typeof useAccountProfileQuery
>
export type AccountProfileLazyQueryHookResult = ReturnType<
  typeof useAccountProfileLazyQuery
>
export type AccountProfileQueryResult = Apollo.QueryResult<
  AccountProfileQuery,
  AccountProfileQueryVariables
>
export const UpdateAccountStatusDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAccountStatus' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'status' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccountStatus' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'status' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'status' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                { kind: 'Field', name: { kind: 'Name', value: 'status' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAccountStatusMutationFn = Apollo.MutationFunction<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export type UpdateAccountStatusProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >
} &
  TChildProps
export function withUpdateAccountStatus<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables,
    UpdateAccountStatusProps<TChildProps, TDataName>
  >(UpdateAccountStatusDocument, {
    alias: 'updateAccountStatus',
    ...operationOptions,
  })
}

/**
 * __useUpdateAccountStatusMutation__
 *
 * To run a mutation, you first call `useUpdateAccountStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAccountStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAccountStatusMutation, { data, loading, error }] = useUpdateAccountStatusMutation({
 *   variables: {
 *      id: // value for 'id'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useUpdateAccountStatusMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAccountStatusMutation,
    UpdateAccountStatusMutationVariables
  >(UpdateAccountStatusDocument, options)
}
export type UpdateAccountStatusMutationHookResult = ReturnType<
  typeof useUpdateAccountStatusMutation
>
export type UpdateAccountStatusMutationResult = Apollo.MutationResult<UpdateAccountStatusMutation>
export type UpdateAccountStatusMutationOptions = Apollo.BaseMutationOptions<
  UpdateAccountStatusMutation,
  UpdateAccountStatusMutationVariables
>
export const UpdateSelfAccountDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateSelfAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'update' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'update' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountId' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateSelfAccountMutationFn = Apollo.MutationFunction<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export type UpdateSelfAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >
} &
  TChildProps
export function withUpdateSelfAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables,
    UpdateSelfAccountProps<TChildProps, TDataName>
  >(UpdateSelfAccountDocument, {
    alias: 'updateSelfAccount',
    ...operationOptions,
  })
}

/**
 * __useUpdateSelfAccountMutation__
 *
 * To run a mutation, you first call `useUpdateSelfAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSelfAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSelfAccountMutation, { data, loading, error }] = useUpdateSelfAccountMutation({
 *   variables: {
 *      accountId: // value for 'accountId'
 *      update: // value for 'update'
 *   },
 * });
 */
export function useUpdateSelfAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateSelfAccountMutation,
    UpdateSelfAccountMutationVariables
  >(UpdateSelfAccountDocument, options)
}
export type UpdateSelfAccountMutationHookResult = ReturnType<
  typeof useUpdateSelfAccountMutation
>
export type UpdateSelfAccountMutationResult = Apollo.MutationResult<UpdateSelfAccountMutation>
export type UpdateSelfAccountMutationOptions = Apollo.BaseMutationOptions<
  UpdateSelfAccountMutation,
  UpdateSelfAccountMutationVariables
>
export const CreateCourseDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateCourse' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateCourseInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createCourse' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateCourseMutationFn = Apollo.MutationFunction<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export type CreateCourseProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >
} &
  TChildProps
export function withCreateCourse<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateCourseMutation,
    CreateCourseMutationVariables,
    CreateCourseProps<TChildProps, TDataName>
  >(CreateCourseDocument, {
    alias: 'createCourse',
    ...operationOptions,
  })
}

/**
 * __useCreateCourseMutation__
 *
 * To run a mutation, you first call `useCreateCourseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCourseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCourseMutation, { data, loading, error }] = useCreateCourseMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCourseMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateCourseMutation,
    CreateCourseMutationVariables
  >(CreateCourseDocument, options)
}
export type CreateCourseMutationHookResult = ReturnType<
  typeof useCreateCourseMutation
>
export type CreateCourseMutationResult = Apollo.MutationResult<CreateCourseMutation>
export type CreateCourseMutationOptions = Apollo.BaseMutationOptions<
  CreateCourseMutation,
  CreateCourseMutationVariables
>
export const CreateAcademicSubjectDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateAcademicSubjectMutationFn = Apollo.MutationFunction<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export type CreateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withCreateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables,
    CreateAcademicSubjectProps<TChildProps, TDataName>
  >(CreateAcademicSubjectDocument, {
    alias: 'createAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useCreateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useCreateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAcademicSubjectMutation, { data, loading, error }] = useCreateAcademicSubjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAcademicSubjectMutation,
    CreateAcademicSubjectMutationVariables
  >(CreateAcademicSubjectDocument, options)
}
export type CreateAcademicSubjectMutationHookResult = ReturnType<
  typeof useCreateAcademicSubjectMutation
>
export type CreateAcademicSubjectMutationResult = Apollo.MutationResult<CreateAcademicSubjectMutation>
export type CreateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  CreateAcademicSubjectMutation,
  CreateAcademicSubjectMutationVariables
>
export const FindAcademicSubjectByIdDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'FindAcademicSubjectById' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'academicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'description' } },
                { kind: 'Field', name: { kind: 'Name', value: 'imageFileId' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type FindAcademicSubjectByIdProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >
} &
  TChildProps
export function withFindAcademicSubjectById<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables,
    FindAcademicSubjectByIdProps<TChildProps, TDataName>
  >(FindAcademicSubjectByIdDocument, {
    alias: 'findAcademicSubjectById',
    ...operationOptions,
  })
}

/**
 * __useFindAcademicSubjectByIdQuery__
 *
 * To run a query within a React component, call `useFindAcademicSubjectByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindAcademicSubjectByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindAcademicSubjectByIdQuery({
 *   variables: {
 *      Id: // value for 'Id'
 *   },
 * });
 */
export function useFindAcademicSubjectByIdQuery(
  baseOptions: Apollo.QueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export function useFindAcademicSubjectByIdLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    FindAcademicSubjectByIdQuery,
    FindAcademicSubjectByIdQueryVariables
  >(FindAcademicSubjectByIdDocument, options)
}
export type FindAcademicSubjectByIdQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdQuery
>
export type FindAcademicSubjectByIdLazyQueryHookResult = ReturnType<
  typeof useFindAcademicSubjectByIdLazyQuery
>
export type FindAcademicSubjectByIdQueryResult = Apollo.QueryResult<
  FindAcademicSubjectByIdQuery,
  FindAcademicSubjectByIdQueryVariables
>
export const UpdateAcademicSubjectDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubject' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'updateInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateAcademicSubjectInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubject' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'updateInput' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'updateInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAcademicSubjectMutationFn = Apollo.MutationFunction<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export type UpdateAcademicSubjectProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubject<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables,
    UpdateAcademicSubjectProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectDocument, {
    alias: 'updateAcademicSubject',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectMutation, { data, loading, error }] = useUpdateAcademicSubjectMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      updateInput: // value for 'updateInput'
 *   },
 * });
 */
export function useUpdateAcademicSubjectMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectMutation,
    UpdateAcademicSubjectMutationVariables
  >(UpdateAcademicSubjectDocument, options)
}
export type UpdateAcademicSubjectMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectMutation
>
export type UpdateAcademicSubjectMutationResult = Apollo.MutationResult<UpdateAcademicSubjectMutation>
export type UpdateAcademicSubjectMutationOptions = Apollo.BaseMutationOptions<
  UpdateAcademicSubjectMutation,
  UpdateAcademicSubjectMutationVariables
>
export const UpdateAcademicSubjectPublicationDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateAcademicSubjectPublication' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'Id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'publication' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'String' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateAcademicSubjectPublication' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'Id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'publication' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'publication' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                { kind: 'Field', name: { kind: 'Name', value: 'publication' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateAcademicSubjectPublicationMutationFn = Apollo.MutationFunction<
  UpdateAcademicSubjectPublicationMutation,
  UpdateAcademicSubjectPublicationMutationVariables
>
export type UpdateAcademicSubjectPublicationProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >
} &
  TChildProps
export function withUpdateAcademicSubjectPublication<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables,
    UpdateAcademicSubjectPublicationProps<TChildProps, TDataName>
  >(UpdateAcademicSubjectPublicationDocument, {
    alias: 'updateAcademicSubjectPublication',
    ...operationOptions,
  })
}

/**
 * __useUpdateAcademicSubjectPublicationMutation__
 *
 * To run a mutation, you first call `useUpdateAcademicSubjectPublicationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAcademicSubjectPublicationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAcademicSubjectPublicationMutation, { data, loading, error }] = useUpdateAcademicSubjectPublicationMutation({
 *   variables: {
 *      Id: // value for 'Id'
 *      publication: // value for 'publication'
 *   },
 * });
 */
export function useUpdateAcademicSubjectPublicationMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateAcademicSubjectPublicationMutation,
    UpdateAcademicSubjectPublicationMutationVariables
  >(UpdateAcademicSubjectPublicationDocument, options)
}
export type UpdateAcademicSubjectPublicationMutationHookResult = ReturnType<
  typeof useUpdateAcademicSubjectPublicationMutation
>
export type UpdateAcademicSubjectPublicationMutationResult = Apollo.MutationResult<UpdateAcademicSubjectPublicationMutation>
export type UpdateAcademicSubjectPublicationMutationOptions = Apollo.BaseMutationOptions<
  UpdateAcademicSubjectPublicationMutation,
  UpdateAcademicSubjectPublicationMutationVariables
>
export const CreateAccountDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateAccount' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'accountInput' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateAccountInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgAccount' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'accountInput' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'displayName' } },
                { kind: 'Field', name: { kind: 'Name', value: 'username' } },
                { kind: 'Field', name: { kind: 'Name', value: 'email' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateAccountMutationFn = Apollo.MutationFunction<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export type CreateAccountProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >
} &
  TChildProps
export function withCreateAccount<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateAccountMutation,
    CreateAccountMutationVariables,
    CreateAccountProps<TChildProps, TDataName>
  >(CreateAccountDocument, {
    alias: 'createAccount',
    ...operationOptions,
  })
}

/**
 * __useCreateAccountMutation__
 *
 * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({
 *   variables: {
 *      accountInput: // value for 'accountInput'
 *   },
 * });
 */
export function useCreateAccountMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateAccountMutation,
    CreateAccountMutationVariables
  >(CreateAccountDocument, options)
}
export type CreateAccountMutationHookResult = ReturnType<
  typeof useCreateAccountMutation
>
export type CreateAccountMutationResult = Apollo.MutationResult<CreateAccountMutation>
export type CreateAccountMutationOptions = Apollo.BaseMutationOptions<
  CreateAccountMutation,
  CreateAccountMutationVariables
>
export const OrgAccountListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgAccountList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'searchText' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'roles' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: {
                kind: 'NamedType',
                name: { kind: 'Name', value: 'String' },
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgAccounts' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'searchText' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'searchText' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'roles' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'roles' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'accounts' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'email' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'displayName' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'username' },
                      },
                      { kind: 'Field', name: { kind: 'Name', value: 'roles' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'availability' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'status' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type OrgAccountListProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >
} &
  TChildProps
export function withOrgAccountList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgAccountListQuery,
    OrgAccountListQueryVariables,
    OrgAccountListProps<TChildProps, TDataName>
  >(OrgAccountListDocument, {
    alias: 'orgAccountList',
    ...operationOptions,
  })
}

/**
 * __useOrgAccountListQuery__
 *
 * To run a query within a React component, call `useOrgAccountListQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgAccountListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgAccountListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      searchText: // value for 'searchText'
 *      roles: // value for 'roles'
 *   },
 * });
 */
export function useOrgAccountListQuery(
  baseOptions: Apollo.QueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export function useOrgAccountListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgAccountListQuery,
    OrgAccountListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgAccountListQuery, OrgAccountListQueryVariables>(
    OrgAccountListDocument,
    options,
  )
}
export type OrgAccountListQueryHookResult = ReturnType<
  typeof useOrgAccountListQuery
>
export type OrgAccountListLazyQueryHookResult = ReturnType<
  typeof useOrgAccountListLazyQuery
>
export type OrgAccountListQueryResult = Apollo.QueryResult<
  OrgAccountListQuery,
  OrgAccountListQueryVariables
>
export const ListOrgOfficesDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListOrgOffices' },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffices' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type ListOrgOfficesProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >
} &
  TChildProps
export function withListOrgOffices<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables,
    ListOrgOfficesProps<TChildProps, TDataName>
  >(ListOrgOfficesDocument, {
    alias: 'listOrgOffices',
    ...operationOptions,
  })
}

/**
 * __useListOrgOfficesQuery__
 *
 * To run a query within a React component, call `useListOrgOfficesQuery` and pass it any options that fit your needs.
 * When your component renders, `useListOrgOfficesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListOrgOfficesQuery({
 *   variables: {
 *   },
 * });
 */
export function useListOrgOfficesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export function useListOrgOfficesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ListOrgOfficesQuery,
    ListOrgOfficesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ListOrgOfficesQuery, ListOrgOfficesQueryVariables>(
    ListOrgOfficesDocument,
    options,
  )
}
export type ListOrgOfficesQueryHookResult = ReturnType<
  typeof useListOrgOfficesQuery
>
export type ListOrgOfficesLazyQueryHookResult = ReturnType<
  typeof useListOrgOfficesLazyQuery
>
export type ListOrgOfficesQueryResult = Apollo.QueryResult<
  ListOrgOfficesQuery,
  ListOrgOfficesQueryVariables
>
export const CreateOrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'CreateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'CreateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'createOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type CreateOrgOfficeMutationFn = Apollo.MutationFunction<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export type CreateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withCreateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables,
    CreateOrgOfficeProps<TChildProps, TDataName>
  >(CreateOrgOfficeDocument, {
    alias: 'createOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useCreateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useCreateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrgOfficeMutation, { data, loading, error }] = useCreateOrgOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateOrgOfficeMutation,
    CreateOrgOfficeMutationVariables
  >(CreateOrgOfficeDocument, options)
}
export type CreateOrgOfficeMutationHookResult = ReturnType<
  typeof useCreateOrgOfficeMutation
>
export type CreateOrgOfficeMutationResult = Apollo.MutationResult<CreateOrgOfficeMutation>
export type CreateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  CreateOrgOfficeMutation,
  CreateOrgOfficeMutationVariables
>
export const UpdateOrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'UpdateOrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'UpdateOrgOfficeInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'updateOrgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type UpdateOrgOfficeMutationFn = Apollo.MutationFunction<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export type UpdateOrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'mutate'
> = {
  [key in TDataName]: Apollo.MutationFunction<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >
} &
  TChildProps
export function withUpdateOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'mutate'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withMutation<
    TProps,
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables,
    UpdateOrgOfficeProps<TChildProps, TDataName>
  >(UpdateOrgOfficeDocument, {
    alias: 'updateOrgOffice',
    ...operationOptions,
  })
}

/**
 * __useUpdateOrgOfficeMutation__
 *
 * To run a mutation, you first call `useUpdateOrgOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrgOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateOrgOfficeMutation, { data, loading, error }] = useUpdateOrgOfficeMutation({
 *   variables: {
 *      id: // value for 'id'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrgOfficeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateOrgOfficeMutation,
    UpdateOrgOfficeMutationVariables
  >(UpdateOrgOfficeDocument, options)
}
export type UpdateOrgOfficeMutationHookResult = ReturnType<
  typeof useUpdateOrgOfficeMutation
>
export type UpdateOrgOfficeMutationResult = Apollo.MutationResult<UpdateOrgOfficeMutation>
export type UpdateOrgOfficeMutationOptions = Apollo.BaseMutationOptions<
  UpdateOrgOfficeMutation,
  UpdateOrgOfficeMutationVariables
>
export const OrgOfficeDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'OrgOffice' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'id' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'orgOffice' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'id' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'id' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                { kind: 'Field', name: { kind: 'Name', value: 'address' } },
                { kind: 'Field', name: { kind: 'Name', value: 'phone' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type OrgOfficeProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >
} &
  TChildProps
export function withOrgOffice<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    OrgOfficeQuery,
    OrgOfficeQueryVariables,
    OrgOfficeProps<TChildProps, TDataName>
  >(OrgOfficeDocument, {
    alias: 'orgOffice',
    ...operationOptions,
  })
}

/**
 * __useOrgOfficeQuery__
 *
 * To run a query within a React component, call `useOrgOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgOfficeQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useOrgOfficeQuery(
  baseOptions: Apollo.QueryHookOptions<OrgOfficeQuery, OrgOfficeQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export function useOrgOfficeLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    OrgOfficeQuery,
    OrgOfficeQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<OrgOfficeQuery, OrgOfficeQueryVariables>(
    OrgOfficeDocument,
    options,
  )
}
export type OrgOfficeQueryHookResult = ReturnType<typeof useOrgOfficeQuery>
export type OrgOfficeLazyQueryHookResult = ReturnType<
  typeof useOrgOfficeLazyQuery
>
export type OrgOfficeQueryResult = Apollo.QueryResult<
  OrgOfficeQuery,
  OrgOfficeQueryVariables
>
export const TeachingCourseListDocument: DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'TeachingCourseList' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'orgId' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: { kind: 'Variable', name: { kind: 'Name', value: 'skip' } },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
          },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'lecturerIds' },
          },
          type: {
            kind: 'ListType',
            type: {
              kind: 'NonNullType',
              type: { kind: 'NamedType', name: { kind: 'Name', value: 'ID' } },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'courses' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'pageOptions' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'skip' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'skip' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'limit' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'limit' },
                      },
                    },
                  ],
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'filter' },
                value: {
                  kind: 'ObjectValue',
                  fields: [
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'orgId' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'orgId' },
                      },
                    },
                    {
                      kind: 'ObjectField',
                      name: { kind: 'Name', value: 'lecturerIds' },
                      value: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                    },
                  ],
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'courses' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'orgId' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'name' } },
                      { kind: 'Field', name: { kind: 'Name', value: 'code' } },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'tuitionFee' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'startDate' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'lecturerIds' },
                      },
                      {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'publicationState' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'count' } },
              ],
            },
          },
        ],
      },
    },
  ],
}
export type TeachingCourseListProps<
  TChildProps = {},
  TDataName extends string = 'data'
> = {
  [key in TDataName]: ApolloReactHoc.DataValue<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >
} &
  TChildProps
export function withTeachingCourseList<
  TProps,
  TChildProps = {},
  TDataName extends string = 'data'
>(
  operationOptions?: ApolloReactHoc.OperationOption<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >,
) {
  return ApolloReactHoc.withQuery<
    TProps,
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables,
    TeachingCourseListProps<TChildProps, TDataName>
  >(TeachingCourseListDocument, {
    alias: 'teachingCourseList',
    ...operationOptions,
  })
}

/**
 * __useTeachingCourseListQuery__
 *
 * To run a query within a React component, call `useTeachingCourseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeachingCourseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeachingCourseListQuery({
 *   variables: {
 *      orgId: // value for 'orgId'
 *      skip: // value for 'skip'
 *      limit: // value for 'limit'
 *      lecturerIds: // value for 'lecturerIds'
 *   },
 * });
 */
export function useTeachingCourseListQuery(
  baseOptions: Apollo.QueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export function useTeachingCourseListLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<
    TeachingCourseListQuery,
    TeachingCourseListQueryVariables
  >(TeachingCourseListDocument, options)
}
export type TeachingCourseListQueryHookResult = ReturnType<
  typeof useTeachingCourseListQuery
>
export type TeachingCourseListLazyQueryHookResult = ReturnType<
  typeof useTeachingCourseListLazyQuery
>
export type TeachingCourseListQueryResult = Apollo.QueryResult<
  TeachingCourseListQuery,
  TeachingCourseListQueryVariables
>
