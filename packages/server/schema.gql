# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  displayName: String
  status: AccountStatus!
  roles: [String!]!
  availability: AccountAvailability!
}

interface BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Status of an account."""
enum AccountStatus {
  Pending
  Active
  Deactivated
}

enum AccountAvailability {
  Online
  Offline
  Away
}

type Org implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  namespace: String!
  name: String!
}

type AuthenticatePayload {
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

enum Permission {
  Hr_Access
  Hr_CreateOrgAccount
  Hr_ListOrgAccounts
  Hr_UpdateOrgAccount
  Hr_UpdateOrgAccountStatus
  Academic_CreateAcademicSubject
  Academic_ListAcademicSubjects
  Academic_SetAcademicSubjectPublication
  Academic_UpdateAcademicSubject
  OrgOffice_CreateOrgOffice
  OrgOffice_ListOrgOffices
  OrgOffice_UpdateOrgOffice
  Academic_CreateCourse
  Academic_UpdateCourse
  Academic_ListCourses
  Academic_AddLecturersToCourse
  NoPermission
}

type SignInPayload {
  token: String!
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

type File implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: Int!
  mimeType: String!
  storageProvider: FileLocation!
  storageProviderIdentifier: String!
}

enum FileLocation {
  LocalStorage
}

type AcademicSubject implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  description: String!
  publication: Publication!
  imageFileId: String!
}

enum Publication {
  Draft
  Published
}

type Course implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  academicSubjectId: ID!
  code: String!
  name: String!
  startDate: DateTime!
  tuitionFee: Float!
  publicationState: Publication!
  publishedAt: DateTime!
  lecturerIds: [String!]!
  studentIds: [String!]!
  createdByAccountId: ID!
}

type AcademicSubjectsPayload {
  academicSubjects: [AcademicSubject!]!
  count: Int!
}

type CoursesPayload {
  courses: [Course!]!
  count: Int!
}

type OrgAccountsPayload {
  accounts: [Account!]!
  count: Int!
}

type OrgOffice implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  phone: String!
}

type Query {
  account(id: ID!): Account
  accountByUserName(username: String!): Account
  orgAccounts(filter: AccountsFilterInput!, pageOptions: PageOptionsInput!): OrgAccountsPayload!
  authenticate: AuthenticatePayload!
  academicSubjects(pageOptions: PageOptionsInput!, orgId: ID!): AcademicSubjectsPayload!
  academicSubject(id: ID!): AcademicSubject!
  courses(filter: CoursesFilterInput!, pageOptions: PageOptionsInput!): CoursesPayload!
  file(id: ID!): File
  orgOffices: [OrgOffice!]!
  orgOffice(id: ID!): OrgOffice!
}

input AccountsFilterInput {
  orgId: ID!
  roles: [String!]
  searchText: String
}

input PageOptionsInput {
  skip: Int!
  limit: Int!
}

input CoursesFilterInput {
  orgId: ID!
  searchText: String
  lecturerIds: [ID!]
  studentIds: [ID!]
}

type Mutation {
  createOrgAccount(input: CreateAccountInput!): Account!
  updateAccount(updateInput: UpdateAccountInput!, id: ID!): Account!
  updateAccountStatus(status: String!, id: ID!): Account!
  signIn(
    password: String!

    """Could be username or email"""
    identity: String!
    orgNamespace: String!
  ): SignInPayload!
  createAcademicSubject(input: CreateAcademicSubjectInput!): AcademicSubject!
  updateAcademicSubjectPublication(publication: String!, id: ID!): AcademicSubject!
  updateAcademicSubject(updateInput: UpdateAcademicSubjectInput!, id: ID!): AcademicSubject!
  createCourse(input: CreateCourseInput!): Course!
  updateCourse(updateInput: UpdateCourseInput!, id: ID!): Course!
  findCourseById(id: ID!): Course!
  addLecturesToCourse(lecturerIds: [String!]!, courseId: ID!): Course!
  createOrgOffice(input: CreateOrgOfficeInput!): OrgOffice!
  updateOrgOffice(input: UpdateOrgOfficeInput!, id: ID!): OrgOffice!
  findOrgOffices(searchText: String, orgId: ID): [OrgOffice!]!
}

input CreateAccountInput {
  username: String!
  email: String!
  displayName: String
  roles: [String!]!
}

input UpdateAccountInput {
  username: String
  email: String
  displayName: String
  roles: [String!]
  password: String
}

input CreateAcademicSubjectInput {
  name: String!
  code: String!
  description: String = ""
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateAcademicSubjectInput {
  name: String
  description: String
}

input CreateCourseInput {
  academicSubjectId: String!
  code: String!
  name: String!
  startDate: String!
  tuitionFee: Float!
  lecturerIds: [String!] = []
}

input UpdateCourseInput {
  name: String
  tuitionFee: Float
  startDate: String
  lecturerIds: [ID!]
}

input CreateOrgOfficeInput {
  name: String!
  address: String!
  phone: String!
}

input UpdateOrgOfficeInput {
  name: String
  address: String
  phone: String
}
