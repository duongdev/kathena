# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  displayName: String
  otp: String
  otpExpired: DateTime
  status: AccountStatus!
  roles: [String!]!
  availability: AccountAvailability!
}

interface BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Status of an account."""
enum AccountStatus {
  Pending
  Active
  Deactivated
}

enum AccountAvailability {
  Online
  Offline
  Away
}

type Org implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  namespace: String!
  name: String!
}

type AcademicSubject implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  description: String!
  publication: Publication!
  imageFileId: String!
}

enum Publication {
  Draft
  Published
}

type Lesson implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  updatedByAccountId: ID!
  startTime: DateTime!
  endTime: DateTime!
  description: String
  absentStudentIds: [ID!]!
  lecturerComment: String
  courseId: ID!
  publicationState: Publication!
  avgNumberOfStars: Float!
  classworkMaterialListBeforeClass: [ID!]
  classworkMaterialListInClass: [ID!]
  classworkMaterialListAfterClass: [ID!]
  classworkAssignmentListBeforeClass: [ID!]
  classworkAssignmentListInClass: [ID!]
  classworkAssignmentListAfterClass: [ID!]
}

type LessonsPayload {
  lessons: [Lesson!]!
  count: Int!
}

type DayOfTheWeek {
  dayOfWeek: DayOfWeek!
  startTime: String!
  endTime: String!
}

enum DayOfWeek {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

type Course implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  academicSubjectId: ID!
  orgOfficeId: ID!
  code: String!
  name: String!
  startDate: DateTime!
  tuitionFee: Float!
  publicationState: Publication!
  publishedAt: DateTime!
  lecturerIds: [ID!]!
  studentIds: [ID!]!
  totalNumberOfLessons: Float!
  listOfLessonsForAWeek: [DayOfTheWeek!]!
  createdByAccountId: ID!
}

type File implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: Int!
  mimeType: String!
  storageProvider: FileLocation!
  storageProviderIdentifier: String!
  signedUrl: String
}

enum FileLocation {
  LocalStorage
}

type ClassworkAssignment implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  courseId: ID!
  title: String!
  type: String!
  description: String
  attachments: [String!]!
  publicationState: Publication!
  dueDate: DateTime
  maxScores: Float!
}

type ClassworkMaterial implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  courseId: ID!
  title: String!
  type: String!
  description: String
  attachments: [String!]!
  publicationState: Publication!
}

type ClassworkSubmission implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  classworkId: ID!
  courseId: ID!
  grade: Float
  submissionFileIds: [ID!]!
  description: String!
}

type ClassworkAssignmentPayload {
  classworkAssignments: [ClassworkAssignment!]!
  count: Int!
}

type ClassworkMaterialPayload {
  classworkMaterials: [ClassworkMaterial!]!
  count: Int!
}

type ClassworkSubmissionStatusPayload {
  classworkSubmissions: [ClassworkSubmission!]!
  count: Int!
}

type AvgGradeOfClassworkByCourse {
  classworkTitle: String!
  avgGrade: Float!
}

type ClassworkAssignmentByStudentIdInCourseResponse {
  classworkAssignmentId: ID
  classworkAssignmentsTitle: ID
  dueDate: DateTime
  classworkSubmissionGrade: Float
  classworkSubmissionUpdatedAt: DateTime
  classworkSubmissionDescription: String
}

type ClassworkAssignmentByStudentIdInCourseResponsePayload {
  list: [ClassworkAssignmentByStudentIdInCourseResponse!]
  count: Int!
}

type SubmissionStatusStatistics {
  label: String!
  number: Float!
}

type OrgOffice implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  phone: String!
}

type AuthenticatePayload {
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

enum Permission {
  Hr_Access
  Hr_CreateOrgAccount
  Hr_ListOrgAccounts
  Hr_UpdateOrgAccount
  Hr_UpdateOrgAccountStatus
  Academic_AcademicSubject_Access
  Academic_CreateAcademicSubject
  Academic_ListAcademicSubjects
  Academic_SetAcademicSubjectPublication
  Academic_UpdateAcademicSubject
  Academic_Course_Access
  Academic_CreateCourse
  Academic_UpdateCourse
  Academic_ListCourses
  Academic_AddStudentsToCourse
  Academic_AddLecturersToCourse
  Academic_RemoveStudentsFromCourse
  Academic_RemoveLecturersFromCourse
  Academic_CreateLesson
  Academic_ListLesson
  Academic_UpdateLesson
  Academic_AddAbsentStudentsToLesson
  Academic_RemoveAbsentStudentsFromLesson
  Academic_CommentsForTheLesson
  OrgOffice_Access
  OrgOffice_CreateOrgOffice
  OrgOffice_ListOrgOffices
  OrgOffice_UpdateOrgOffice
  Teaching_Course_Access
  Studying_Course_Access
  Classwork_ListClassworkAssignment
  Classwork_CreateClassworkAssignment
  Classwork_UpdateClassworkAssignment
  Classwork_SetClassworkAssignmentPublication
  Classwork_AddAttachmentsToClassworkAssignment
  Classwork_RemoveAttachmentsFromClassworkAssignment
  Classwork_ListClassworkMaterial
  Classwork_UpdateClassworkMaterial
  Classwork_CreateClassworkMaterial
  Classwork_SetClassworkMaterialPublication
  Classwork_AddAttachmentsToClassworkMaterial
  Classwork_RemoveAttachmentsFromClassworkMaterial
  Classwork_SetGradeForClassworkSubmission
  Classwork_CreateClassworkSubmission
  Classwork_ListClassworkSubmission
  Classwork_ShowSubmissionStatusList
  AvgGradeStatisticsOfClassworkInTheCourse
  Comment_CreateComment
  Rating_CreateRating
  NoPermission
}

type SignInPayload {
  token: String!
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

type CoursesPayload {
  courses: [Course!]!
  count: Int!
}

type OrgAccountsPayload {
  accounts: [Account!]!
  count: Int!
}

type AcademicSubjectsPayload {
  academicSubjects: [AcademicSubject!]!
  count: Int!
}

type Conversation implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  roomId: ID!
  content: String!
  type: ConversationType!
}

"""Type of an conversation."""
enum ConversationType {
  Group
  Single
}

type ConversationsPayload {
  conversations: [Conversation!]!
  count: Int!
}

type Question implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  scores: Float!
  createdByAccountId: ID!
}

type QuestionChoice implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  questionId: ID!
  isRight: Boolean!
  createdByAccountId: ID!
}

type Quiz implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  courseId: ID!
  questionIds: [ID!]!
  duration: Float
  createdByAccountId: ID!
  publicationState: Publication!
}

type QuizSubmit implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  quizId: ID!
  scores: Float!
  startTime: DateTime
  questionIds: [String!]
  questionChoiceIds: [String!]
  createdByAccountId: ID!
}

type QuizzesPayload {
  quizzes: [Quiz!]!
  count: Int!
}

type QuizSubmitsPayload {
  quizSubmits: [QuizSubmit!]!
  count: Int!
}

type QuestionChoicesPayload {
  questionChoices: [QuestionChoice!]!
  idRight: String!
}

type Rating implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: ID!
  targetId: ID!
  numberOfStars: Float!
}

type Query {
  account(id: ID!): Account
  accountByUserName(username: String!): Account
  orgAccounts(filter: AccountsFilterInput!, pageOptions: PageOptionsInput!): OrgAccountsPayload!
  authenticate: AuthenticatePayload!
  canAccountManageRoles(roles: [String!]!): Boolean!
  academicSubjects(filter: AcademicSubjectsFilterInput!, pageOptions: PageOptionsInput!): AcademicSubjectsPayload!
  academicSubject(id: ID!): AcademicSubject!
  orgOffices: [OrgOffice!]!
  orgOffice(id: ID!): OrgOffice!
  findCourseById(id: ID!): Course!
  courses(filter: CoursesFilterInput!, pageOptions: PageOptionsInput!): CoursesPayload!
  calculateAvgGradeOfClassworkAssignmentInCourse(optionInput: AvgGradeOfClassworkByCourseOptionInput!, courseId: ID!): [AvgGradeOfClassworkByCourse!]!
  classworkMaterials(searchText: String, courseId: String!, pageOptions: PageOptionsInput!): ClassworkMaterialPayload!
  classworkMaterial(Id: ID!): ClassworkMaterial!
  classworkAssignment(id: ID!): ClassworkAssignment!
  classworkAssignments(searchText: String, courseId: ID!, pageOptions: PageOptionsInput!): ClassworkAssignmentPayload!
  listClassworkAssignmentsByStudentIdInCourse(Input: ClassworkAssignmentByStudentIdInCourseInput!): ClassworkAssignmentByStudentIdInCourseResponsePayload!
  classworkSubmissions(classworkAssignmentId: ID!): [ClassworkSubmission!]!
  findClassworkSubmissionById(classworkSubmissionId: ID!): ClassworkSubmission!
  findOneClassworkSubmission(ClassworkAssignment: ID!): ClassworkSubmission!
  getListOfStudentsSubmitAssignmentsByStatus(classworkSubmissionStatus: String!, classworkAssignmentId: ID!): ClassworkSubmissionStatusPayload!
  submissionStatusStatistics(classworkAssignmentId: ID!): [SubmissionStatusStatistics!]!
  file(id: ID!): File
  conversations(conversationPageOptionInput: ConversationPageOptionInput!, lastId: ID, roomId: String!): ConversationsPayload!
  lessons(filter: LessonsFilterInput!, pageOptions: PageOptionsInput!): LessonsPayload!
  updateLessonPublicationById(input: UpdateLessonPublicationByIdInput!): Lesson!
  findLessonById(lessonId: ID!): Lesson!
  quizzes(filter: QuizzesFilterInput!, pageOptions: PageOptionsInput!): QuizzesPayload!
  quizzesStudying(filter: QuizzesFilterInput!, pageOptions: PageOptionsInput!): QuizzesPayload!
  quiz(id: ID!): Quiz!
  question(id: ID!): Question!
  questionChoices(questionId: ID!): QuestionChoicesPayload!
  quizSubmit(quizId: ID!): QuizSubmit!
  findQuizSubmitById(id: ID!): QuizSubmit!
  quizSubmits(filter: QuizSubmitsFilterInput!, pageOptions: PageOptionsInput!): QuizSubmitsPayload!
}

input AccountsFilterInput {
  orgId: ID!
  roles: [String!]
  searchText: String
}

input PageOptionsInput {
  skip: Int!
  limit: Int!
}

input AcademicSubjectsFilterInput {
  orgId: ID!
  searchText: String
}

input CoursesFilterInput {
  orgId: ID!
  searchText: String
  lecturerIds: [ID!]
  studentIds: [ID!]
}

input AvgGradeOfClassworkByCourseOptionInput {
  limit: Float = 0
}

input ClassworkAssignmentByStudentIdInCourseInput {
  courseId: ID!
  limit: Float!
  skip: Float
  status: ClassworkAssignmentByStudentIdInCourseInputStatus = All
}

enum ClassworkAssignmentByStudentIdInCourseInputStatus {
  All
  HaveSubmission
  HaveNotSubmission
}

input ConversationPageOptionInput {
  limit: Int!
}

input LessonsFilterInput {
  courseId: ID!
  startTime: DateTime = null
  endTime: DateTime = null
  absentStudentId: ID = null
  ratingStar: Float = null
  status: LessonsFilterInputStatus!
}

enum LessonsFilterInputStatus {
  academic
  studying
  teaching
}

input UpdateLessonPublicationByIdInput {
  lessonId: ID!
  publicationState: Publication!
  courseId: ID!
}

input QuizzesFilterInput {
  courseId: ID!
  publicationState: Publication
}

input QuizSubmitsFilterInput {
  quizId: ID!
}

type Mutation {
  createOrgAccount(input: CreateAccountInput!): Account!
  updateAccount(updateInput: UpdateAccountInput!, id: ID!): Account!
  updateAccountStatus(status: String!, id: ID!): Account!
  setPassword(otp: String!, password: String!, usernameOrEmail: String!): Account!
  callOTP(type: String!, usernameOrEmail: String!): Account!
  signIn(
    password: String!

    """Could be username or email"""
    identity: String!
    orgNamespace: String!
  ): SignInPayload!
  createAcademicSubject(input: CreateAcademicSubjectInput!): AcademicSubject!
  updateAcademicSubjectPublication(publication: String!, id: ID!): AcademicSubject!
  updateAcademicSubject(updateInput: UpdateAcademicSubjectInput!, id: ID!): AcademicSubject!
  createOrgOffice(input: CreateOrgOfficeInput!): OrgOffice!
  updateOrgOffice(input: UpdateOrgOfficeInput!, id: ID!): OrgOffice!
  findOrgOffices(searchText: String, orgId: ID): [OrgOffice!]!
  createCourse(input: CreateCourseInput!): Course!
  updateCourse(updateInput: UpdateCourseInput!, id: ID!): Course!
  addLecturesToCourse(lecturerIds: [ID!]!, courseId: ID!): Course!
  addStudentsToCourse(studentIds: [ID!]!, courseId: ID!): Course!
  removeStudentsFromCourse(studentIds: [ID!]!, id: ID!): Course!
  removeLecturersFromCourse(lecturerIds: [ID!]!, id: ID!): Course!
  CloneTheCourse(cloneCourseInput: CloneCourseInput!): Course!
  createClassworkMaterial(CreateClassworkMaterialInput: CreateClassworkMaterialInput!, courseId: ID!): ClassworkMaterial!
  updateClassworkMaterial(updateClassworkMaterialInput: UpdateClassworkMaterialInput!, classworkMaterialId: ID!): ClassworkMaterial!
  updateClassworkMaterialPublication(publicationState: Publication!, classworkMaterialId: ID!): ClassworkMaterial!
  addAttachmentsToClassworkMaterial(attachmentsInput: AddAttachmentsToClassworkInput!, classworkMaterialId: ID!): ClassworkMaterial!
  removeAttachmentsFromClassworkMaterial(attachments: [String!]!, classworkMaterialId: ID!): ClassworkMaterial!
  createClassworkAssignment(courseId: ID!, input: CreateClassworkAssignmentInput!): ClassworkAssignment!
  updateClassworkAssignment(updateInput: UpdateClassworkAssignmentInput!, id: ID!): ClassworkAssignment!
  updateClassworkAssignmentPublication(publication: String!, id: ID!): ClassworkAssignment!
  addAttachmentsToClassworkAssignment(attachmentsInput: AddAttachmentsToClassworkInput!, classworkAssignmentId: ID!): ClassworkAssignment!
  removeAttachmentsFromClassworkAssignments(attachments: [String!]!, classworkAssignmentId: ID!): ClassworkAssignment!
  createClassworkSubmission(createClassworkSubmissionInput: CreateClassworkSubmissionInput!, courseId: ID!): ClassworkSubmission!
  setGradeForClassworkSubmission(setGradeForClassworkSubmissionInput: SetGradeForClassworkSubmissionInput!): ClassworkSubmission!
  updateFile(newFile: Upload!, id: ID!): File!
  createConversation(conversationInput: CreateConversationInput!): Conversation!
  createRatingForTheLesson(ratingInput: RatingInput!): Rating!
  createLesson(createLessonInput: CreateLessonInput!): Lesson!
  updateLesson(updateInput: UpdateLessonInput!, lessonId: ID!, courseId: ID!): Lesson!
  addAbsentStudentsToLesson(absentStudentIds: [String!]!, lessonId: ID!, courseId: ID!): Lesson!
  removeAbsentStudentsFromLesson(absentStudentIds: [String!]!, lessonId: ID!, courseId: ID!): Lesson!
  commentsByLecturer(commentsForTheLessonByLecturerInput: CommentsForTheLessonByLecturerInput!, commentsForTheLessonByLecturerQuery: CommentsForTheLessonByLecturerQuery!): Lesson!
  createQuiz(input: CreateQuizInput!): Quiz!
  updatePublicationQuiz(publicationState: String!, id: String!): Quiz!
  createQuestion(input: CreateQuestionInput!): Question!
  createQuizSubmit(input: CreateQuizSubmitInput!): QuizSubmit!
  submitQuiz(input: SubmitQuizInput!): QuizSubmit!
}

input CreateAccountInput {
  username: String!
  email: String!
  displayName: String
  roles: [String!]!
}

input UpdateAccountInput {
  username: String
  email: String
  displayName: String
  roles: [String!]
  password: String
}

input CreateAcademicSubjectInput {
  name: String!
  code: String!
  description: String = ""
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateAcademicSubjectInput {
  name: String
  description: String
}

input CreateOrgOfficeInput {
  name: String!
  address: String!
  phone: String!
}

input UpdateOrgOfficeInput {
  name: String
  address: String
  phone: String
}

input CreateCourseInput {
  academicSubjectId: String!
  orgOfficeId: String!
  code: String!
  name: String!
  startDate: DateTime!
  tuitionFee: Float!
  lecturerIds: [String!] = []
  daysOfTheWeek: [DayOfTheWeekInput!] = []
  totalNumberOfLessons: Float!
}

input DayOfTheWeekInput {
  dayOfWeek: DayOfWeek!
  startTime: String!
  endTime: String!
}

input UpdateCourseInput {
  name: String
  tuitionFee: Float
  startDate: String
  lecturerIds: [ID!]
}

input CloneCourseInput {
  courseIdMustCopy: ID!
  orgOfficeId: String!
  code: String!
  name: String!
  startDate: DateTime!
  tuitionFee: Float
  lecturerIds: [String!]
  daysOfTheWeek: [DayOfTheWeekInput!]
}

input CreateClassworkMaterialInput {
  title: String!
  description: String
  publicationState: Publication
  attachments: [Upload!]
}

input UpdateClassworkMaterialInput {
  title: String
  description: String
}

input AddAttachmentsToClassworkInput {
  attachments: [Upload!]!
}

input CreateClassworkAssignmentInput {
  title: String!
  description: String!
  attachments: [Upload!] = []
  dueDate: DateTime
  publicationState: Publication
}

input UpdateClassworkAssignmentInput {
  title: String
  description: String
  dueDate: DateTime
}

input CreateClassworkSubmissionInput {
  classworkId: ID!
  submissionFiles: [Upload!]
  description: String = null
}

input SetGradeForClassworkSubmissionInput {
  submissionId: ID!
  grade: Float!
}

input CreateConversationInput {
  createdByAccountId: ID!
  roomId: ID!
  content: String!
  type: String
}

input RatingInput {
  targetId: ID!
  numberOfStars: Float = 1
}

input CreateLessonInput {
  startTime: DateTime!
  endTime: DateTime!
  description: String
  courseId: String!
  publicationState: Publication = Draft
}

input UpdateLessonInput {
  options: UpdateLessonTimeOptions = ArbitraryChange
  numberOfLessonsPostponed: Float = 0
  startTime: DateTime
  endTime: DateTime
  description: String
  absentStudentIds: [String!]
  publicationState: Publication
  classworkMaterialListBeforeClass: [String!]
  classworkMaterialListInClass: [String!]
  classworkMaterialListAfterClass: [String!]
  classworkAssignmentListBeforeClass: [String!]
  classworkAssignmentListInClass: [String!]
  classworkAssignmentListAfterClass: [String!]
}

enum UpdateLessonTimeOptions {
  DoNotChangeTheOrderOfTheLessons
  ArbitraryChange
}

input CommentsForTheLessonByLecturerInput {
  comment: String
}

input CommentsForTheLessonByLecturerQuery {
  lessonId: ID!
  courseId: ID!
}

input CreateQuizInput {
  title: String!
  courseId: String!
  questionIds: [String!] = []
  duration: Float
  description: String!
  publicationState: Publication
}

input CreateQuestionInput {
  title: String!
  scores: Float!
  questionChoicesTitle: [String!]!
  questionChoicesRight: [Boolean!]!
}

input CreateQuizSubmitInput {
  quizId: String!
  startTime: DateTime!
}

input SubmitQuizInput {
  quizSubmitId: String!
  questionIds: [String!]!
  questionChoiceIds: [String!]!
}

type Subscription {
  classworkAssignmentCreated(courseId: ID!): ClassworkAssignment!
  conversationCreated(roomId: String!): Conversation!
}
