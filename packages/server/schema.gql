# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Course implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  academicSubjectId: ID!
  orgOfficeId: ID!
  code: String!
  name: String!
  startDate: DateTime!
  tuitionFee: Float!
  publicationState: Publication!
  publishedAt: DateTime!
  lecturerIds: [String!]!
  studentIds: [String!]!
  createdByAccountId: ID!
}

interface BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Publication {
  Draft
  Published
}

type Account implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  displayName: String
  otp: String
  otpExpired: DateTime
  status: AccountStatus!
  roles: [String!]!
  availability: AccountAvailability!
}

"""Status of an account."""
enum AccountStatus {
  Pending
  Active
  Deactivated
}

enum AccountAvailability {
  Online
  Offline
  Away
}

type File implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  size: Int!
  mimeType: String!
  storageProvider: FileLocation!
  storageProviderIdentifier: String!
  signedUrl: String
}

enum FileLocation {
  LocalStorage
}

type Org implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  namespace: String!
  name: String!
}

type ClassworkAssignment implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: String!
  courseId: ID!
  title: String!
  type: String!
  description: String
  attachments: [String!]!
  publicationState: String!
  dueDate: DateTime
  maxScores: Float!
}

type ClassworkMaterial implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: String!
  courseId: ID!
  title: String!
  type: String!
  description: String
  attachments: [String!]!
  publicationState: String!
}

type ClassworkSubmission implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: String!
  classworkId: ID!
  grade: Float!
  submissionFileIds: [String!]!
  description: String!
}

type ClassworkAssignmentPayload {
  classworkAssignments: [ClassworkAssignment!]!
  count: Int!
}

type ClassworkMaterialPayload {
  classworkMaterials: [ClassworkMaterial!]!
  count: Int!
}

type AvgGradeOfClassworkByCourse {
  classworkTitle: String!
  avgGrade: Float!
}

type OrgOffice implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: String!
  phone: String!
}

type AcademicSubject implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  description: String!
  publication: Publication!
  imageFileId: String!
}

type AuthenticatePayload {
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

enum Permission {
  Hr_Access
  Hr_CreateOrgAccount
  Hr_ListOrgAccounts
  Hr_UpdateOrgAccount
  Hr_UpdateOrgAccountStatus
  Academic_AcademicSubject_Access
  Academic_CreateAcademicSubject
  Academic_ListAcademicSubjects
  Academic_SetAcademicSubjectPublication
  Academic_UpdateAcademicSubject
  OrgOffice_Access
  OrgOffice_CreateOrgOffice
  OrgOffice_ListOrgOffices
  OrgOffice_UpdateOrgOffice
  Classwork_ListClassworkAssignment
  Classwork_ListClassworkMaterial
  Academic_Course_Access
  Academic_CreateCourse
  Academic_UpdateCourse
  Academic_ListCourses
  Academic_AddStudentsToCourse
  Academic_AddLecturersToCourse
  Academic_RemoveStudentsFromCourse
  Academic_RemoveLecturersFromCourse
  Teaching_Course_Access
  Studying_Course_Access
  Classwork_CreateClassworkAssignment
  Classwork_UpdateClassworkAssignment
  Classwork_SetClassworkAssignmentPublication
  Classwork_AddAttachmentsToClassworkAssignment
  Classwork_RemoveAttachmentsFromClassworkAssignment
  Classwork_UpdateClassworkMaterial
  Classwork_CreateClassworkMaterial
  Classwork_SetClassworkMaterialPublication
  Classwork_AddAttachmentsToClassworkMaterial
  Classwork_RemoveAttachmentsFromClassworkMaterial
  Classwork_SetGradeForClassworkSubmission
  Comment_CreateComment
  Classwork_CreateClassworkSubmission
  Classwork_ListClassworkSubmission
  AvgGradeStatisticsOfClassworkInTheCourse
  NoPermission
}

type SignInPayload {
  token: String!
  account: Account!
  org: Org!
  permissions: [Permission!]!
}

type OrgAccountsPayload {
  accounts: [Account!]!
  count: Int!
}

type AcademicSubjectsPayload {
  academicSubjects: [AcademicSubject!]!
  count: Int!
}

type CoursesPayload {
  courses: [Course!]!
  count: Int!
}

type Comment implements BaseModel {
  id: ID!
  orgId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByAccountId: String!
  targetId: ID!
  content: String!
}

type CommentsPayload {
  comments: [Comment!]!
  count: Int!
}

type Query {
  account(id: ID!): Account
  accountByUserName(username: String!): Account
  orgAccounts(filter: AccountsFilterInput!, pageOptions: PageOptionsInput!): OrgAccountsPayload!
  authenticate: AuthenticatePayload!
  canAccountManageRoles(roles: [String!]!): Boolean!
  academicSubjects(filter: AcademicSubjectsFilterInput!, pageOptions: PageOptionsInput!): AcademicSubjectsPayload!
  academicSubject(id: ID!): AcademicSubject!
  findCourseById(id: ID!): Course!
  courses(filter: CoursesFilterInput!, pageOptions: PageOptionsInput!): CoursesPayload!
  calculateAvgGradeOfClassworkAssignmentInCourse(optionInput: AvgGradeOfClassworkByCourseOptionInput!, courseId: ID!): [AvgGradeOfClassworkByCourse!]!
  orgOffices: [OrgOffice!]!
  orgOffice(id: ID!): OrgOffice!
  file(id: ID!): File
  classworkMaterials(searchText: String, courseId: String!, pageOptions: PageOptionsInput!): ClassworkMaterialPayload!
  classworkMaterial(Id: ID!): ClassworkMaterial!
  classworkAssignment(id: ID!): ClassworkAssignment!
  classworkAssignments(searchText: String, courseId: ID!, pageOptions: PageOptionsInput!): ClassworkAssignmentPayload!
  classworkSubmissions(classworkAssignmentId: ID!): [ClassworkSubmission!]!
  findClassworkSubmissionById(classworkSubmissionId: ID!): ClassworkSubmission!
  findOneClassworkSubmission(ClassworkAssignment: ID!): ClassworkSubmission!
  comments(commentPageOptionInput: CommentPageOptionInput!, lastId: ID, targetId: ID!): CommentsPayload!
}

input AccountsFilterInput {
  orgId: ID!
  roles: [String!]
  searchText: String
}

input PageOptionsInput {
  skip: Int!
  limit: Int!
}

input AcademicSubjectsFilterInput {
  orgId: ID!
  searchText: String
}

input CoursesFilterInput {
  orgId: ID!
  searchText: String
  lecturerIds: [ID!]
  studentIds: [ID!]
}

input AvgGradeOfClassworkByCourseOptionInput {
  limit: Float = 0
}

input CommentPageOptionInput {
  limit: Int!
}

type Mutation {
  createOrgAccount(input: CreateAccountInput!): Account!
  updateAccount(updateInput: UpdateAccountInput!, id: ID!): Account!
  updateAccountStatus(status: String!, id: ID!): Account!
  setPassword(otp: String!, password: String!, usernameOrEmail: String!): Account!
  resetPassword(usernameOrEmail: String!): Account!
  signIn(
    password: String!

    """Could be username or email"""
    identity: String!
    orgNamespace: String!
  ): SignInPayload!
  createAcademicSubject(input: CreateAcademicSubjectInput!): AcademicSubject!
  updateAcademicSubjectPublication(publication: String!, id: ID!): AcademicSubject!
  updateAcademicSubject(updateInput: UpdateAcademicSubjectInput!, id: ID!): AcademicSubject!
  createCourse(input: CreateCourseInput!): Course!
  updateCourse(updateInput: UpdateCourseInput!, id: ID!): Course!
  addLecturesToCourse(lecturerIds: [ID!]!, courseId: ID!): Course!
  addStudentsToCourse(studentIds: [ID!]!, courseId: ID!): Course!
  removeStudentsFromCourse(studentIds: [ID!]!, id: ID!): Course!
  removeLecturersFromCourse(lecturerIds: [ID!]!, id: ID!): Course!
  createOrgOffice(input: CreateOrgOfficeInput!): OrgOffice!
  updateOrgOffice(input: UpdateOrgOfficeInput!, id: ID!): OrgOffice!
  findOrgOffices(searchText: String, orgId: ID): [OrgOffice!]!
  updateFile(newFile: Upload!, id: ID!): File!
  createClassworkMaterial(CreateClassworkMaterialInput: CreateClassworkMaterialInput!, courseId: ID!): ClassworkMaterial!
  updateClassworkMaterial(updateClassworkMaterialInput: UpdateClassworkMaterialInput!, classworkMaterialId: ID!): ClassworkMaterial!
  updateClassworkMaterialPublication(publicationState: Publication!, classworkMaterialId: ID!): ClassworkMaterial!
  addAttachmentsToClassworkMaterial(attachmentsInput: AddAttachmentsToClassworkInput!, classworkMaterialId: ID!): ClassworkMaterial!
  removeAttachmentsFromClassworkMaterial(attachments: [String!]!, classworkMaterialId: ID!): ClassworkMaterial!
  createClassworkAssignment(courseId: ID!, input: CreateClassworkAssignmentInput!): ClassworkAssignment!
  updateClassworkAssignment(updateInput: UpdateClassworkAssignmentInput!, id: ID!): ClassworkAssignment!
  updateClassworkAssignmentPublication(publication: String!, id: ID!): ClassworkAssignment!
  addAttachmentsToClassworkAssignment(attachmentsInput: AddAttachmentsToClassworkInput!, classworkAssignmentId: ID!): ClassworkAssignment!
  removeAttachmentsFromClassworkAssignments(attachments: [String!]!, classworkAssignmentId: ID!): ClassworkAssignment!
  createClassworkSubmission(createClassworkSubmissionInput: CreateClassworkSubmissionInput!, courseId: ID!): ClassworkSubmission!
  setGradeForClassworkSubmission(setGradeForClassworkSubmissionInput: SetGradeForClassworkSubmissionInput!): ClassworkSubmission!
  createComment(commentInput: CreateCommentInput!): Comment!
}

input CreateAccountInput {
  username: String!
  email: String!
  displayName: String
  roles: [String!]!
}

input UpdateAccountInput {
  username: String
  email: String
  displayName: String
  roles: [String!]
  password: String
}

input CreateAcademicSubjectInput {
  name: String!
  code: String!
  description: String = ""
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateAcademicSubjectInput {
  name: String
  description: String
}

input CreateCourseInput {
  academicSubjectId: String!
  orgOfficeId: String!
  code: String!
  name: String!
  startDate: String!
  tuitionFee: Float!
  lecturerIds: [String!] = []
}

input UpdateCourseInput {
  name: String
  tuitionFee: Float
  startDate: String
  lecturerIds: [ID!]
}

input CreateOrgOfficeInput {
  name: String!
  address: String!
  phone: String!
}

input UpdateOrgOfficeInput {
  name: String
  address: String
  phone: String
}

input CreateClassworkMaterialInput {
  title: String!
  description: String
  publicationState: Publication
  attachments: [Upload!]
}

input UpdateClassworkMaterialInput {
  title: String
  description: String
}

input AddAttachmentsToClassworkInput {
  attachments: [Upload!]!
}

input CreateClassworkAssignmentInput {
  title: String!
  description: String!
  attachments: [Upload!] = []
  dueDate: DateTime
  publicationState: Publication
}

input UpdateClassworkAssignmentInput {
  title: String
  description: String
  dueDate: String
}

input CreateClassworkSubmissionInput {
  classworkId: ID!
  submissionFiles: [Upload!]
  description: String = null
}

input SetGradeForClassworkSubmissionInput {
  submissionId: ID!
  grade: Float!
}

input CreateCommentInput {
  createdByAccountId: ID!
  targetId: ID!
  content: String!
}
